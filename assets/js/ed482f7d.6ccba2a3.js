"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[637],{5162:(e,t,n)=>{n.d(t,{Z:()=>s});var i=n(7294),r=n(6010);const a={tabItem:"tabItem_Ymn6"};function s(e){let{children:t,hidden:n,className:s}=e;return i.createElement("div",{role:"tabpanel",className:(0,r.Z)(a.tabItem,s),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>L});var i=n(7462),r=n(7294),a=n(6010),s=n(2466),l=n(6550),o=n(1980),d=n(7392),u=n(12);function m(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:i,default:r}}=e;return{value:t,label:n,attributes:i,default:r}}))}function c(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??m(n);return function(e){const t=(0,d.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function _(e){let{queryString:t=!1,groupId:n}=e;const i=(0,l.k6)(),a=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o._X)(a),(0,r.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(i.location.search);t.set(a,e),i.replace({...i.location,search:t.toString()})}),[a,i])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:i}=e,a=c(e),[s,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const i=n.find((e=>e.default))??n[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:t,tabValues:a}))),[o,d]=_({queryString:n,groupId:i}),[m,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[i,a]=(0,u.Nk)(n);return[i,(0,r.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:i}),f=(()=>{const e=o??m;return p({value:e,tabValues:a})?e:null})();(0,r.useLayoutEffect)((()=>{f&&l(f)}),[f]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),h(e)}),[d,h,a]),tabValues:a}}var f=n(2389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function k(e){let{className:t,block:n,selectedValue:l,selectValue:o,tabValues:d}=e;const u=[],{blockElementScrollPositionUntilNextRender:m}=(0,s.o5)(),c=e=>{const t=e.currentTarget,n=u.indexOf(t),i=d[n].value;i!==l&&(m(t),o(i))},p=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":n},t)},d.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,i.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>u.push(e),onKeyDown:p,onClick:c},s,{className:(0,a.Z)("tabs__item",b.tabItem,s?.className,{"tabs__item--active":l===t})}),n??t)})))}function y(e){let{lazy:t,children:n,selectedValue:i}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=a.find((e=>e.props.value===i));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},a.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==i}))))}function w(e){const t=h(e);return r.createElement("div",{className:(0,a.Z)("tabs-container",b.tabList)},r.createElement(k,(0,i.Z)({},e,t)),r.createElement(y,(0,i.Z)({},e,t)))}function L(e){const t=(0,f.Z)();return r.createElement(w,(0,i.Z)({key:String(t)},e))}},4529:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>m,default:()=>b,frontMatter:()=>u,metadata:()=>c,toc:()=>_});var i=n(7462),r=(n(7294),n(3905)),a=n(4866),s=n(5162),l=n(614);const o='#include <stdio.h>  // printf\n#include <stdlib.h> // malloc\n#include <string.h> // strcpy, strcmp\n#include <assert.h> // assert\n\ntypedef struct todo_list\n{\n    char item_name[100];\n    int number_of_item;\n    int is_important; // no boolean type in C, use 0/1 for false/true\n    struct todo_list *next;\n} todo_list;\n\ntodo_list *create_new_item(char item_name[], int number_of_item, int is_important)\n{\n    todo_list *list;\n    list = malloc(sizeof(todo_list));\n    assert(list);\n    strcpy(list->item_name, item_name);\n    list->number_of_item = number_of_item;\n    list->is_important = is_important;\n    list->next = NULL;\n    return list;\n}\n\nvoid print_item(todo_list *list)\n{\n    if (list == NULL)\n    {\n        return;\n    }\n    else\n    {\n        printf("Item name: %s\\n", list->item_name);\n        printf("Number of items: %d\\n", list->number_of_item);\n\n        if (list->is_important == 0)\n        {\n            printf("Is important: false\\n");\n        }\n        else\n        {\n            printf("Is important: true\\n");\n        }\n    }\n}\n\nvoid print_list(todo_list *list)\n{\n    if (list == NULL)\n    {\n        return;\n    }\n    else\n    {\n        print_item(list);\n\n        if (list->next == NULL)\n        {\n            return;\n        }\n        else\n        {\n            printf("\\n");\n            print_list(list->next);\n        }\n    }\n}\n\nvoid insert_head(todo_list **list, todo_list *todo_item)\n{\n    todo_item->next = *list;\n    *list = todo_item;\n}\n\ntodo_list *search_list(todo_list *list, char item_name[])\n// returns pointer to the todo item\n{\n    if (list == NULL)\n    {\n        return NULL;\n    }\n\n    if (strcmp(list->item_name, item_name) == 0)\n    {\n        return list;\n    }\n    else\n    {\n        return search_list(list->next, item_name);\n        // if program arrives here it must return\n    }\n}\n\ntodo_list *item_ahead(todo_list *list, char item_name[])\n{\n    if ((list == NULL) || (list->next == NULL))\n    {\n        return (NULL);\n    }\n\n    if (strcmp(list->item_name, item_name) == 0)\n    {\n        return (list->next);\n    }\n    else\n    {\n        return (item_ahead(list->next, item_name));\n    }\n}\n\nvoid delete_head(todo_list **list)\n{\n    if ((*list) != NULL)\n    {\n        todo_list *head;\n        head = (*list)->next;\n        free(*list);\n        *list = head;\n    }\n}\n\nvoid delete_list(todo_list **list)\n{\n    while ((*list) != NULL)\n    {\n        delete_head(list);\n    }\n}\n\nint main()\n{\n    todo_list *my_list = create_new_item("bread", 2, 0);\n    todo_list *milk = create_new_item("milk", 3, 1);\n    insert_head(&my_list, milk);\n\n    print_list(my_list);\n\n    // search\n    char item[] = "bread";\n    todo_list *my_item = search_list(my_list, item);\n\n    if (my_item == NULL)\n    {\n        printf("\\n%s is not included in my list.\\n", item);\n    }\n    else\n    {\n        printf("\\n%s is included in my list.\\n", item);\n    }\n\n    // item ahead\n    todo_list *next_item;\n    next_item = item_ahead(my_list, "milk");\n    printf("next time: %s\\n", next_item->item_name);\n\n    printf("\\n+++ Delete head +++\\n");\n    delete_head(&my_list);\n    print_list(my_list);\n\n    printf("\\n+++ Insert milk again +++\\n");\n    milk = create_new_item("milk", 5, 0);\n    insert_head(&my_list, milk);\n    print_list(my_list);\n\n    printf("\\n+++ Delete all +++\\n");\n    delete_list(&my_list);\n    print_list(my_list);\n\n    return 0;\n}\n',d='// linked lists are dynamic collection\n// adding new item has O(1) complexity, while searching items in the list has\n// O(N) cost. In comparison, inserting item in a regular array is O(N) while\n// array search is O(1). If we use dynamic array instead of static array, we\n// start with a specific size of the array, once we run out of space, we\n// allocate a new array with double the previous size of array. We copy the\n// first half of the array from previous array, and add the new element. In this\n// we need to double about log(N) time for N item, so half of the item is copied\n// once, quarter of item is moved twice, and so on, we will see that this is\n// still a O(N) complexity to build such array.\n// linked lists are used where the array size is not known compile time, and\n// we do not need random access to the items in it.\n// Use cases: list of navigational nodes (going from one point to another in a\n// map), list of items in a shopping cart\n\n#include <iostream>\n#include <string>\nusing namespace std;\n\n// this is the data structure we are going to store in our list\nstruct LinkedList\n{\n    string item_name;\n    int number_of_item;\n    LinkedList *next;\n};\n\n// inserting new element to the head i.e., the new element becomes head\nvoid add_to_head(LinkedList *&head, string new_item_name, int new_number_of_item)\n{\n    LinkedList *new_ptr;\n    new_ptr = new LinkedList;\n    new_ptr->item_name = new_item_name;\n    new_ptr->number_of_item = new_number_of_item;\n    new_ptr->next = head;\n\n    head = new_ptr;\n}\n\nvoid print_linked_list(LinkedList *head)\n{\n    LinkedList *ref_ptr = head;\n    cout << "List items: \\n";\n\n    while (true)\n    {\n        cout << ref_ptr->item_name << " (" << ref_ptr->number_of_item << " pcs.)"\n             << endl;\n        ref_ptr = ref_ptr->next;\n\n        if (!ref_ptr)\n        {\n            break;\n        }\n    }\n}\n\nint length_linked_list(LinkedList *head)\n{\n    int len = 0;\n    LinkedList *ref_ptr = head;\n\n    while (true)\n    {\n        len += 1;\n        ref_ptr = ref_ptr->next;\n\n        if (!ref_ptr)\n        {\n            break;\n        }\n    }\n\n    return len;\n}\n\nvoid delete_head(LinkedList *&head)\n// in order to delete and modify pointer we need pass by reference\n{\n    if (head)\n    {\n        LinkedList *tmp_ptr;\n        tmp_ptr = head->next;\n        delete head;\n        head = tmp_ptr;\n    }\n}\n\nint main()\n{\n    // let\'s define our head pointer first\n    // head pointer points to the first element of the linked list\n    // head pointer also used to refer to the linked list as a whole\n    LinkedList *head;\n    head = new LinkedList;\n    // assign the first element of the linked list\n    // two ways of accessing struct members via pointer dereferencing\n    head->item_name = "bread"; // (*head).item_name = "bread";\n    head->number_of_item = 3;\n    // if our list has only one item, the next pointer points to NULL\n    // in case the head pointer points to nullptr, the list is empty\n    // head = nullptr; // refers to empty linked list\n    head->next = nullptr;\n\n    cout << "Length of list = " << length_linked_list(head) << endl;\n\n    // let\'s add new item to the head\n    add_to_head(head, "water bottle", 5);\n\n    print_linked_list(head);\n\n    // add another item and print\n    add_to_head(head, "tissue roll", 2);\n    print_linked_list(head);\n    cout << "Length of list = " << length_linked_list(head) << endl;\n\n    delete_head(head);\n    print_linked_list(head);\n\n    return 0;\n}\n',u={title:"Linked list"},m=void 0,c={unversionedId:"data-structure/linked-list",id:"data-structure/linked-list",title:"Linked list",description:"",source:"@site/docs/data-structure/linked-list.mdx",sourceDirName:"data-structure",slug:"/data-structure/linked-list",permalink:"/c-cpp/data-structure/linked-list",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/data-structure/linked-list.mdx",tags:[],version:"current",frontMatter:{title:"Linked list"},sidebar:"docs",previous:{title:"Complex number",permalink:"/c-cpp/data-structure/complex-number"},next:{title:"Binary trees",permalink:"/c-cpp/data-structure/binary-trees"}},p={},_=[],h={toc:_},f="wrapper";function b(e){let{components:t,...n}=e;return(0,r.kt)(f,(0,i.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(a.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"C",mdxType:"TabItem"},(0,r.kt)(l.Z,{language:"c",title:"src/c/data-structure/linked-list.c",showLineNumbers:!0,mdxType:"CodeBlock"},o)),(0,r.kt)(s.Z,{value:"C++",mdxType:"TabItem"},(0,r.kt)(l.Z,{language:"cpp",title:"src/cpp/data-structure/linked-list.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},d))))}b.isMDXComponent=!0}}]);