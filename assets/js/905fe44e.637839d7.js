"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[1528],{85162:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(67294),a=n(86010);const i={tabItem:"tabItem_Ymn6"};function s(e){let{children:t,hidden:n,className:s}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i.tabItem,s),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>w});var r=n(87462),a=n(67294),i=n(86010),s=n(12466),o=n(16550),u=n(91980),l=n(67392),c=n(50012);function d(e){return function(e){return a.Children.map(e,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function m(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,l.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function b(e){let{queryString:t=!1,groupId:n}=e;const r=(0,o.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,u._X)(i),(0,a.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(r.location.search);t.set(i,e),r.replace({...r.location,search:t.toString()})}),[i,r])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,i=m(e),[s,o]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:i}))),[u,l]=b({queryString:n,groupId:r}),[d,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,i]=(0,c.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:r}),h=(()=>{const e=u??d;return p({value:e,tabValues:i})?e:null})();(0,a.useLayoutEffect)((()=>{h&&o(h)}),[h]);return{selectedValue:s,selectValue:(0,a.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),l(e),f(e)}),[l,f,i]),tabValues:i}}var h=n(72389);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function g(e){let{className:t,block:n,selectedValue:o,selectValue:u,tabValues:l}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.o5)(),m=e=>{const t=e.currentTarget,n=c.indexOf(t),r=l[n].value;r!==o&&(d(t),u(r))},p=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},l.map((e=>{let{value:t,label:n,attributes:s}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>c.push(e),onKeyDown:p,onClick:m},s,{className:(0,i.Z)("tabs__item",v.tabItem,s?.className,{"tabs__item--active":o===t})}),n??t)})))}function y(e){let{lazy:t,children:n,selectedValue:r}=e;if(n=Array.isArray(n)?n:[n],t){const e=n.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function k(e){const t=f(e);return a.createElement("div",{className:(0,i.Z)("tabs-container",v.tabList)},a.createElement(g,(0,r.Z)({},e,t)),a.createElement(y,(0,r.Z)({},e,t)))}function w(e){const t=(0,h.Z)();return a.createElement(k,(0,r.Z)({key:String(t)},e))}},15180:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>d,default:()=>v,frontMatter:()=>c,metadata:()=>m,toc:()=>b});var r=n(87462),a=(n(67294),n(3905)),i=n(74866),s=n(85162),o=n(90814);const u='#include <stdio.h>\n\n// long allows factorial up to 20\nlong factorial(int num)\n{\n    if (num == 1)\n        return 1;\n    else\n        return (num * factorial(num - 1));\n}\n\nint main()\n{\n    int lim = 10, i;\n    long fact;\n\n    for (i = 1; i < lim; i++)\n    {\n        fact = factorial(i);\n        printf("%d! = %ld\\n", i, fact);\n    }\n    return 0;\n}\n',l='#include <iostream>\nusing namespace std;\n\nlong fibonacci(int n)\n{\n    if (n <= 1)\n        return n;\n    else\n        return (fibonacci(n - 1) + fibonacci(n - 2));\n}\n\nint main()\n{\n    int lim = 45, i;\n    long fib;\n\n    for (i = 0; i < lim; i++)\n    {\n        fib = fibonacci(i);\n        cout << "F(" << i << ") = " << fib << endl;\n    }\n    \n    return 0;\n}\n',c={title:"Recursion"},d=void 0,m={unversionedId:"basics/recursion",id:"basics/recursion",title:"Recursion",description:"Recursion enables us to solve certain types of problems very elegantly, however",source:"@site/docs/basics/recursion.mdx",sourceDirName:"basics",slug:"/basics/recursion",permalink:"/c-cpp/basics/recursion",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/basics/recursion.mdx",tags:[],version:"current",frontMatter:{title:"Recursion"},sidebar:"docs",previous:{title:"Function",permalink:"/c-cpp/basics/function"},next:{title:"Static storage",permalink:"/c-cpp/basics/static-storage"}},p={},b=[],f={toc:b},h="wrapper";function v(e){let{components:t,...n}=e;return(0,a.kt)(h,(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"C",mdxType:"TabItem"},(0,a.kt)(o.Z,{language:"c",title:"src/c/basics/06-recursive-factorial.c",showLineNumbers:!0,mdxType:"CodeBlock"},u)),(0,a.kt)(s.Z,{value:"C++",mdxType:"TabItem"},(0,a.kt)(o.Z,{language:"cpp",title:"src/cpp/basics/06-recursive-fibonacci.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},l))),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Recursion enables us to solve certain types of problems very elegantly, however\nthere are certain downside to large numbers of recursive function calls; it\nrequires large amount of stack memory, and program might crash with stack\noverflow.")))}v.isMDXComponent=!0}}]);