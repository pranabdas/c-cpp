"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[395],{8887:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>m});var a=t(7462),i=(t(7294),t(3905)),l=t(5488),o=t(5162),r=t(814);const s={title:"Hello world"},c=void 0,p={unversionedId:"basics/hello-world",id:"basics/hello-world",title:"Hello world",description:'We will learn through writing code. It is customary start with "Hello world!"',source:"@site/docs/basics/hello-world.mdx",sourceDirName:"basics",slug:"/basics/hello-world",permalink:"/c-cpp/basics/hello-world",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/basics/hello-world.mdx",tags:[],version:"current",frontMatter:{title:"Hello world"},sidebar:"docs",previous:{title:"Basics",permalink:"/c-cpp/category/basics"},next:{title:"Add two integers",permalink:"/c-cpp/basics/add-two-integers"}},d={},m=[],u={toc:m};function g(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,'We will learn through writing code. It is customary start with "Hello world!"\nprogram when learning a new programming language. This program simply prints a\nmessage in the terminal indicating the code ran successfully.'),(0,i.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"C",mdxType:"TabItem"},(0,i.kt)(r.Z,{language:"c",title:"src/c/basics/00-hello-world.c",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <stdio.h>\n\nint main()\n{\n    printf("Hello C!\\n");\n    return 0;\n}\n')),(0,i.kt)(o.Z,{value:"C++",mdxType:"TabItem"},(0,i.kt)(r.Z,{language:"cpp",title:"src/cpp/basics/00-hello-world.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <iostream>\n#include <cstdio> // original c standard io to use printf\n\nint main()\n{\n    std::cout << "Hello C++!\\n";\n    // we can still use printf from c standard io\n    printf("Hello from c standard io printf.\\n");\n\n    return 0;\n}\n'))),(0,i.kt)("p",null,"Compile the code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# in case of C\ngcc filename.c\n\n# in case of C++\ng++ filename.cpp\n")),(0,i.kt)("p",null,"It will produce an executable (binary) file named ",(0,i.kt)("inlineCode",{parentName:"p"},"a.out"),". We can run the\nexecutable by typing:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./a.out\n")),(0,i.kt)("p",null,"If you will to name your program something other than ",(0,i.kt)("inlineCode",{parentName:"p"},"a.out"),", you can specify\na custom name using ",(0,i.kt)("inlineCode",{parentName:"p"},"-o")," flag:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"gcc filename.c -o my_program\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("ol",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ol"},"It is possible to include entire standard library in C++ (it is a feature of\ng++ compiler) by:")),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <bits/stdc++.h>\n")),(0,i.kt)("ol",{parentName:"admonition",start:2},(0,i.kt)("li",{parentName:"ol"},"Input and output streams can me made more efficient by including following in\nthe beginning (inside main) of the program:")),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ios::sync_with_stdio(0);\ncin.tie(0);\n")),(0,i.kt)("ol",{parentName:"admonition",start:3},(0,i.kt)("li",{parentName:"ol"},"Use of newline ",(0,i.kt)("inlineCode",{parentName:"li"},"\\n")," is faster than ",(0,i.kt)("inlineCode",{parentName:"li"},"endl"),", because ",(0,i.kt)("inlineCode",{parentName:"li"},"endl")," always causes a\nflush operation."))))}g.isMDXComponent=!0}}]);