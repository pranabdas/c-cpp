"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[325],{5162:(e,a,n)=>{n.d(a,{Z:()=>i});var t=n(7294),r=n(6010);const s="tabItem_Ymn6";function i(e){let{children:a,hidden:n,className:i}=e;return t.createElement("div",{role:"tabpanel",className:(0,r.Z)(s,i),hidden:n},a)}},5488:(e,a,n)=>{n.d(a,{Z:()=>p});var t=n(7462),r=n(7294),s=n(6010),i=n(2389),l=n(7392),o=n(7094),c=n(2466);const u="tabList__CuJ",m="tabItem_LNqP";function d(e){var a;const{lazy:n,block:i,defaultValue:d,values:p,groupId:g,className:v}=e,b=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=p??b.map((e=>{let{props:{value:a,label:n,attributes:t}}=e;return{value:a,label:n,attributes:t}})),f=(0,l.l)(h,((e,a)=>e.value===a.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===d?d:d??(null==(a=b.find((e=>e.props.default)))?void 0:a.props.value)??b[0].props.value;if(null!==k&&!h.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:T}=(0,o.U)(),[x,w]=(0,r.useState)(k),E=[],{blockElementScrollPositionUntilNextRender:N}=(0,c.o5)();if(null!=g){const e=y[g];null!=e&&e!==x&&h.some((a=>a.value===e))&&w(e)}const Z=e=>{const a=e.currentTarget,n=E.indexOf(a),t=h[n].value;t!==x&&(N(a),w(t),null!=g&&T(g,String(t)))},C=e=>{var a;let n=null;switch(e.key){case"Enter":Z(e);break;case"ArrowRight":{const a=E.indexOf(e.currentTarget)+1;n=E[a]??E[0];break}case"ArrowLeft":{const a=E.indexOf(e.currentTarget)-1;n=E[a]??E[E.length-1];break}}null==(a=n)||a.focus()};return r.createElement("div",{className:(0,s.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":i},v)},h.map((e=>{let{value:a,label:n,attributes:i}=e;return r.createElement("li",(0,t.Z)({role:"tab",tabIndex:x===a?0:-1,"aria-selected":x===a,key:a,ref:e=>E.push(e),onKeyDown:C,onClick:Z},i,{className:(0,s.Z)("tabs__item",m,null==i?void 0:i.className,{"tabs__item--active":x===a})}),n??a)}))),n?(0,r.cloneElement)(b.filter((e=>e.props.value===x))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},b.map(((e,a)=>(0,r.cloneElement)(e,{key:a,hidden:e.props.value!==x})))))}function p(e){const a=(0,i.Z)();return r.createElement(d,(0,t.Z)({key:String(a)},e))}},1227:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>m,contentTitle:()=>c,default:()=>g,frontMatter:()=>o,metadata:()=>u,toc:()=>d});var t=n(7462),r=(n(7294),n(3905)),s=n(5488),i=n(5162),l=n(814);const o={title:"Parsing command arguments",sidebar_label:"Argument parsing"},c=void 0,u={unversionedId:"misc/arg-parsing",id:"misc/arg-parsing",title:"Parsing command arguments",description:"",source:"@site/docs/misc/arg-parsing.mdx",sourceDirName:"misc",slug:"/misc/arg-parsing",permalink:"/c-cpp/misc/arg-parsing",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/misc/arg-parsing.mdx",tags:[],version:"current",frontMatter:{title:"Parsing command arguments",sidebar_label:"Argument parsing"},sidebar:"docs",previous:{title:"Miscellaneous",permalink:"/c-cpp/category/miscellaneous"},next:{title:"Bit shifting",permalink:"/c-cpp/misc/bit-shifting"}},m={},d=[],p={toc:d};function g(e){let{components:a,...n}=e;return(0,r.kt)("wrapper",(0,t.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)(s.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"C",mdxType:"TabItem"},(0,r.kt)(l.Z,{language:"c",title:"src/c/misc/01-argc-argv.c",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <stdio.h>\n// ./a.out first second\n// argv[0] = a.out\n// argv[1] = first\n// argv[2] = second\n\nint main(int argc, char *argv[]) // argument count, argument vector\n{\n    for (int i = 0; i < argc; i++)\n    {\n        printf("argv[%d] = %s\\n", i, argv[i]);\n    }\n    return 0;\n}\n')),(0,r.kt)(i.Z,{value:"C++",mdxType:"TabItem"},(0,r.kt)(l.Z,{language:"cpp",title:"src/cpp/misc/01-argc-argv.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n    cout << "Program: " << argv[0] << endl;\n    cout << "You have provided " << argc - 1 << " arguments\\n";\n\n    if (argc > 1)\n    {\n        cout << "Arguments are:\\n";\n\n        for (int i = 1; i < argc; i++)\n        {\n            cout << "arg[" << i << "] : " << argv[i] << endl;\n        }\n    }\n\n    // Note that the arguments are string\n    // They have to be converted to other data type as necessary\n    // for example we can use `<cstdlib>` `atoi` to convert string to int\n\n    int max = atoi("100");\n    max += 10;\n\n    cout << max << endl;\n    \n    return 0;\n}\n'))))}g.isMDXComponent=!0}}]);