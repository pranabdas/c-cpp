"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([["4967"],{9707:function(n,t,e){e.r(t),e.d(t,{metadata:()=>a,contentTitle:()=>s,default:()=>m,assets:()=>c,toc:()=>o,frontMatter:()=>i});var a=JSON.parse('{"id":"data-structure/enum","title":"enum","description":"","source":"@site/docs/data-structure/enum.mdx","sourceDirName":"data-structure","slug":"/data-structure/enum","permalink":"/c-cpp/data-structure/enum","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/c-cpp/blob/main/docs/data-structure/enum.mdx","tags":[],"version":"current","frontMatter":{"title":"enum"},"sidebar":"docs","previous":{"title":"Struct","permalink":"/c-cpp/data-structure/struct"},"next":{"title":"Complex number","permalink":"/c-cpp/data-structure/complex-number"}}'),r=e("5893"),u=e("65"),d=e("5056");let i={title:"enum"},s=void 0,c={},o=[];function p(n){return(0,r.jsx)(d.Z,{language:"c",title:"src/c/data-structure/02-enum.c",showLineNumbers:!0,children:'#include <stdio.h>\n\nenum day\n{\n    SUN,\n    MON,\n    TUE,\n    WED,\n    THU,\n    FRI,\n    SAT\n};\n\n// if you do not want to avoid the keyword enum all the time\n// typedef enum day day;\n// now we can write \'day today FRI;\' instead of \'enum day today FRI;\n\nvoid print_day(enum day d)\n{\n    switch (d)\n    {\n    case SUN:\n        printf("Sunday");\n        break;\n    case MON:\n        printf("Monday");\n        break;\n    case TUE:\n        printf("Tuesday");\n        break;\n    case WED:\n        printf("Wednesday");\n        break;\n    case THU:\n        printf("Thursday");\n        break;\n    case FRI:\n        printf("Friday");\n        break;\n    case SAT:\n        printf("Saturday");\n        break;\n    default:\n        printf("Something went wrong!");\n        break;\n    }\n}\n\nenum day tomorrow(enum day d)\n{\n    // internally enum evaluates the index only\n    return ((d + 1) % 7);\n}\n\nint main()\n{\n    enum day today = FRI;\n    printf("Today is ");\n    // we can not format enum day type\n    print_day(FRI);\n    printf(".\\n");\n\n    printf("Tomorrow is ");\n    print_day(tomorrow(today));\n    printf(".\\n");\n    return 0;\n}\n'})}function m(n={}){let{wrapper:t}={...(0,u.a)(),...n.components};return t?(0,r.jsx)(t,{...n,children:(0,r.jsx)(p,{...n})}):p(n)}}}]);