"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[3714],{7131:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>b,contentTitle:()=>p,default:()=>m,frontMatter:()=>u,metadata:()=>d,toc:()=>f});var r=t(5893),a=t(1151),o=t(4866),i=t(5162),s=t(9286);const l='#include <stdio.h>\n\nint main()\n{\n    char a;\n    char *ptr; // declare a pointer for char type\n    a = \'A\';\n    printf("Value of variable a: %c\\n", a);\n    printf("Size of variable a: %lu byte(s)\\n", sizeof(a));\n\n    // now assign the address of variable a to pointer\n    ptr = &a;\n    printf("Address of ptr: %p\\n", ptr); // address of pointer\n    printf("Value of ptr: %c\\n", *ptr);  // value of pointer\n\n    int b = 456;\n    int *ptr_b;\n    ptr_b = &b;\n    printf("\\nValue of variable b: %d\\n", b);\n    printf("Address of variable b: %p\\n", ptr_b);\n    printf("Size of variable a: %lu byte(s)\\n", sizeof(b));\n\n    double c = 4.56;\n    double *ptr_c;\n    ptr_c = &c;\n    printf("\\nValue of variable c: %g\\n", c);\n    printf("Address of variable c: %p\\n", ptr_c);\n    printf("Size of variable a: %lu byte(s)\\n", sizeof(c));\n\n    return 0;\n}\n',c='// pointers are variables for storing memory addresses\n// type of pointer is tied to the type of variable address it stores\n\n// (1) the pointer must be allocated,\n// (2) the pointee must be allocated,\n// (3) the pointer must be assigned to point to the pointee.\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int x = 10;   // declare and assign a integer variable\n    int *ptr;     // declare an integer pointer\n                  // Note that pointers do not declare memory\n                  // A pointer must be assigned a pointee, before the pointer\n                  // can be dereferenced. This is a major source of pointer bugs\n    ptr = &x;     // `&` operator returns the address of a variable\n    int y = *ptr; // dereference the pointer variable to get its value\n\n    // The assignment operation (=) between two pointers make them point to the\n    // same pointee. This is called sharing.\n\n    // the dereference operator * can appear on the left side of an assignment\n    // we can assign a new value to x by:\n    // *ptr = 20;\n\n    // pointer to const: a non-constant pointer cannot point to constant var\n    const int z = 100;\n    const int *ptr_z;\n    ptr_z = &z;\n    // ++ptr_z; // OK\n\n    // there can also be constant pointer\n    int cx = 20;\n    int *const pt_cx = &cx; // const pointer can only be initialized\n                            // it cannot be assigned later\n    // ++*pt_cx; // OK: cx is not constant\n    // ++pt_cx;  // Not allowed: pt_cx is constant\n\n    // there could also be const pointer to const variable\n    // const int *const ptConst;\n\n    // null pointer\n    int *ptr_null = 0;\n    // alternatively\n    // ptr_null = NULL;\n    // ptr_null = nullptr;\n    cout << "NULL pointer: " << ptr_null << endl;\n\n    // type void*\n    // if we do not know the type of the pointer variable, we can declare\n    // void *ptv;\n    // address of any type can be stored in `ptv` above\n\n    cout << "prt : " << ptr << endl;\n    cout << "y : " << y << endl;\n\n    x = 25;\n    // *ptr = 25; // same result as above\n    y = *ptr;\n    // dereferencing operator `*` returns the value stored in the address\n    cout << "y : " << y << endl;\n\n    // pointer to a pointer\n    // pointer is simply a variable that stores the address of a variable\n    // it is possible also to store the address of a pointer\n    // In numerical applications, pointer to pointers often used when we have\n    // multidimensional arrays (the chain of pointers i.e., pointer to pointer\n    // to pointer ... can go up to the dimension of arrays)\n    int xx;\n    int *pt_xx;\n    int **pt_pt_xx;\n\n    pt_xx = &xx;\n    pt_pt_xx = &pt_xx;\n\n    xx = 12;\n    cout << "Pointer to a pointer: xx = " << **pt_pt_xx << endl;\n\n    int arr[] = {10, 12, 15};\n    int *ptr_arr = arr;\n    // notice that we do not need `&` operator for the address of an array\n    // the above assignment is same as:\n    // int *ptr_arr &arr[0];\n\n    // from Expert C Programming: there is one difference between an array name\n    // and a pointer that must be kept in mind. A pointer is a variable, so \n    // pa=a and pa++ are legal. But an array name is not a variable; \n    // constructions like a=pa and a++ are illegal.\n\n    for (int i = 0; i < 3; i++)\n    {\n        cout << "arr[" << i << "] = " << *(ptr_arr + i) << endl;\n    }\n\n    // we can refer to the address of pointer as well\n    cout << "Address of ptr: " << &ptr << endl;\n\n    return 0;\n}\n',u={title:"Pointer basics"},p=void 0,d={id:"arrays-pointers/pointer-basics",title:"Pointer basics",description:"",source:"@site/docs/arrays-pointers/pointer-basics.mdx",sourceDirName:"arrays-pointers",slug:"/arrays-pointers/pointer-basics",permalink:"/c-cpp/arrays-pointers/pointer-basics",draft:!1,unlisted:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/arrays-pointers/pointer-basics.mdx",tags:[],version:"current",frontMatter:{title:"Pointer basics"},sidebar:"docs",previous:{title:"Array basics",permalink:"/c-cpp/arrays-pointers/array-basics"},next:{title:"Pointer to function",permalink:"/c-cpp/arrays-pointers/pointer-to-function"}},b={},f=[];function h(e){return(0,r.jsxs)(o.Z,{groupId:"language",children:[(0,r.jsx)(i.Z,{value:"C",children:(0,r.jsx)(s.Z,{language:"c",title:"src/c/arrays-pointers/02-pointer.c",showLineNumbers:!0,children:l})}),(0,r.jsx)(i.Z,{value:"C++",children:(0,r.jsx)(s.Z,{language:"cpp",title:"src/cpp/arrays-pointers/02-pointer.cpp",showLineNumbers:!0,children:c})})]})}function m(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h()}},5162:(e,n,t)=>{t.d(n,{Z:()=>i});t(7294);var r=t(6905);const a={tabItem:"tabItem_Ymn6"};var o=t(5893);function i(e){let{children:n,hidden:t,className:i}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,r.Z)(a.tabItem,i),hidden:t,children:n})}},4866:(e,n,t)=>{t.d(n,{Z:()=>_});var r=t(7294),a=t(6905),o=t(2466),i=t(6550),s=t(469),l=t(1980),c=t(7392),u=t(12);function p(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return p(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:a}}=e;return{value:n,label:t,attributes:r,default:a}}))}(t);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function b(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:t}=e;const a=(0,i.k6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l._X)(o),(0,r.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(a.location.search);n.set(o,e),a.replace({...a.location,search:n.toString()})}),[o,a])]}function h(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,o=d(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!b({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:o}))),[c,p]=f({queryString:t,groupId:a}),[h,m]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,o]=(0,u.Nk)(t);return[a,(0,r.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:a}),v=(()=>{const e=c??h;return b({value:e,tabValues:o})?e:null})();(0,s.Z)((()=>{v&&l(v)}),[v]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!b({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),m(e)}),[p,m,o]),tabValues:o}}var m=t(2389);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=t(5893);function g(e){let{className:n,block:t,selectedValue:r,selectValue:i,tabValues:s}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.o5)(),u=e=>{const n=e.currentTarget,t=l.indexOf(n),a=s[t].value;a!==r&&(c(n),i(a))},p=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":t},n),children:s.map((e=>{let{value:n,label:t,attributes:o}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>l.push(e),onKeyDown:p,onClick:u,...o,className:(0,a.Z)("tabs__item",v.tabItem,o?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function x(e){let{lazy:n,children:t,selectedValue:a}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function w(e){const n=h(e);return(0,y.jsxs)("div",{className:(0,a.Z)("tabs-container",v.tabList),children:[(0,y.jsx)(g,{...e,...n}),(0,y.jsx)(x,{...e,...n})]})}function _(e){const n=(0,m.Z)();return(0,y.jsx)(w,{...e,children:p(e.children)},String(n))}}}]);