"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[154],{5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),s=n(6010);const i="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,s.Z)(i,o),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(7462),s=n(7294),i=n(6010),o=n(2389),r=n(7392),l=n(7094),u=n(2466);const c="tabList__CuJ",p="tabItem_LNqP";function d(e){var t;const{lazy:n,block:o,defaultValue:d,values:m,groupId:b,className:h}=e,g=s.Children.map(e.children,(e=>{if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=m??g.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),v=(0,r.l)(f,((e,t)=>e.value===t.value));if(v.length>0)throw new Error(`Docusaurus error: Duplicate values "${v.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const w=null===d?d:d??(null==(t=g.find((e=>e.props.default)))?void 0:t.props.value)??g[0].props.value;if(null!==w&&!f.some((e=>e.value===w)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${w}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:y}=(0,l.U)(),[T,N]=(0,s.useState)(w),E=[],{blockElementScrollPositionUntilNextRender:x}=(0,u.o5)();if(null!=b){const e=k[b];null!=e&&e!==T&&f.some((t=>t.value===e))&&N(e)}const Z=e=>{const t=e.currentTarget,n=E.indexOf(t),a=f[n].value;a!==T&&(x(t),N(a),null!=b&&y(b,String(a)))},I=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=E.indexOf(e.currentTarget)+1;n=E[t]??E[0];break}case"ArrowLeft":{const t=E.indexOf(e.currentTarget)-1;n=E[t]??E[E.length-1];break}}null==(t=n)||t.focus()};return s.createElement("div",{className:(0,i.Z)("tabs-container",c)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":o},h)},f.map((e=>{let{value:t,label:n,attributes:o}=e;return s.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>E.push(e),onKeyDown:I,onFocus:Z,onClick:Z},o,{className:(0,i.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":T===t})}),n??t)}))),n?(0,s.cloneElement)(g.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function m(e){const t=(0,o.Z)();return s.createElement(d,(0,a.Z)({key:String(t)},e))}},8600:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>u,default:()=>b,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var a=n(7462),s=(n(7294),n(3905)),i=n(5488),o=n(5162),r=n(814);const l={title:"Add two integers"},u=void 0,c={unversionedId:"basics/add-two-integers",id:"basics/add-two-integers",title:"Add two integers",description:"In the following program, we will ask the user to enter two integer inputs. The",source:"@site/docs/basics/add-two-integers.mdx",sourceDirName:"basics",slug:"/basics/add-two-integers",permalink:"/c-cpp/basics/add-two-integers",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/basics/add-two-integers.mdx",tags:[],version:"current",frontMatter:{title:"Add two integers"},sidebar:"docs",previous:{title:"Hello world",permalink:"/c-cpp/basics/hello-world"},next:{title:"Basic data types",permalink:"/c-cpp/basics/data-types"}},p={},d=[],m={toc:d};function b(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"In the following program, we will ask the user to enter two integer inputs. The\nprograms will calculate and print the sum of two numbers."),(0,s.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"C",mdxType:"TabItem"},(0,s.kt)(r.Z,{language:"c",title:"src/c/basics/01-add-two-integers.c",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <stdio.h>\n\nint main()\n{\n    int input1, input2, sum;\n\n    printf("Enter input 1: ");\n    scanf("%d", &input1);\n\n    printf("Enter input 2: ");\n    scanf("%d", &input2);\n\n    sum = input1 + input2;\n\n    printf("%d + %d = %d\\n", input1, input2, sum);\n\n    return 0;\n}\n')),(0,s.kt)(o.Z,{value:"C++",mdxType:"TabItem"},(0,s.kt)(r.Z,{language:"cpp",title:"src/cpp/basics/01-add-two-integers.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <iostream>\nusing namespace std;\n// above declaration exposes all the methods described in the std namespace\n// so that we can use cout instead of std::cout. Beware that in large\n// applications there could be naming conflict among various imported headers.\n// We can either use the convention std::cout or declare only the methods we\n// need:\n// using std::cout;\n\nint main()\n{\n    int input1, input2, sum;\n\n    cout << "Enter input 1: ";\n    cin >> input1;\n\n    cout << "Enter input 2: ";\n    cin >> input2;\n\n    sum = input1 + input2;\n\n    cout << input1 << " + " << input2 << " = " << sum << endl;\n\n    return 0;\n}\n'))),(0,s.kt)("admonition",{type:"danger"},(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"int a = 123456789;\nlong long b = a * a; // this is wrong, a * a will result in int type\nlong long c = (long long) a * a; // or change the type of a to long long\n"))),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("p",{parentName:"admonition"},"It is risky to compare floating point numbers with ",(0,s.kt)("inlineCode",{parentName:"p"},"==")," due to precision errors.\nBetter approach is to check the difference is less than a small number:"),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"if (abs(a - b) < 1e-9)\n{\n    // a and b are equal\n}\n"))))}b.isMDXComponent=!0}}]);