"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[2199],{9660:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"setup","title":"Setting up C/C++ compiler","description":"I will be using GNU C Compiler (GCC) to compile codes in a Linux computer. You","source":"@site/docs/setup.mdx","sourceDirName":".","slug":"/","permalink":"/c-cpp/","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/c-cpp/blob/main/docs/setup.mdx","tags":[],"version":"current","frontMatter":{"title":"Setting up C/C++ compiler","sidebar_label":"Setup","slug":"/","keywords":["C programming","C++ programming","scientific programming","numerical programming","numerical integration"]},"sidebar":"docs","next":{"title":"Basics","permalink":"/c-cpp/category/basics"}}');var s=l(4848),c=l(8453),r=l(1432);const d='CC=g++\nCFLAGS=-O3 -Wall\n\n# By default the left-hand-side of the first dependency is what you\n# get if you just type `make` with no arguments, in this case `make all`\nall: hello\n\n# commands must be indented with TAB not spaces\n# If you need to repair a Makefile that uses spaces, one way of converting\n# leading spaces into TABs is to use the unexpand program:\n# mv Makefile Makefile.old\n# unexpand Makefile.old > Makefile\n# $@ = target\n# $^ = dependencies\n# ${CC} -o hello hello.o\nhello: hello.o\n\t$(CC) $(CFLAGS) -o $@ $^\n\n# ${CC} -c 00-hello-world.cpp -o hello.o\n# $(CC) $(CFLAGS) -o $@ -c $^\nhello.o: 00-hello-world.cpp\n\t$(CC) $(CFLAGS) -o $@ -c $^\n\n# The $(RM) variable is predefined to "rm -f"\nclean:\n\t$(RM) hello *.o\n',a={title:"Setting up C/C++ compiler",sidebar_label:"Setup",slug:"/",keywords:["C programming","C++ programming","scientific programming","numerical programming","numerical integration"]},t=void 0,o={},h=[{value:"Makefile",id:"makefile",level:3},{value:"Debugging",id:"debugging",level:3},{value:"Cppcheck",id:"cppcheck",level:3},{value:"Valgrind",id:"valgrind",level:3}];function p(e){const n={code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"I will be using GNU C Compiler (GCC) to compile codes in a Linux computer. You\ncan install GCC in Ubuntu/Debian by:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"apt install gcc\n"})}),"\n",(0,s.jsx)(n.p,{children:"Command to compile:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"gcc filename.c\n\n# linking math lib\ngcc filename.c -lm\n\n# show all compiler warnings\ngcc -Wall filename.c\n\ng++ filename.cpp\n\n# compile with specific standard (might require for latest language features)\ng++ -std=c++17 filename.cpp\ng++ -std=c++2a filename.cpp\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This would produce executable with default name ",(0,s.jsx)(n.code,{children:"a.out"}),". You can specify the\nexecutable name by using the ",(0,s.jsx)(n.code,{children:"-o"})," flag:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"gcc filename.c -o program_name\n"})}),"\n",(0,s.jsxs)(n.p,{children:["For complex programs, you can use ",(0,s.jsx)(n.code,{children:"-g"})," flag to generate debugging information.\n",(0,s.jsx)(n.code,{children:"-O"})," flag can be used to optimize the executable file (",(0,s.jsx)(n.code,{children:"-O2"}),", ",(0,s.jsx)(n.code,{children:"-O3"})," denotes\nvarious levels of optimization)."]}),"\n",(0,s.jsxs)(n.p,{children:["Compiler (GCC/Clang) flags for warnings: ",(0,s.jsx)(n.code,{children:"-Wall"}),", ",(0,s.jsx)(n.code,{children:"-Wextra"}),", ",(0,s.jsx)(n.code,{children:"-Wpedantic"}),",\n",(0,s.jsx)(n.code,{children:"-Wunused"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"makefile",children:"Makefile"}),"\n",(0,s.jsx)(n.p,{children:"For large/complex projects with multiple source/header files and might require\nlinking various various libraries, unix makefile is very helpful to write the\ncompilation rules and build the program. Here is a very simple example:"}),"\n","\n",(0,s.jsx)(r.A,{language:"makefile",title:"src/cpp/basics/Makefile",showLineNumbers:!0,children:d}),"\n",(0,s.jsxs)(n.p,{children:["A makefile is consists of a set of rules. A rule consists of a target, a list of\nprerequisites, and a command. In the above example, we have several rules:\n",(0,s.jsx)(n.code,{children:"all"}),", ",(0,s.jsx)(n.code,{children:"hello"}),", ",(0,s.jsx)(n.code,{children:"hello.o"}),", and ",(0,s.jsx)(n.code,{children:"clean"}),". In case of ",(0,s.jsx)(n.code,{children:"all"}),", we have prerequisite\n",(0,s.jsx)(n.code,{children:"hello"}),", while there is no command. In case of ",(0,s.jsx)(n.code,{children:"hello"}),", prerequisite is ",(0,s.jsx)(n.code,{children:"hello.o"}),"\nand rule is: ",(0,s.jsx)(n.code,{children:"${CC} -o hello hello.o"})," and so on. If we run ",(0,s.jsx)(n.code,{children:"make"})," without any\nargument, the first rule will run, which is in this case ",(0,s.jsx)(n.code,{children:"all"}),". We can run\nanother rule, we can run it by providing its name, e.g., ",(0,s.jsx)(n.code,{children:"make clean"}),". Later we\nwill see use of more complex makefile."]}),"\n",(0,s.jsx)(n.h3,{id:"debugging",children:"Debugging"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo apt update && sudo apt install gdb\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We can use ",(0,s.jsx)(n.code,{children:"gdb"})," to debug our program. We can embeed debugging information to\nour code by using ",(0,s.jsx)(n.code,{children:"-g"})," or ",(0,s.jsx)(n.code,{children:"-g3"})," flag. It might be helpful also to disable\noptimizations with ",(0,s.jsx)(n.code,{children:"-O0"})," while debugging. We compile the program:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"gcc -g -O0 -Wall filename.c -o filename.o\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Using ",(0,s.jsx)(n.code,{children:"gdb"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"gdb filename.o\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Useful gdb commands:"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Commands"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:["break/b ",(0,s.jsx)(n.code,{children:"line-number"})]}),(0,s.jsx)(n.td,{children:"create breakpoint at specific line"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:["break ",(0,s.jsx)(n.code,{children:"filename:line-number"})]}),(0,s.jsx)(n.td,{children:"create breakpoint at specific line and file"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"run/r"}),(0,s.jsx)(n.td,{children:"run program"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"c"}),(0,s.jsx)(n.td,{children:"continue execution"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"next"}),(0,s.jsx)(n.td,{children:"execute next line"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"step/s"}),(0,s.jsx)(n.td,{children:"execute next line or step into function"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"quit/q"}),(0,s.jsx)(n.td,{children:"quit gdb"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"print expression"}),(0,s.jsx)(n.td,{children:"print current value of a specified expression"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"help [command]"}),(0,s.jsx)(n.td,{children:"in-program help"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"bt"}),(0,s.jsx)(n.td,{children:"print the stack trace"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:["clear ",(0,s.jsx)(n.code,{children:"line-number"})]}),(0,s.jsx)(n.td,{children:"clear break point"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:["clear ",(0,s.jsx)(n.code,{children:"filename:line-number"})]}),(0,s.jsx)(n.td,{children:"clear break point in a specific file and line"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"info/i break/b"}),(0,s.jsx)(n.td,{children:"list all break points"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:["del ",(0,s.jsx)(n.code,{children:"breakpoint Num"})]}),(0,s.jsx)(n.td,{children:"delete a break point"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:["del ",(0,s.jsx)(n.code,{children:"start-br-pt"}),"-",(0,s.jsx)(n.code,{children:"end-br-pt"})]}),(0,s.jsxs)(n.td,{children:["delete break points from ",(0,s.jsx)(n.code,{children:"start-breakpoint-Num"})," to ",(0,s.jsx)(n.code,{children:"end-breakpoint-Num"})]})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"cppcheck",children:"Cppcheck"}),"\n",(0,s.jsxs)(n.p,{children:["Sometimes I will be using ",(0,s.jsx)(n.code,{children:"cppcheck"})," to debug codes as well."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"apt install cppcheck\ncppcheck --enable=all filename.cpp\n"})}),"\n",(0,s.jsx)(n.h3,{id:"valgrind",children:"Valgrind"}),"\n",(0,s.jsx)(n.p,{children:"Install valgrind in Ubuntu/Debian:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"apt install valgrind\n"})}),"\n",(0,s.jsx)(n.p,{children:"Valgrind is a memory profiling tool (includes memcheck, cachegrind, callgrind,\netc). First compile your program with debug flag:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"gcc -g filename.c\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"valgrind ./a.out\nvalgrind --tool=memcheck --leak-check=yes --show-reachable=yes --num-callers=20 --track-fds=yes ./a.out\n"})}),"\n",(0,s.jsx)(n.p,{children:"Valgrind can also detect:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"invalid pointer use"}),"\n",(0,s.jsx)(n.li,{children:"use of uninitialized variables"}),"\n",(0,s.jsx)(n.li,{children:"double frees"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Valgrind does not check bounds on statically allocated arrays."})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);