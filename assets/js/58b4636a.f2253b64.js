"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([["7919"],{2121:function(n,t,e){e.r(t),e.d(t,{metadata:()=>i,contentTitle:()=>u,default:()=>o,assets:()=>c,toc:()=>p,frontMatter:()=>l});var i=JSON.parse('{"id":"misc/multiple-return","title":"Multiple return values from function","description":"","source":"@site/docs/misc/multiple-return.mdx","sourceDirName":"misc","slug":"/misc/multiple-return","permalink":"/c-cpp/misc/multiple-return","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/c-cpp/blob/main/docs/misc/multiple-return.mdx","tags":[],"version":"current","frontMatter":{"title":"Multiple return values from function","sidebar_label":"Multiple return"},"sidebar":"docs","previous":{"title":"Bit shifting","permalink":"/c-cpp/misc/bit-shifting"},"next":{"title":"Dynamic Programming","permalink":"/c-cpp/misc/dynamic-programming"}}'),r=e("5893"),s=e("65"),a=e("5056");let l={title:"Multiple return values from function",sidebar_label:"Multiple return"},u=void 0,c={},p=[];function b(n){return(0,r.jsx)(a.Z,{language:"cpp",title:"src/cpp/misc/03-multiple-return.cpp",showLineNumbers:!0,children:'// features of c++17 used, compile with C++17 or higher:\n// g++ -std=c++17 filename.cpp\n// g++ -std=c++2a filename.cpp\n#include <iostream>\n#include <tuple>\nusing namespace std;\n\ntuple<int, int> sq_tuple(int a, int b)\n{\n    return make_tuple(a * a, b * b);\n}\n\n// using structured binding feature introduced in c++17 standard\ntuple<int, int> sq_tuple_alt(int a, int b)\n{\n    return {a * a, b * b};\n}\n\nstruct sq_type\n{\n    int res1;\n    int res2;\n};\n\nsq_type sq_struct(int a, int b)\n{\n    return {a *a, b *b};\n}\n\nvoid sq_call_by_ref(int &a, int &b)\n{\n    a = a * a;\n    b = b * b;\n}\n\nint main()\n{\n    int a = 2;\n    int b = 5;\n    int sq_a, sq_b;\n\n    tie(sq_a, sq_b) = sq_tuple(a, b);\n    cout << "tuple: " << sq_a << ", " << sq_b << endl;\n\n    // only c++17 or above: g++ return-multiple-values.cpp -std=c++17\n    auto [sq_alt_a, sq_alt_b] = sq_tuple_alt(a, b);\n    cout << "structured binding: " << sq_alt_a << ", " << sq_alt_b << endl;\n\n    auto ret_val = sq_struct(a, b);\n    cout << "struct: " << ret_val.res1 << ", " << ret_val.res2 << endl;\n\n    sq_a = a;\n    sq_b = b;\n    sq_call_by_ref(sq_a, sq_b);\n    cout << "call by ref: " << sq_a << ", " << sq_b << endl;\n\n    return 0;\n}\n'})}function o(n={}){let{wrapper:t}={...(0,s.a)(),...n.components};return t?(0,r.jsx)(t,{...n,children:(0,r.jsx)(b,{...n})}):b(n)}}}]);