"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[643],{5162:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(7294),r=n(6010);const u="tabItem_Ymn6";function s(e){let{children:t,hidden:n,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(u,s),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(7462),r=n(7294),u=n(6010),s=n(2389),l=n(7392),o=n(7094),c=n(2466);const i="tabList__CuJ",d="tabItem_LNqP";function p(e){var t;const{lazy:n,block:s,defaultValue:p,values:m,groupId:b,className:h}=e,v=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=m??v.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),f=(0,l.l)(g,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===p?p:p??(null==(t=v.find((e=>e.props.default)))?void 0:t.props.value)??v[0].props.value;if(null!==k&&!g.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:w}=(0,o.U)(),[T,E]=(0,r.useState)(k),N=[],{blockElementScrollPositionUntilNextRender:Z}=(0,c.o5)();if(null!=b){const e=y[b];null!=e&&e!==T&&g.some((t=>t.value===e))&&E(e)}const x=e=>{const t=e.currentTarget,n=N.indexOf(t),a=g[n].value;a!==T&&(Z(t),E(a),null!=b&&w(b,String(a)))},_=e=>{var t;let n=null;switch(e.key){case"Enter":x(e);break;case"ArrowRight":{const t=N.indexOf(e.currentTarget)+1;n=N[t]??N[0];break}case"ArrowLeft":{const t=N.indexOf(e.currentTarget)-1;n=N[t]??N[N.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,u.Z)("tabs-container",i)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":s},h)},g.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>N.push(e),onKeyDown:_,onClick:x},s,{className:(0,u.Z)("tabs__item",d,null==s?void 0:s.className,{"tabs__item--active":T===t})}),n??t)}))),n?(0,r.cloneElement)(v.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},v.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function m(e){const t=(0,s.Z)();return r.createElement(p,(0,a.Z)({key:String(t)},e))}},5438:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>b,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(7462),r=(n(7294),n(3905)),u=n(5488),s=n(5162),l=n(814);const o={title:"Struct"},c=void 0,i={unversionedId:"data-structure/struct",id:"data-structure/struct",title:"Struct",description:"",source:"@site/docs/data-structure/struct.mdx",sourceDirName:"data-structure",slug:"/data-structure/struct",permalink:"/c-cpp/data-structure/struct",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/data-structure/struct.mdx",tags:[],version:"current",frontMatter:{title:"Struct"},sidebar:"docs",previous:{title:"Data structure",permalink:"/c-cpp/category/data-structure"},next:{title:"enum",permalink:"/c-cpp/data-structure/enum"}},d={},p=[],m={toc:p};function b(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(u.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"C",mdxType:"TabItem"},(0,r.kt)(l.Z,{language:"c",title:"src/c/data-structure/01-struct.c",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <stdio.h>\n\nstruct location\n{\n    double lat;\n    double lon;\n};\n\nint main()\n{\n    struct loc\n    {\n        double lat;\n        double lon;\n    } p1 = {1.1123, 86.9876}; // define and assignment together\n\n    struct location p2 = {1.1123, 86.9876};\n\n    printf("latitude of p1: %g\\n", p1.lat);\n\n    // alternative way to access members of a struct\n    struct loc *ptr = &p1;\n    printf("longitude of p1: %g\\n", ptr->lon);\n\n    // another way: do not need struct keyword while declaring variable\n    typedef struct\n    {\n        float age;\n        char gender;\n    } user;\n\n    user user1 = {34.0, \'m\'};\n\n    printf("user1 age: %g\\n", user1.age);\n\n    return 0;\n}\n')),(0,r.kt)(s.Z,{value:"C++",mdxType:"TabItem"},(0,r.kt)(l.Z,{language:"cpp",title:"src/cpp/data-structure/01-struct.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <iostream>\nusing namespace std;\n\nstruct user\n{\n    string name;\n    int age;\n    float height;\n};\n\nint main()\n{\n    user new_user = {"Pranab", 35, 185};\n\n    cout << "Name : " << new_user.name << endl;\n    cout << "Age : " << new_user.age << endl;\n    cout << "Height : " << new_user.height << endl;\n\n    return 0;\n}\n'))))}b.isMDXComponent=!0}}]);