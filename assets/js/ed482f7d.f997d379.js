"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([["8020"],{9529:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>d,default:()=>_,toc:()=>c,metadata:()=>i,assets:()=>m,contentTitle:()=>u});var i=JSON.parse('{"id":"data-structure/linked-list","title":"Linked list","description":"","source":"@site/docs/data-structure/linked-list.mdx","sourceDirName":"data-structure","slug":"/data-structure/linked-list","permalink":"/c-cpp/data-structure/linked-list","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/c-cpp/blob/main/docs/data-structure/linked-list.mdx","tags":[],"version":"current","frontMatter":{"title":"Linked list"},"sidebar":"docs","previous":{"title":"Complex number","permalink":"/c-cpp/data-structure/complex-number"},"next":{"title":"Binary trees","permalink":"/c-cpp/data-structure/binary-trees"}}'),r=t(5893),s=t(65),a=t(7902),l=t(5525),o=t(2834);let d={title:"Linked list"},u=void 0,m={},c=[];function h(e){return(0,r.jsxs)(a.Z,{groupId:"language",children:[(0,r.jsx)(l.Z,{value:"C",children:(0,r.jsx)(o.Z,{language:"c",title:"src/c/data-structure/linked-list.c",showLineNumbers:!0,children:'#include <stdio.h>  // printf\n#include <stdlib.h> // malloc\n#include <string.h> // strcpy, strcmp\n#include <assert.h> // assert\n\ntypedef struct todo_list\n{\n    char item_name[100];\n    int number_of_item;\n    int is_important; // no boolean type in C, use 0/1 for false/true\n    struct todo_list *next;\n} todo_list;\n\ntodo_list *create_new_item(char item_name[], int number_of_item, int is_important)\n{\n    todo_list *list;\n    list = malloc(sizeof(todo_list));\n    assert(list);\n    strcpy(list->item_name, item_name);\n    list->number_of_item = number_of_item;\n    list->is_important = is_important;\n    list->next = NULL;\n    return list;\n}\n\nvoid print_item(todo_list *list)\n{\n    if (list == NULL)\n    {\n        return;\n    }\n    else\n    {\n        printf("Item name: %s\\n", list->item_name);\n        printf("Number of items: %d\\n", list->number_of_item);\n\n        if (list->is_important == 0)\n        {\n            printf("Is important: false\\n");\n        }\n        else\n        {\n            printf("Is important: true\\n");\n        }\n    }\n}\n\nvoid print_list(todo_list *list)\n{\n    if (list == NULL)\n    {\n        return;\n    }\n    else\n    {\n        print_item(list);\n\n        if (list->next == NULL)\n        {\n            return;\n        }\n        else\n        {\n            printf("\\n");\n            print_list(list->next);\n        }\n    }\n}\n\nvoid insert_head(todo_list **list, todo_list *todo_item)\n{\n    todo_item->next = *list;\n    *list = todo_item;\n}\n\ntodo_list *search_list(todo_list *list, char item_name[])\n// returns pointer to the todo item\n{\n    if (list == NULL)\n    {\n        return NULL;\n    }\n\n    if (strcmp(list->item_name, item_name) == 0)\n    {\n        return list;\n    }\n    else\n    {\n        return search_list(list->next, item_name);\n        // if program arrives here it must return\n    }\n}\n\ntodo_list *item_ahead(todo_list *list, char item_name[])\n{\n    if ((list == NULL) || (list->next == NULL))\n    {\n        return (NULL);\n    }\n\n    if (strcmp(list->item_name, item_name) == 0)\n    {\n        return (list->next);\n    }\n    else\n    {\n        return (item_ahead(list->next, item_name));\n    }\n}\n\nvoid delete_head(todo_list **list)\n{\n    if ((*list) != NULL)\n    {\n        todo_list *head;\n        head = (*list)->next;\n        free(*list);\n        *list = head;\n    }\n}\n\nvoid delete_list(todo_list **list)\n{\n    while ((*list) != NULL)\n    {\n        delete_head(list);\n    }\n}\n\nint main()\n{\n    todo_list *my_list = create_new_item("bread", 2, 0);\n    todo_list *milk = create_new_item("milk", 3, 1);\n    insert_head(&my_list, milk);\n\n    print_list(my_list);\n\n    // search\n    char item[] = "bread";\n    todo_list *my_item = search_list(my_list, item);\n\n    if (my_item == NULL)\n    {\n        printf("\\n%s is not included in my list.\\n", item);\n    }\n    else\n    {\n        printf("\\n%s is included in my list.\\n", item);\n    }\n\n    // item ahead\n    todo_list *next_item;\n    next_item = item_ahead(my_list, "milk");\n    printf("next time: %s\\n", next_item->item_name);\n\n    printf("\\n+++ Delete head +++\\n");\n    delete_head(&my_list);\n    print_list(my_list);\n\n    printf("\\n+++ Insert milk again +++\\n");\n    milk = create_new_item("milk", 5, 0);\n    insert_head(&my_list, milk);\n    print_list(my_list);\n\n    printf("\\n+++ Delete all +++\\n");\n    delete_list(&my_list);\n    print_list(my_list);\n\n    return 0;\n}\n'})}),(0,r.jsx)(l.Z,{value:"C++",children:(0,r.jsx)(o.Z,{language:"cpp",title:"src/cpp/data-structure/linked-list.cpp",showLineNumbers:!0,children:'// linked lists are dynamic collection\n// adding new item has O(1) complexity, while searching items in the list has\n// O(N) cost. In comparison, inserting item in a regular array is O(N) while\n// array search is O(1). If we use dynamic array instead of static array, we\n// start with a specific size of the array, once we run out of space, we\n// allocate a new array with double the previous size of array. We copy the\n// first half of the array from previous array, and add the new element. In this\n// we need to double about log(N) time for N item, so half of the item is copied\n// once, quarter of item is moved twice, and so on, we will see that this is\n// still a O(N) complexity to build such array.\n// linked lists are used where the array size is not known compile time, and\n// we do not need random access to the items in it.\n// Use cases: list of navigational nodes (going from one point to another in a\n// map), list of items in a shopping cart\n\n#include <iostream>\n#include <string>\nusing namespace std;\n\n// this is the data structure we are going to store in our list\nstruct LinkedList\n{\n    string item_name;\n    int number_of_item;\n    LinkedList *next;\n};\n\n// inserting new element to the head i.e., the new element becomes head\nvoid add_to_head(LinkedList *&head, string new_item_name, int new_number_of_item)\n{\n    LinkedList *new_ptr;\n    new_ptr = new LinkedList;\n    new_ptr->item_name = new_item_name;\n    new_ptr->number_of_item = new_number_of_item;\n    new_ptr->next = head;\n\n    head = new_ptr;\n}\n\nvoid print_linked_list(LinkedList *head)\n{\n    LinkedList *ref_ptr = head;\n    cout << "List items: \\n";\n\n    while (true)\n    {\n        cout << ref_ptr->item_name << " (" << ref_ptr->number_of_item << " pcs.)"\n             << endl;\n        ref_ptr = ref_ptr->next;\n\n        if (!ref_ptr)\n        {\n            break;\n        }\n    }\n}\n\nint length_linked_list(LinkedList *head)\n{\n    int len = 0;\n    LinkedList *ref_ptr = head;\n\n    while (true)\n    {\n        len += 1;\n        ref_ptr = ref_ptr->next;\n\n        if (!ref_ptr)\n        {\n            break;\n        }\n    }\n\n    return len;\n}\n\nvoid delete_head(LinkedList *&head)\n// in order to delete and modify pointer we need pass by reference\n{\n    if (head)\n    {\n        LinkedList *tmp_ptr;\n        tmp_ptr = head->next;\n        delete head;\n        head = tmp_ptr;\n    }\n}\n\nint main()\n{\n    // let\'s define our head pointer first\n    // head pointer points to the first element of the linked list\n    // head pointer also used to refer to the linked list as a whole\n    LinkedList *head;\n    head = new LinkedList;\n    // assign the first element of the linked list\n    // two ways of accessing struct members via pointer dereferencing\n    head->item_name = "bread"; // (*head).item_name = "bread";\n    head->number_of_item = 3;\n    // if our list has only one item, the next pointer points to NULL\n    // in case the head pointer points to nullptr, the list is empty\n    // head = nullptr; // refers to empty linked list\n    head->next = nullptr;\n\n    cout << "Length of list = " << length_linked_list(head) << endl;\n\n    // let\'s add new item to the head\n    add_to_head(head, "water bottle", 5);\n\n    print_linked_list(head);\n\n    // add another item and print\n    add_to_head(head, "tissue roll", 2);\n    print_linked_list(head);\n    cout << "Length of list = " << length_linked_list(head) << endl;\n\n    delete_head(head);\n    print_linked_list(head);\n\n    return 0;\n}\n'})})]})}function _(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},5525:function(e,n,t){t.d(n,{Z:()=>s});var i=t(5893);t(7294);var r=t(7026);function s({children:e,hidden:n,className:t}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.Z)("tabItem_Ymn6",t),hidden:n,children:e})}},7902:function(e,n,t){t.d(n,{Z:()=>k});var i=t(5893),r=t(7294),s=t(7026),a=t(9599),l=t(6550),o=t(2e3),d=t(4520),u=t(8341),m=t(6009);function c(e){return r.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){let{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h({value:e,tabValues:n}){return n.some(n=>n.value===e)}var _=t(7227);function p({className:e,block:n,selectedValue:t,selectValue:r,tabValues:l}){let o=[],{blockElementScrollPositionUntilNextRender:d}=(0,a.o5)(),u=e=>{let n=e.currentTarget,i=l[o.indexOf(n)].value;i!==t&&(d(n),r(i))},m=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{let t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{let t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1]}}n?.focus()};return(0,i.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},e),children:l.map(({value:e,label:n,attributes:r})=>(0,i.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{o.push(e)},onKeyDown:m,onClick:u,...r,className:(0,s.Z)("tabs__item","tabItem_LNqP",r?.className,{"tabs__item--active":t===e}),children:n??e},e))})}function f({lazy:e,children:n,selectedValue:t}){let a=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){let e=a.find(e=>e.props.value===t);return e?(0,r.cloneElement)(e,{className:(0,s.Z)("margin-top--md",e.props.className)}):null}return(0,i.jsx)("div",{className:"margin-top--md",children:a.map((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==t}))})}function b(e){let n=function(e){let{defaultValue:n,queryString:t=!1,groupId:i}=e,s=function(e){let{values:n,children:t}=e;return(0,r.useMemo)(()=>{let e=n??c(t).map(({props:{value:e,label:n,attributes:t,default:i}})=>({value:e,label:n,attributes:t,default:i})),i=(0,u.lx)(e,(e,n)=>e.value===n.value);if(i.length>0)throw Error(`Docusaurus error: Duplicate values "${i.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`);return e},[n,t])}(e),[a,_]=(0,r.useState)(()=>(function({defaultValue:e,tabValues:n}){if(0===n.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!h({value:e,tabValues:n}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}let t=n.find(e=>e.default)??n[0];if(!t)throw Error("Unexpected error: 0 tabValues");return t.value})({defaultValue:n,tabValues:s})),[p,f]=function({queryString:e=!1,groupId:n}){let t=(0,l.k6)(),i=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,d._X)(i),(0,r.useCallback)(e=>{if(!i)return;let n=new URLSearchParams(t.location.search);n.set(i,e),t.replace({...t.location,search:n.toString()})},[i,t])]}({queryString:t,groupId:i}),[b,k]=function({groupId:e}){let n=e?`docusaurus.tab.${e}`:null,[t,i]=(0,m.Nk)(n);return[t,(0,r.useCallback)(e=>{n&&i.set(e)},[n,i])]}({groupId:i}),w=(()=>{let e=p??b;return h({value:e,tabValues:s})?e:null})();return(0,o.Z)(()=>{w&&_(w)},[w]),{selectedValue:a,selectValue:(0,r.useCallback)(e=>{if(!h({value:e,tabValues:s}))throw Error(`Can't select invalid tab value=${e}`);_(e),f(e),k(e)},[f,k,s]),tabValues:s}}(e);return(0,i.jsxs)("div",{className:(0,s.Z)("tabs-container","tabList__CuJ"),children:[(0,i.jsx)(p,{...n,...e}),(0,i.jsx)(f,{...n,...e})]})}function k(e){let n=(0,_.Z)();return(0,i.jsx)(b,{...e,children:c(e.children)},String(n))}}}]);