"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([["1474"],{2817:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>u,toc:()=>m,default:()=>h,metadata:()=>i,assets:()=>c,contentTitle:()=>d});var i=JSON.parse('{"id":"data-structure/linked-list","title":"Linked list","description":"","source":"@site/docs/data-structure/linked-list.mdx","sourceDirName":"data-structure","slug":"/data-structure/linked-list","permalink":"/c-cpp/data-structure/linked-list","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/c-cpp/blob/main/docs/data-structure/linked-list.mdx","tags":[],"version":"current","frontMatter":{"title":"Linked list"},"sidebar":"docs","previous":{"title":"Complex number","permalink":"/c-cpp/data-structure/complex-number"},"next":{"title":"Binary trees","permalink":"/c-cpp/data-structure/binary-trees"}}'),r=t(4848),a=t(4429),l=t(4109),s=t(3703),o=t(4565);let u={title:"Linked list"},d=void 0,c={},m=[];function p(e){return(0,r.jsxs)(l.A,{groupId:"language",children:[(0,r.jsx)(s.A,{value:"C",children:(0,r.jsx)(o.A,{language:"c",title:"src/c/data-structure/linked-list.c",showLineNumbers:!0,children:'#include <stdio.h>  // printf\n#include <stdlib.h> // malloc\n#include <string.h> // strcpy, strcmp\n#include <assert.h> // assert\n\ntypedef struct todo_list\n{\n    char item_name[100];\n    int number_of_item;\n    int is_important; // no boolean type in C, use 0/1 for false/true\n    struct todo_list *next;\n} todo_list;\n\ntodo_list *create_new_item(char item_name[], int number_of_item, int is_important)\n{\n    todo_list *list;\n    list = malloc(sizeof(todo_list));\n    assert(list);\n    strcpy(list->item_name, item_name);\n    list->number_of_item = number_of_item;\n    list->is_important = is_important;\n    list->next = NULL;\n    return list;\n}\n\nvoid print_item(todo_list *list)\n{\n    if (list == NULL)\n    {\n        return;\n    }\n    else\n    {\n        printf("Item name: %s\\n", list->item_name);\n        printf("Number of items: %d\\n", list->number_of_item);\n\n        if (list->is_important == 0)\n        {\n            printf("Is important: false\\n");\n        }\n        else\n        {\n            printf("Is important: true\\n");\n        }\n    }\n}\n\nvoid print_list(todo_list *list)\n{\n    if (list == NULL)\n    {\n        return;\n    }\n    else\n    {\n        print_item(list);\n\n        if (list->next == NULL)\n        {\n            return;\n        }\n        else\n        {\n            printf("\\n");\n            print_list(list->next);\n        }\n    }\n}\n\nvoid insert_head(todo_list **list, todo_list *todo_item)\n{\n    todo_item->next = *list;\n    *list = todo_item;\n}\n\ntodo_list *search_list(todo_list *list, char item_name[])\n// returns pointer to the todo item\n{\n    if (list == NULL)\n    {\n        return NULL;\n    }\n\n    if (strcmp(list->item_name, item_name) == 0)\n    {\n        return list;\n    }\n    else\n    {\n        return search_list(list->next, item_name);\n        // if program arrives here it must return\n    }\n}\n\ntodo_list *item_ahead(todo_list *list, char item_name[])\n{\n    if ((list == NULL) || (list->next == NULL))\n    {\n        return (NULL);\n    }\n\n    if (strcmp(list->item_name, item_name) == 0)\n    {\n        return (list->next);\n    }\n    else\n    {\n        return (item_ahead(list->next, item_name));\n    }\n}\n\nvoid delete_head(todo_list **list)\n{\n    if ((*list) != NULL)\n    {\n        todo_list *head;\n        head = (*list)->next;\n        free(*list);\n        *list = head;\n    }\n}\n\nvoid delete_list(todo_list **list)\n{\n    while ((*list) != NULL)\n    {\n        delete_head(list);\n    }\n}\n\nint main()\n{\n    todo_list *my_list = create_new_item("bread", 2, 0);\n    todo_list *milk = create_new_item("milk", 3, 1);\n    insert_head(&my_list, milk);\n\n    print_list(my_list);\n\n    // search\n    char item[] = "bread";\n    todo_list *my_item = search_list(my_list, item);\n\n    if (my_item == NULL)\n    {\n        printf("\\n%s is not included in my list.\\n", item);\n    }\n    else\n    {\n        printf("\\n%s is included in my list.\\n", item);\n    }\n\n    // item ahead\n    todo_list *next_item;\n    next_item = item_ahead(my_list, "milk");\n    printf("next time: %s\\n", next_item->item_name);\n\n    printf("\\n+++ Delete head +++\\n");\n    delete_head(&my_list);\n    print_list(my_list);\n\n    printf("\\n+++ Insert milk again +++\\n");\n    milk = create_new_item("milk", 5, 0);\n    insert_head(&my_list, milk);\n    print_list(my_list);\n\n    printf("\\n+++ Delete all +++\\n");\n    delete_list(&my_list);\n    print_list(my_list);\n\n    return 0;\n}\n'})}),(0,r.jsx)(s.A,{value:"C++",children:(0,r.jsx)(o.A,{language:"cpp",title:"src/cpp/data-structure/linked-list.cpp",showLineNumbers:!0,children:'// linked lists are dynamic collection\n// adding new item has O(1) complexity, while searching items in the list has\n// O(N) cost. In comparison, inserting item in a regular array is O(N) while\n// array search is O(1). If we use dynamic array instead of static array, we\n// start with a specific size of the array, once we run out of space, we\n// allocate a new array with double the previous size of array. We copy the\n// first half of the array from previous array, and add the new element. In this\n// we need to double about log(N) time for N item, so half of the item is copied\n// once, quarter of item is moved twice, and so on, we will see that this is\n// still a O(N) complexity to build such array.\n// linked lists are used where the array size is not known compile time, and\n// we do not need random access to the items in it.\n// Use cases: list of navigational nodes (going from one point to another in a\n// map), list of items in a shopping cart\n\n#include <iostream>\n#include <string>\nusing namespace std;\n\n// this is the data structure we are going to store in our list\nstruct LinkedList\n{\n    string item_name;\n    int number_of_item;\n    LinkedList *next;\n};\n\n// inserting new element to the head i.e., the new element becomes head\nvoid add_to_head(LinkedList *&head, string new_item_name, int new_number_of_item)\n{\n    LinkedList *new_ptr;\n    new_ptr = new LinkedList;\n    new_ptr->item_name = new_item_name;\n    new_ptr->number_of_item = new_number_of_item;\n    new_ptr->next = head;\n\n    head = new_ptr;\n}\n\nvoid print_linked_list(LinkedList *head)\n{\n    LinkedList *ref_ptr = head;\n    cout << "List items: \\n";\n\n    while (true)\n    {\n        cout << ref_ptr->item_name << " (" << ref_ptr->number_of_item << " pcs.)"\n             << endl;\n        ref_ptr = ref_ptr->next;\n\n        if (!ref_ptr)\n        {\n            break;\n        }\n    }\n}\n\nint length_linked_list(LinkedList *head)\n{\n    int len = 0;\n    LinkedList *ref_ptr = head;\n\n    while (true)\n    {\n        len += 1;\n        ref_ptr = ref_ptr->next;\n\n        if (!ref_ptr)\n        {\n            break;\n        }\n    }\n\n    return len;\n}\n\nvoid delete_head(LinkedList *&head)\n// in order to delete and modify pointer we need pass by reference\n{\n    if (head)\n    {\n        LinkedList *tmp_ptr;\n        tmp_ptr = head->next;\n        delete head;\n        head = tmp_ptr;\n    }\n}\n\nint main()\n{\n    // let\'s define our head pointer first\n    // head pointer points to the first element of the linked list\n    // head pointer also used to refer to the linked list as a whole\n    LinkedList *head;\n    head = new LinkedList;\n    // assign the first element of the linked list\n    // two ways of accessing struct members via pointer dereferencing\n    head->item_name = "bread"; // (*head).item_name = "bread";\n    head->number_of_item = 3;\n    // if our list has only one item, the next pointer points to NULL\n    // in case the head pointer points to nullptr, the list is empty\n    // head = nullptr; // refers to empty linked list\n    head->next = nullptr;\n\n    cout << "Length of list = " << length_linked_list(head) << endl;\n\n    // let\'s add new item to the head\n    add_to_head(head, "water bottle", 5);\n\n    print_linked_list(head);\n\n    // add another item and print\n    add_to_head(head, "tissue roll", 2);\n    print_linked_list(head);\n    cout << "Length of list = " << length_linked_list(head) << endl;\n\n    delete_head(head);\n    print_linked_list(head);\n\n    return 0;\n}\n'})})]})}function h(e={}){let{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},3703:function(e,n,t){t.d(n,{A:()=>a});var i=t(4848);t(6540);var r=t(9836);function a(e){let{children:n,hidden:t,className:a}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.A)("tabItem_Ymn6",a),hidden:t,children:n})}},4109:function(e,n,t){t.d(n,{A:()=>g});var i=t(4848),r=t(6540),a=t(9836),l=t(8251),s=t(6347),o=t(8004),u=t(5580),d=t(2213),c=t(5734);function m(e){var n,t;return null!=(t=null==(n=r.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){let{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw Error("Docusaurus error: Bad <Tabs> child <".concat("string"==typeof e.type?e.type:e.type.name,'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.'))}))?void 0:n.filter(Boolean))?t:[]}function p(e){let{value:n,tabValues:t}=e;return t.some(e=>e.value===n)}var h=t(8864);function f(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},i=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(t).filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.forEach(function(n){var i;i=t[n],n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i})}return e}function _(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):(function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t.push.apply(t,i)}return t})(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}),e}function b(e){let{className:n,block:t,selectedValue:r,selectValue:s,tabValues:o}=e,u=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.a_)(),c=e=>{let n=e.currentTarget,t=o[u.indexOf(n)].value;t!==r&&(d(n),s(t))},m=e=>{var n,t;let i=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{let t=u.indexOf(e.currentTarget)+1;i=null!=(n=u[t])?n:u[0];break}case"ArrowLeft":{let n=u.indexOf(e.currentTarget)-1;i=null!=(t=u[n])?t:u[u.length-1]}}null==i||i.focus()};return(0,i.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},n),children:o.map(e=>{let{value:n,label:t,attributes:l}=e;return(0,i.jsx)("li",_(f({role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>{u.push(e)},onKeyDown:m,onClick:c},l),{className:(0,a.A)("tabs__item","tabItem_LNqP",null==l?void 0:l.className,{"tabs__item--active":r===n}),children:null!=t?t:n}),n)})})}function y(e){let{lazy:n,children:t,selectedValue:l}=e,s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){let e=s.find(e=>e.props.value===l);return e?(0,r.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,i.jsx)("div",{className:"margin-top--md",children:s.map((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==l}))})}function w(e){let n=function(e){let{defaultValue:n,queryString:t=!1,groupId:i}=e,a=function(e){let{values:n,children:t}=e;return(0,r.useMemo)(()=>{let e=null!=n?n:m(t).map(e=>{let{props:{value:n,label:t,attributes:i,default:r}}=e;return{value:n,label:t,attributes:i,default:r}}),i=(0,d.XI)(e,(e,n)=>e.value===n.value);if(i.length>0)throw Error('Docusaurus error: Duplicate values "'.concat(i.map(e=>e.value).join(", "),'" found in <Tabs>. Every value needs to be unique.'));return e},[n,t])}(e),[l,h]=(0,r.useState)(()=>(function(e){var n;let{defaultValue:t,tabValues:i}=e;if(0===i.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:i}))throw Error('Docusaurus error: The <Tabs> has a defaultValue "'.concat(t,'" but none of its children has the corresponding value. Available values are: ').concat(i.map(e=>e.value).join(", "),". If you intend to show no default tab, use defaultValue={null} instead."));return t}let r=null!=(n=i.find(e=>e.default))?n:i[0];if(!r)throw Error("Unexpected error: 0 tabValues");return r.value})({defaultValue:n,tabValues:a})),[f,_]=function(e){let{queryString:n=!1,groupId:t}=e,i=(0,s.W6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=t?t:null}({queryString:n,groupId:t});return[(0,u.aZ)(a),(0,r.useCallback)(e=>{var n,t;if(!a)return;let r=new URLSearchParams(i.location.search);r.set(a,e),i.replace((n=function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},i=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(t).filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.forEach(function(n){var i;i=t[n],n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i})}return e}({},i.location),t=t={search:r.toString()},Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):(function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t.push.apply(t,i)}return t})(Object(t)).forEach(function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}),n))},[a,i])]}({queryString:t,groupId:i}),[b,y]=function(e){let{groupId:n}=e,t=n?"docusaurus.tab.".concat(n):null,[i,a]=(0,c.Dv)(t);return[i,(0,r.useCallback)(e=>{t&&a.set(e)},[t,a])]}({groupId:i}),w=(()=>{let e=null!=f?f:b;return p({value:e,tabValues:a})?e:null})();return(0,o.A)(()=>{w&&h(w)},[w]),{selectedValue:l,selectValue:(0,r.useCallback)(e=>{if(!p({value:e,tabValues:a}))throw Error("Can't select invalid tab value=".concat(e));h(e),_(e),y(e)},[_,y,a]),tabValues:a}}(e);return(0,i.jsxs)("div",{className:(0,a.A)("tabs-container","tabList__CuJ"),children:[(0,i.jsx)(b,f({},n,e)),(0,i.jsx)(y,f({},n,e))]})}function g(e){let n=(0,h.A)();return(0,i.jsx)(w,_(f({},e),{children:m(e.children)}),String(n))}}}]);