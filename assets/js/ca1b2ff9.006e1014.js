"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[630],{5162:(n,e,r)=>{r.d(e,{Z:()=>s});var a=r(7294),t=r(6010);const i="tabItem_Ymn6";function s(n){let{children:e,hidden:r,className:s}=n;return a.createElement("div",{role:"tabpanel",className:(0,t.Z)(i,s),hidden:r},e)}},5488:(n,e,r)=>{r.d(e,{Z:()=>m});var a=r(7462),t=r(7294),i=r(6010),s=r(2389),o=r(7392),l=r(7094),c=r(2466);const u="tabList__CuJ",d="tabItem_LNqP";function p(n){const{lazy:e,block:r,defaultValue:s,values:p,groupId:m,className:y}=n,b=t.Children.map(n.children,(n=>{if((0,t.isValidElement)(n)&&"value"in n.props)return n;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=p??b.map((n=>{let{props:{value:e,label:r,attributes:a}}=n;return{value:e,label:r,attributes:a}})),h=(0,o.l)(f,((n,e)=>n.value===e.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((n=>n.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===s?s:s??b.find((n=>n.props.default))?.props.value??b[0].props.value;if(null!==v&&!f.some((n=>n.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${f.map((n=>n.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:g,setTabGroupChoices:k}=(0,l.U)(),[_,w]=(0,t.useState)(v),E=[],{blockElementScrollPositionUntilNextRender:T}=(0,c.o5)();if(null!=m){const n=g[m];null!=n&&n!==_&&f.some((e=>e.value===n))&&w(n)}const Z=n=>{const e=n.currentTarget,r=E.indexOf(e),a=f[r].value;a!==_&&(T(e),w(a),null!=m&&k(m,String(a)))},I=n=>{let e=null;switch(n.key){case"Enter":Z(n);break;case"ArrowRight":{const r=E.indexOf(n.currentTarget)+1;e=E[r]??E[0];break}case"ArrowLeft":{const r=E.indexOf(n.currentTarget)-1;e=E[r]??E[E.length-1];break}}e?.focus()};return t.createElement("div",{className:(0,i.Z)("tabs-container",u)},t.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":r},y)},f.map((n=>{let{value:e,label:r,attributes:s}=n;return t.createElement("li",(0,a.Z)({role:"tab",tabIndex:_===e?0:-1,"aria-selected":_===e,key:e,ref:n=>E.push(n),onKeyDown:I,onClick:Z},s,{className:(0,i.Z)("tabs__item",d,s?.className,{"tabs__item--active":_===e})}),r??e)}))),e?(0,t.cloneElement)(b.filter((n=>n.props.value===_))[0],{className:"margin-top--md"}):t.createElement("div",{className:"margin-top--md"},b.map(((n,e)=>(0,t.cloneElement)(n,{key:e,hidden:n.props.value!==_})))))}function m(n){const e=(0,s.Z)();return t.createElement(p,(0,a.Z)({key:String(e)},n))}},5350:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>d,contentTitle:()=>c,default:()=>y,frontMatter:()=>l,metadata:()=>u,toc:()=>p});var a=r(7462),t=(r(7294),r(3905)),i=r(5488),s=r(5162),o=r(6823);const l={title:"Array basics"},c=void 0,u={unversionedId:"arrays-pointers/array-basics",id:"arrays-pointers/array-basics",title:"Array basics",description:"",source:"@site/docs/arrays-pointers/array-basics.mdx",sourceDirName:"arrays-pointers",slug:"/arrays-pointers/array-basics",permalink:"/c-cpp/arrays-pointers/array-basics",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/arrays-pointers/array-basics.mdx",tags:[],version:"current",frontMatter:{title:"Array basics"},sidebar:"docs",previous:{title:"Array and Pointer",permalink:"/c-cpp/category/array-and-pointer"},next:{title:"Pointer basics",permalink:"/c-cpp/arrays-pointers/pointer-basics"}},d={},p=[],m={toc:p};function y(n){let{components:e,...r}=n;return(0,t.kt)("wrapper",(0,a.Z)({},m,r,{components:e,mdxType:"MDXLayout"}),(0,t.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,t.kt)(s.Z,{value:"C",mdxType:"TabItem"},(0,t.kt)(o.Z,{language:"c",title:"src/c/arrays-pointers/01-array-basics.c",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <stdio.h>\n\nint main()\n{\n    const int SIZE = 5;\n\n    // int array1[SIZE] = {0}; // if the array size is not knowns compile time,\n                            // use heap dynamic memory\n    // int array2[SIZE] = {1, 2, 3, 4, 5};\n    // some compiler might complain here, use 5 instead of SIZE\n    // fails in gcc, however works in apple clang\n    int array1[5] = {0};\n    int array2[5] = {1, 2, 3, 4, 5};\n    int array3[] = {1, 2, 3, 4, 5};\n\n    char str1[] = "hello";\n\n    int i;\n    double sum2 = 0, sum3 = 0;\n    double *ptr_sum2 = &sum2;\n\n    for (i = 0; i < SIZE; i++)\n    {\n        sum2 += array2[i];\n        sum3 += array3[i];\n    }\n\n    printf("Sum2 = %f\\n", sum2);\n    printf("Sum3 = %f\\n", sum3);\n\n    printf("Pointer sum2: %p\\n", ptr_sum2);\n    printf("Sum2 = %f\\n", *ptr_sum2);\n\n    printf("array2 position: %p\\n", array2);\n\n    return 0;\n}\n')),(0,t.kt)(s.Z,{value:"C++",mdxType:"TabItem"},(0,t.kt)(o.Z,{language:"cpp",title:"src/cpp/arrays-pointers/01-array-basics.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <iostream>\nusing namespace std;\n\nvoid print_2d_array(float *, int, int);\n\nint main()\n{\n    int arr[] = {2, 4, 8, 15};\n    // arr[4] = {1, 2};\n    // above assignment sets: arr[0] = 1, arr[1] = 2, arr[2] = 0, arr[3] = 0\n    // aggregation initialization:\n    // note that if we do not provide any value via curly braces, the array\n    // remains uninitialized. To make sure array is initialized to zeros:\n    // arr[4] = {}\n\n    for (int i : arr)\n    {\n        cout << i << endl;\n    }\n\n    const int SIZE = 10; // `const` is necessary here\n    double data[SIZE];\n    // if the size of array is not known compile time, use heap dynamic array\n\n    cout << "Size of data = " << sizeof(data) << " bytes\\n";\n    cout << "Length of data array: " << sizeof(data) / sizeof(data[0]) << endl;\n    // the above prints the size of the entire array\n\n    // multi-dimensional array:\n    float arr2d[3][4] = {0.0}; // this initializes all elements to with 0.0\n    cout << "\\narr2d:\\n";\n    print_2d_array(&arr2d[0][0], 3, 4);\n\n    float arr2d2[3][4] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\n    cout << "\\narr2d2:\\n";\n    print_2d_array(&arr2d2[0][0], 3, 4);\n\n    float arr2d3[3][4] = {{1.1, 2.2, 3.3, 4.4},\n                          {5.5, 6.6, 7.7, 8.8},\n                          {9.9, 10., 11., 12.}};\n    cout << "\\narr2d3:\\n";\n    print_2d_array(&arr2d3[0][0], 3, 4);\n\n    float arr2d4[][4] = {{1.1, 2.2, 3.3, 4.4},\n                          {5.5, 6.6, 7.7, 8.8},\n                          {9.9, 10., 11., 12.}};\n    cout << "\\narr2d4:\\n";\n    print_2d_array(&arr2d4[0][0], 3, 4);\n\n    float arr2d5[][4] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\n    cout << "\\narr2d5:\\n";\n    print_2d_array(&arr2d5[0][0], 3, 4);\n\n    float arr2d6[3][4] = {0.3}; // sets first element to 0.3, rest to 0.0\n    cout << "\\narr2d6:\\n";\n    print_2d_array(&arr2d6[0][0], 3, 4);\n\n    return 0;\n}\n\nvoid print_2d_array(float *arr, int m, int n)\n{\n    for (int i = 0; i < m; i++)\n    {\n        for (int j = 0; j < n; j++)\n        {\n            // array elements are continuously stored row by row in C++\n            cout << *(arr + (n * i) + j) << "\\t";\n            //      |   --- pointer to the first element, do the pointer\n            //      |       arithmetic to get the next elements\n            //      dereference the value\n        }\n        cout << endl;\n    }\n}\n'))))}y.isMDXComponent=!0}}]);