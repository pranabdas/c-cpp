"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([["129"],{3794:function(e,n,s){s.r(n),s.d(n,{default:()=>p,frontMatter:()=>t,metadata:()=>r,assets:()=>o,toc:()=>m,contentTitle:()=>l});var r=JSON.parse('{"id":"misc/mpi","title":"Message Passing Interface","description":"Hello world","source":"@site/docs/misc/mpi.mdx","sourceDirName":"misc","slug":"/misc/mpi","permalink":"/c-cpp/misc/mpi","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/c-cpp/blob/main/docs/misc/mpi.mdx","tags":[],"version":"current","frontMatter":{"title":"Message Passing Interface","sidebar_label":"MPI Basics"},"sidebar":"docs","previous":{"title":"Dynamic Programming","permalink":"/c-cpp/misc/dynamic-programming"},"next":{"title":"Coding practice","permalink":"/c-cpp/category/coding-practice"}}'),a=s("5893"),i=s("65"),c=s("5056");let t={title:"Message Passing Interface",sidebar_label:"MPI Basics"},l=void 0,o={},m=[{value:"Hello world",id:"hello-world",level:3},{value:"Send and receive",id:"send-and-receive",level:3}];function d(e){let n={code:"code",h3:"h3",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h3,{id:"hello-world",children:"Hello world"}),"\n","\n",(0,a.jsx)(c.Z,{language:"c",title:"src/c/mpi/mpi_hello_world.c",showLineNumbers:!0,children:'#include <stdio.h>\n#include <mpi.h>\n\nint main(int argc, char **argv)\n{\n  int process_rank, num_procs, namelen;\n  char cluster_name[MPI_MAX_PROCESSOR_NAME];\n\n  MPI_Init(&argc, &argv);\n  MPI_Comm_size(MPI_COMM_WORLD, &num_procs);\n  MPI_Comm_rank(MPI_COMM_WORLD, &process_rank);\n  MPI_Get_processor_name(cluster_name, &namelen);\n\n  printf("Hello from process %d of %d on %s\\n", process_rank, num_procs, cluster_name);\n\n  MPI_Finalize();\n  return 0;\n}\n'}),"\n",(0,a.jsx)(n.p,{children:"Compile and run program:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mpicc mpi_hello_world.c -o mpi_hello_world.out\nmpirun -np 4 ./mpi_hello_world.out\n"})}),"\n",(0,a.jsx)(n.h3,{id:"send-and-receive",children:"Send and receive"}),"\n","\n",(0,a.jsx)(c.Z,{language:"c",title:"src/c/mpi/mpi_send_recv.c",showLineNumbers:!0,children:'#include <stdio.h>\n#include <mpi.h>\n#include <string.h>\n\nint main(int argc, char *argv[])\n{\n  char message[100];\n  int proc_rank, cluster_size, message_len;\n  MPI_Status status;\n\n  MPI_Init(&argc, &argv);\n  MPI_Comm_size(MPI_COMM_WORLD, &cluster_size);\n  MPI_Comm_rank(MPI_COMM_WORLD, &proc_rank);\n\n  strcpy(message, "Hello, today is a beautiful day.");\n  message_len = strlen(message);\n\n  if (proc_rank == 0)\n  {\n    printf("Process: %d\\nI am sending following message to process 1:\\n%s\\n\\n", proc_rank, message);\n    MPI_Send(message, message_len, MPI_CHAR, 1, 99, MPI_COMM_WORLD);\n    // int MPI_Send(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm)\n    // buf: initial address of send buffer (choice)\n    // count: number of elements in send buffer (nonnegative integer)\n    // datatype: datatype of each send buffer element (handle)\n    // dest: rank of destination (integer)\n    // tag: message tag (integer)\n    // comm: communicator (handle)\n  }\n  else if (proc_rank == 1)\n  {\n    strcpy(message, "null");\n\n    MPI_Recv(message, message_len, MPI_CHAR, 0, 99, MPI_COMM_WORLD, &status);\n    printf("Process: %d\\nI have received following message from process 0:\\n%s\\n", proc_rank, message);\n  }\n\n  MPI_Finalize();\n  return 0;\n}\n'})]})}function p(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);