"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[59],{5162:(e,n,t)=>{t.d(n,{Z:()=>l});var i=t(7294),a=t(6010);const r="tabItem_Ymn6";function l(e){let{children:n,hidden:t,className:l}=e;return i.createElement("div",{role:"tabpanel",className:(0,a.Z)(r,l),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>c});var i=t(7462),a=t(7294),r=t(6010),l=t(2389),s=t(7392),o=t(7094),f=t(2466);const u="tabList__CuJ",d="tabItem_LNqP";function p(e){const{lazy:n,block:t,defaultValue:l,values:p,groupId:c,className:m}=e,b=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=p??b.map((e=>{let{props:{value:n,label:t,attributes:i}}=e;return{value:n,label:t,attributes:i}})),v=(0,s.l)(h,((e,n)=>e.value===n.value));if(v.length>0)throw new Error(`Docusaurus error: Duplicate values "${v.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===l?l:l??b.find((e=>e.props.default))?.props.value??b[0].props.value;if(null!==g&&!h.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:x}=(0,o.U)(),[_,w]=(0,a.useState)(g),y=[],{blockElementScrollPositionUntilNextRender:T}=(0,f.o5)();if(null!=c){const e=k[c];null!=e&&e!==_&&h.some((n=>n.value===e))&&w(e)}const I=e=>{const n=e.currentTarget,t=y.indexOf(n),i=h[t].value;i!==_&&(T(n),w(i),null!=c&&x(c,String(i)))},L=e=>{let n=null;switch(e.key){case"Enter":I(e);break;case"ArrowRight":{const t=y.indexOf(e.currentTarget)+1;n=y[t]??y[0];break}case"ArrowLeft":{const t=y.indexOf(e.currentTarget)-1;n=y[t]??y[y.length-1];break}}n?.focus()};return a.createElement("div",{className:(0,r.Z)("tabs-container",u)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},m)},h.map((e=>{let{value:n,label:t,attributes:l}=e;return a.createElement("li",(0,i.Z)({role:"tab",tabIndex:_===n?0:-1,"aria-selected":_===n,key:n,ref:e=>y.push(e),onKeyDown:L,onClick:I},l,{className:(0,r.Z)("tabs__item",d,l?.className,{"tabs__item--active":_===n})}),t??n)}))),n?(0,a.cloneElement)(b.filter((e=>e.props.value===_))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},b.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==_})))))}function c(e){const n=(0,l.Z)();return a.createElement(p,(0,i.Z)({key:String(n)},e))}},7153:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>f,default:()=>m,frontMatter:()=>o,metadata:()=>u,toc:()=>p});var i=t(7462),a=(t(7294),t(3905)),r=t(5488),l=t(5162),s=t(6823);const o={title:"File Input Output",sidebar_label:"File IO basics"},f=void 0,u={unversionedId:"file-io/file-io",id:"file-io/file-io",title:"File Input Output",description:"Write",source:"@site/docs/file-io/file-io.mdx",sourceDirName:"file-io",slug:"/file-io/",permalink:"/c-cpp/file-io/",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/file-io/file-io.mdx",tags:[],version:"current",frontMatter:{title:"File Input Output",sidebar_label:"File IO basics"},sidebar:"docs",previous:{title:"File IO",permalink:"/c-cpp/category/file-io"},next:{title:"Miscellaneous",permalink:"/c-cpp/category/miscellaneous"}},d={},p=[{value:"Write",id:"write",level:2},{value:"Read",id:"read",level:2},{value:"Append",id:"append",level:2},{value:"Save buffer",id:"save-buffer",level:2},{value:"Read buffer",id:"read-buffer",level:2}],c={toc:p};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"write"},"Write"),(0,a.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"C",mdxType:"TabItem"},(0,a.kt)(s.Z,{language:"c",title:"src/c/file-io/01-write-file.c",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n// compile: gcc file.c -lm\n\nint main()\n{\n    int ii;\n    double theta, result1, result2;\n\n    FILE *fp;\n    fp = fopen("results.dat", "w");\n    if (fp == NULL)\n    {\n        printf("File could not be created.\\n");\n        exit(1);\n    }\n\n    for (ii = 0; ii < 100; ii++)\n    {\n\n        theta = 4 * 3.14 * ii / 100;\n\n        if (theta == 0) // To avoid the 0/0 situation\n        {\n            theta = 0.000001;\n        }\n\n        result1 = sin(theta) / theta;\n        result2 = sin(2 * theta) / theta;\n\n        // printf("%f\\t%f\\n", theta, result);\n        fprintf(fp, "%f\\t%f\\t%f\\n", theta, result1, result2);\n    }\n    fclose(fp);\n    return 0;\n}\n')),(0,a.kt)(l.Z,{value:"C++",mdxType:"TabItem"},(0,a.kt)(s.Z,{language:"cpp",title:"src/cpp/file-io/01-write-file.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <iostream>\n#include <fstream>\nusing namespace std;\n\nint main()\n{\n    // ofstream is used to write to file\n    ofstream fp_out{"data.txt"};\n    // ofstream fp_out{"data.txt", ios::out};\n\n    if (!fp_out)\n    {\n        cerr << "File could not be created!\\n";\n        return 1;\n    }\n\n    for (int i = 1; i <= 10; i++)\n    {\n        fp_out << i << " " << i * i << endl;\n    }\n    \n    fp_out.close();\n    return 0;\n}\n'))),(0,a.kt)("h2",{id:"read"},"Read"),(0,a.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"C",mdxType:"TabItem"},(0,a.kt)(s.Z,{language:"c",title:"src/c/file-io/02-read-file.c",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX_SIZE 10\n\nvoid read_file(FILE *fp, int data[], int *size)\n{\n    *size = 0;\n    while (fscanf(fp, "%d", &data[*size]) == 1) \n    // fscanf returns 1 if success, 0 if fails\n    {\n        (*size)++;\n    }\n}\n\nvoid print_data(int data[], int size)\n{\n    int i;\n    for (i = 0; i < size; i++)\n    {\n        printf("%d\\n", data[i]);\n    }\n}\n\ndouble average(int data[], int size)\n{\n    int i;\n    double average = 0.0;\n\n    for (i = 0; i < size; i++)\n    {\n        average += data[i];\n    }\n\n    return (average / size);\n}\n\nint main()\n{\n    int i;\n    int size = MAX_SIZE;\n    FILE *fp;\n    int data[MAX_SIZE] = {0};\n\n    fp = fopen("file.dat", "r");\n    if (fp == NULL)\n    {\n        printf("File could not be opened.\\n");\n        exit(1);\n    }\n\n    read_file(fp, data, &size);\n\n    printf("My %d scores are:\\n", size);\n    print_data(data, size);\n\n    printf("Average score: %.2f\\n", average(data, size));\n    fclose(fp);\n    return 0;\n}\n')),(0,a.kt)(l.Z,{value:"C++",mdxType:"TabItem"},(0,a.kt)(s.Z,{language:"cpp",title:"src/cpp/file-io/02-read-file.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <iostream>\n#include <fstream>\n#include <string>\nusing namespace std;\n\nint main()\n{\n    // ifstream is used to read from file\n    ifstream fp_in{"data.txt"};\n    // ifstream fp_in{"data.txt", ios::in};\n    if (!fp_in)\n    {\n        cerr << "File could not be opened for reading!\\n";\n        return 1;\n    }\n\n    while (fp_in)\n    {\n        string input_string;\n        getline(fp_in, input_string);\n        cout << input_string << endl;\n    }\n\n    fp_in.close();\n    return 0;\n}\n'))),(0,a.kt)("h2",{id:"append"},"Append"),(0,a.kt)(s.Z,{language:"cpp",title:"src/cpp/file-io/03-append-file.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <iostream>\n#include <fstream>\nusing namespace std;\n\nint main()\n{\n    // ofstream is used to write to file\n    ofstream fp_out{"data.txt"};\n\n    if (!fp_out)\n    {\n        cerr << "File could not be created!\\n";\n        return 1;\n    }\n\n    for (int i = 1; i <= 10; i++)\n    {\n        fp_out << i << " " << i * i << endl;\n    }\n    \n    fp_out.close();\n\n    // now we will open the file again to append more content\n    ofstream fp_app{"data.txt", ios::app};\n    // it is also possible to open the same fp_out\n    // fp_out.open("data.txt", ios::app};\n\n    if (!fp_app)\n    {\n        cerr << "File could not be created!\\n";\n        return 1;\n    }\n\n    for (int i = 11; i <= 15; i++)\n    {\n        fp_app << i << " " << i * i << endl;\n    }\n\n    fp_app.close();\n    return 0;\n}\n'),(0,a.kt)("h2",{id:"save-buffer"},"Save buffer"),(0,a.kt)("p",null,"Saving and reading buffer as binary is faster than IO using formatted data."),(0,a.kt)(s.Z,{language:"cpp",title:"src/c/file-io/04-save-buffer.c",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    int *base, x;\n    FILE *fp;\n\n    // allocate memory\n    base = (int *)malloc(sizeof(int) * 10);\n    if (base == NULL)\n    {\n        fprintf(stderr, "Failed to allocate memory.\\n");\n        exit(1);\n    }\n\n    // fill with values\n    for (x = 0; x < 10; x++)\n    {\n        *(base + x) = x * 10;\n    }\n\n    // open file\n    fp = fopen("numbers.bin", "w");\n    if (fp == NULL)\n    {\n        printf("File could not be created.\\n");\n        exit(1);\n    }\n\n    printf("%d\\n", *(base + 1));\n    // save buffer to file\n    int size;\n    size = fwrite(base, sizeof(int), 10, fp); \n    // this returns number of items\n    // the data is written in the binary format as it exit in the buffer\n    printf("%d\\n", size);\n    fclose(fp);\n    return 0;\n}\n'),(0,a.kt)("h2",{id:"read-buffer"},"Read buffer"),(0,a.kt)(s.Z,{language:"cpp",title:"src/c/file-io/05-read-buffer.c",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    int *base, x, r;\n    FILE *fp;\n\n    // allocate buffer\n    base = (int *)malloc(sizeof(int) * 10);\n    if (base == NULL)\n    {\n        fprintf(stderr, "Error while allocating memory.\\n");\n        exit(1);\n    }\n\n    // open file\n    fp = fopen("numbers.bin", "r");\n    if (fp == NULL)\n    {\n        fprintf(stderr, "Error reading file.\\n");\n        exit(1);\n    }\n\n    // fill the buffer\n    r = fread(base, sizeof(int), 10, fp);\n    if (r != 10)\n    {\n        fprintf(stderr, "Could not read 10 numbers.\\n");\n        exit(1);\n    }\n\n    // print values from buffer\n    for (int i = 0; i < 10; i++)\n    {\n        printf("%d\\n", *(base + i));\n    }\n\n    return 0;\n}\n'))}m.isMDXComponent=!0}}]);