"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[325],{1227:(n,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>g,default:()=>l,frontMatter:()=>o,metadata:()=>m,toc:()=>u});var e=a(7462),r=(a(7294),a(3905)),i=a(5488),s=a(5162),c=a(814);const o={title:"Parsing command arguments",sidebar_label:"Argument parsing"},g=void 0,m={unversionedId:"misc/arg-parsing",id:"misc/arg-parsing",title:"Parsing command arguments",description:"",source:"@site/docs/misc/arg-parsing.mdx",sourceDirName:"misc",slug:"/misc/arg-parsing",permalink:"/c-cpp/misc/arg-parsing",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/misc/arg-parsing.mdx",tags:[],version:"current",frontMatter:{title:"Parsing command arguments",sidebar_label:"Argument parsing"},sidebar:"docs",previous:{title:"Miscellaneous",permalink:"/c-cpp/category/miscellaneous"},next:{title:"Bit shifting",permalink:"/c-cpp/misc/bit-shifting"}},p={},u=[],d={toc:u};function l(n){let{components:t,...a}=n;return(0,r.kt)("wrapper",(0,e.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"C",mdxType:"TabItem"},(0,r.kt)(c.Z,{language:"c",title:"src/c/misc/01-argc-argv.c",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <stdio.h>\n// ./a.out first second\n// argv[0] = a.out\n// argv[1] = first\n// argv[2] = second\n\nint main(int argc, char *argv[]) // argument count, argument vector\n{\n    for (int i = 0; i < argc; i++)\n    {\n        printf("argv[%d] = %s\\n", i, argv[i]);\n    }\n    return 0;\n}\n')),(0,r.kt)(s.Z,{value:"C++",mdxType:"TabItem"},(0,r.kt)(c.Z,{language:"cpp",title:"src/cpp/misc/01-argc-argv.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n    cout << "Program: " << argv[0] << endl;\n    cout << "You have provided " << argc - 1 << " arguments\\n";\n\n    if (argc > 1)\n    {\n        cout << "Arguments are:\\n";\n\n        for (int i = 1; i < argc; i++)\n        {\n            cout << "arg[" << i << "] : " << argv[i] << endl;\n        }\n    }\n\n    // Note that the arguments are string\n    // They have to be converted to other data type as necessary\n    // for example we can use `<cstdlib>` `atoi` to convert string to int\n\n    int max = atoi("100");\n    max += 10;\n\n    cout << max << endl;\n    \n    return 0;\n}\n'))))}l.isMDXComponent=!0}}]);