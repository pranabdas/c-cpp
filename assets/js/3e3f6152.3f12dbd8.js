"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[643],{5162:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(7294),a=n(6010);const u={tabItem:"tabItem_Ymn6"};function s(e){let{children:t,hidden:n,className:s}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(u.tabItem,s),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>k});var r=n(7462),a=n(7294),u=n(6010),s=n(2466),l=n(6550),o=n(1980),c=n(7392),i=n(12);function d(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function p(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function b(e){let{queryString:t=!1,groupId:n}=e;const r=(0,l.k6)(),u=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o._X)(u),(0,a.useCallback)((e=>{if(!u)return;const t=new URLSearchParams(r.location.search);t.set(u,e),r.replace({...r.location,search:t.toString()})}),[u,r])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,u=p(e),[s,l]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:u}))),[o,c]=b({queryString:n,groupId:r}),[d,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,u]=(0,i.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&u.set(e)}),[n,u])]}({groupId:r}),h=(()=>{const e=o??d;return m({value:e,tabValues:u})?e:null})();(0,a.useLayoutEffect)((()=>{h&&l(h)}),[h]);return{selectedValue:s,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:u}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),f(e)}),[c,f,u]),tabValues:u}}var h=n(2389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){let{className:t,block:n,selectedValue:l,selectValue:o,tabValues:c}=e;const i=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.o5)(),p=e=>{const t=e.currentTarget,n=i.indexOf(t),r=c[n].value;r!==l&&(d(t),o(r))},m=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=i.indexOf(e.currentTarget)+1;t=i[n]??i[0];break}case"ArrowLeft":{const n=i.indexOf(e.currentTarget)-1;t=i[n]??i[i.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:s}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>i.push(e),onKeyDown:m,onClick:p},s,{className:(0,u.Z)("tabs__item",g.tabItem,s?.className,{"tabs__item--active":l===t})}),n??t)})))}function y(e){let{lazy:t,children:n,selectedValue:r}=e;const u=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=u.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},u.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function w(e){const t=f(e);return a.createElement("div",{className:(0,u.Z)("tabs-container",g.tabList)},a.createElement(v,(0,r.Z)({},e,t)),a.createElement(y,(0,r.Z)({},e,t)))}function k(e){const t=(0,h.Z)();return a.createElement(w,(0,r.Z)({key:String(t)},e))}},5438:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>d,default:()=>g,frontMatter:()=>i,metadata:()=>p,toc:()=>b});var r=n(7462),a=(n(7294),n(3905)),u=n(4866),s=n(5162),l=n(614);const o='#include <stdio.h>\n\nstruct location\n{\n    double lat;\n    double lon;\n};\n\nint main()\n{\n    struct loc\n    {\n        double lat;\n        double lon;\n    } p1 = {1.1123, 86.9876}; // define and assignment together\n\n    struct location p2 = {1.1123, 86.9876};\n\n    printf("latitude of p1: %g\\n", p1.lat);\n\n    // alternative way to access members of a struct\n    struct loc *ptr = &p1;\n    printf("longitude of p1: %g\\n", ptr->lon);\n\n    // another way: do not need struct keyword while declaring variable\n    typedef struct\n    {\n        float age;\n        char gender;\n    } user;\n\n    user user1 = {34.0, \'m\'};\n\n    printf("user1 age: %g\\n", user1.age);\n\n    return 0;\n}\n',c='#include <iostream>\nusing namespace std;\n\nstruct user\n{\n    string name;\n    int age;\n    float height;\n};\n\nint main()\n{\n    user new_user = {"Pranab", 35, 185};\n\n    cout << "Name : " << new_user.name << endl;\n    cout << "Age : " << new_user.age << endl;\n    cout << "Height : " << new_user.height << endl;\n\n    return 0;\n}\n',i={title:"Struct"},d=void 0,p={unversionedId:"data-structure/struct",id:"data-structure/struct",title:"Struct",description:"",source:"@site/docs/data-structure/struct.mdx",sourceDirName:"data-structure",slug:"/data-structure/struct",permalink:"/c-cpp/data-structure/struct",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/data-structure/struct.mdx",tags:[],version:"current",frontMatter:{title:"Struct"},sidebar:"docs",previous:{title:"Introduction",permalink:"/c-cpp/data-structure/ds-intro"},next:{title:"enum",permalink:"/c-cpp/data-structure/enum"}},m={},b=[],f={toc:b},h="wrapper";function g(e){let{components:t,...n}=e;return(0,a.kt)(h,(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(u.Z,{groupId:"language",mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"C",mdxType:"TabItem"},(0,a.kt)(l.Z,{language:"c",title:"src/c/data-structure/01-struct.c",showLineNumbers:!0,mdxType:"CodeBlock"},o)),(0,a.kt)(s.Z,{value:"C++",mdxType:"TabItem"},(0,a.kt)(l.Z,{language:"cpp",title:"src/cpp/data-structure/01-struct.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},c))))}g.isMDXComponent=!0}}]);