"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[1596],{5162:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(7294),r=a(6010);const l="tabItem_Ymn6";function i(e){let{children:t,hidden:a,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,i),hidden:a},t)}},4866:(e,t,a)=>{a.d(t,{Z:()=>w});var n=a(7462),r=a(7294),l=a(6010),i=a(2466),s=a(6550),c=a(1980),o=a(7392),u=a(12);function d(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function p(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??d(a);return function(e){const t=(0,o.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function b(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function v(e){let{queryString:t=!1,groupId:a}=e;const n=(0,s.k6)(),l=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,c._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(n.location.search);t.set(l,e),n.replace({...n.location,search:t.toString()})}),[l,n])]}function m(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,l=p(e),[i,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!b({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:l}))),[c,o]=v({queryString:a,groupId:n}),[d,m]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,l]=(0,u.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&l.set(e)}),[a,l])]}({groupId:n}),f=(()=>{const e=c??d;return b({value:e,tabValues:l})?e:null})();(0,r.useEffect)((()=>{f&&s(f)}),[f]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!b({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);s(e),o(e),m(e)}),[o,m,l]),tabValues:l}}var f=a(2389);const _="tabList__CuJ",g="tabItem_LNqP";function h(e){let{className:t,block:a,selectedValue:s,selectValue:c,tabValues:o}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.o5)(),p=e=>{const t=e.currentTarget,a=u.indexOf(t),n=o[a].value;n!==s&&(d(t),c(n))},b=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const a=u.indexOf(e.currentTarget)+1;t=u[a]??u[0];break}case"ArrowLeft":{const a=u.indexOf(e.currentTarget)-1;t=u[a]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},t)},o.map((e=>{let{value:t,label:a,attributes:i}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>u.push(e),onKeyDown:b,onClick:p},i,{className:(0,l.Z)("tabs__item",g,i?.className,{"tabs__item--active":s===t})}),a??t)})))}function y(e){let{lazy:t,children:a,selectedValue:n}=e;if(t){const e=a.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},a.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function k(e){const t=m(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",_)},r.createElement(h,(0,n.Z)({},e,t)),r.createElement(y,(0,n.Z)({},e,t)))}function w(e){const t=(0,f.Z)();return r.createElement(k,(0,n.Z)({key:String(t)},e))}},8611:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>v,frontMatter:()=>c,metadata:()=>u,toc:()=>p});var n=a(7462),r=(a(7294),a(3905)),l=a(4866),i=a(5162),s=a(814);const c={title:"Static storage"},o=void 0,u={unversionedId:"basics/static-storage",id:"basics/static-storage",title:"Static storage",description:"",source:"@site/docs/basics/static-storage.mdx",sourceDirName:"basics",slug:"/basics/static-storage",permalink:"/c-cpp/basics/static-storage",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/basics/static-storage.mdx",tags:[],version:"current",frontMatter:{title:"Static storage"},sidebar:"docs",previous:{title:"Recursion",permalink:"/c-cpp/basics/recursion"},next:{title:"Array and Pointer",permalink:"/c-cpp/category/array-and-pointer"}},d={},p=[],b={toc:p};function v(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},b,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"C",mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"c",title:"src/c/basics/07-static-storage.c",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <stdio.h>\n\n// variables declared in the file scope are static\nint global_var = 0;\n\nvoid increase_global_var()\n{\n    global_var++;\n    printf("global var called %d times\\n", global_var);\n}\n\nvoid increase_static_var()\n{\n    // static variable are initialized to 0, and initialized once\n    static int static_var = 0;\n    static_var++;\n    printf("static var called %d times\\n", static_var);\n}\n\nvoid increase_local_var()\n{\n    int local_var = 0;\n    local_var++;\n    printf("local var called %d times\\n", local_var);\n}\n\nint main()\n{\n    increase_global_var();\n    increase_global_var();\n\n    increase_static_var();\n    increase_static_var();\n    \n    increase_local_var();\n    increase_local_var();\n    \n    return 0;\n}\n')),(0,r.kt)(i.Z,{value:"C++",mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"cpp",title:"src/cpp/basics/07-static-storage.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <iostream>\nusing namespace std;\n\n// variables declared in the file scope are static by default\n// and initialized to zero.\nint no_of_calls;\n\nvoid increase_count()\n{\n    no_of_calls++;\n    cout << "The function is called " << no_of_calls << " time(s)" << endl;\n}\n\nvoid increase_count_static()\n{\n    static int static_no_of_calls = 0;\n    // by default static objects are initialized to zero\n    // even if we initialize, it will be initialized only once\n    static_no_of_calls++;\n    cout << "The static function is called " << static_no_of_calls\n         << " time(s)" << endl;\n}\n\nvoid increase_count_volatile()\n{\n    int volatile_no_of_calls = 0;\n    volatile_no_of_calls++;\n    cout << "The volatile function is called " << volatile_no_of_calls\n         << " time(s)" << endl;\n}\n\nint main()\n{\n    increase_count();\n    increase_count();\n    cout << endl;\n\n    increase_count_static();\n    increase_count_static();\n    cout << endl;\n\n    increase_count_volatile();\n    increase_count_volatile();\n\n    return 0;\n}\n'))))}v.isMDXComponent=!0}}]);