"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[528],{5162:(e,n,t)=>{t.d(n,{Z:()=>o});var a=t(7294),r=t(6010);const i="tabItem_Ymn6";function o(e){let{children:n,hidden:t,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,o),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>d});var a=t(7462),r=t(7294),i=t(6010),o=t(2389),s=t(7392),l=t(7094),c=t(2466);const u="tabList__CuJ",p="tabItem_LNqP";function m(e){var n;const{lazy:t,block:o,defaultValue:m,values:d,groupId:b,className:f}=e,v=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=d??v.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),g=(0,s.l)(h,((e,n)=>e.value===n.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===m?m:m??(null==(n=v.find((e=>e.props.default)))?void 0:n.props.value)??v[0].props.value;if(null!==k&&!h.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:w}=(0,l.U)(),[T,N]=(0,r.useState)(k),Z=[],{blockElementScrollPositionUntilNextRender:x}=(0,c.o5)();if(null!=b){const e=y[b];null!=e&&e!==T&&h.some((n=>n.value===e))&&N(e)}const E=e=>{const n=e.currentTarget,t=Z.indexOf(n),a=h[t].value;a!==T&&(x(n),N(a),null!=b&&w(b,String(a)))},C=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{const n=Z.indexOf(e.currentTarget)+1;t=Z[n]??Z[0];break}case"ArrowLeft":{const n=Z.indexOf(e.currentTarget)-1;t=Z[n]??Z[Z.length-1];break}}null==(n=t)||n.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":o},f)},h.map((e=>{let{value:n,label:t,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===n?0:-1,"aria-selected":T===n,key:n,ref:e=>Z.push(e),onKeyDown:C,onFocus:E,onClick:E},o,{className:(0,i.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":T===n})}),t??n)}))),t?(0,r.cloneElement)(v.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},v.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==T})))))}function d(e){const n=(0,o.Z)();return r.createElement(m,(0,a.Z)({key:String(n)},e))}},5180:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>b,frontMatter:()=>l,metadata:()=>u,toc:()=>m});var a=t(7462),r=(t(7294),t(3905)),i=t(5488),o=t(5162),s=t(814);const l={title:"Recursion"},c=void 0,u={unversionedId:"basics/recursion",id:"basics/recursion",title:"Recursion",description:"Recursion enables us to solve certain types of problems very elegantly, however",source:"@site/docs/basics/recursion.mdx",sourceDirName:"basics",slug:"/basics/recursion",permalink:"/c-cpp/basics/recursion",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/basics/recursion.mdx",tags:[],version:"current",frontMatter:{title:"Recursion"},sidebar:"docs",previous:{title:"Function",permalink:"/c-cpp/basics/function"},next:{title:"Static storage",permalink:"/c-cpp/basics/static-storage"}},p={},m=[],d={toc:m};function b(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"C",mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"c",title:"src/c/basics/06-recursive-factorial.c",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <stdio.h>\n\n// long allows factorial up to 20\nlong factorial(int num)\n{\n    if (num == 1)\n        return 1;\n    else\n        return (num * factorial(num - 1));\n}\n\nint main()\n{\n    int lim = 10, i;\n    long fact;\n\n    for (i = 1; i < lim; i++)\n    {\n        fact = factorial(i);\n        printf("%d! = %ld\\n", i, fact);\n    }\n    return 0;\n}\n')),(0,r.kt)(o.Z,{value:"C++",mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"cpp",title:"src/cpp/basics/06-recursive-fibonacci.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <iostream>\nusing namespace std;\n\nlong fibonacci(int n)\n{\n    if (n <= 1)\n        return n;\n    else\n        return (fibonacci(n - 1) + fibonacci(n - 2));\n}\n\nint main()\n{\n    int lim = 45, i;\n    long fib;\n\n    for (i = 0; i < lim; i++)\n    {\n        fib = fibonacci(i);\n        cout << "F(" << i << ") = " << fib << endl;\n    }\n    \n    return 0;\n}\n'))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Recursion enables us to solve certain types of problems very elegantly, however\nthere are certain downside to large numbers of recursive function calls; it\nrequires large amount of stack memory, and program might crash with stack\noverflow.")))}b.isMDXComponent=!0}}]);