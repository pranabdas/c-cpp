"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([["6462"],{9238:function(n,e,i){i.r(e),i.d(e,{frontMatter:()=>u,toc:()=>d,default:()=>h,metadata:()=>t,assets:()=>c,contentTitle:()=>f});var t=JSON.parse('{"id":"file-io/file-io","title":"File Input Output","description":"Write","source":"@site/docs/file-io/file-io.mdx","sourceDirName":"file-io","slug":"/file-io/","permalink":"/c-cpp/file-io/","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/c-cpp/blob/main/docs/file-io/file-io.mdx","tags":[],"version":"current","frontMatter":{"title":"File Input Output","sidebar_label":"File IO basics"},"sidebar":"docs","previous":{"title":"File IO","permalink":"/c-cpp/category/file-io"},"next":{"title":"Miscellaneous","permalink":"/c-cpp/category/miscellaneous"}}'),r=i(4848),a=i(4429),l=i(4109),s=i(3703),o=i(4565);let u={title:"File Input Output",sidebar_label:"File IO basics"},f=void 0,c={},d=[{value:"Write",id:"write",level:2},{value:"Read",id:"read",level:2},{value:"Append",id:"append",level:2},{value:"Save buffer",id:"save-buffer",level:2},{value:"Read buffer",id:"read-buffer",level:2}];function p(n){let e={h2:"h2",p:"p",...(0,a.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{id:"write",children:"Write"}),"\n","\n",(0,r.jsxs)(l.A,{groupId:"language",children:[(0,r.jsx)(s.A,{value:"C",children:(0,r.jsx)(o.A,{language:"c",title:"src/c/file-io/01-write-file.c",showLineNumbers:!0,children:'#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n// compile: gcc file.c -lm\n\nint main()\n{\n    int ii;\n    double theta, result1, result2;\n\n    FILE *fp;\n    fp = fopen("results.dat", "w");\n    if (fp == NULL)\n    {\n        printf("File could not be created.\\n");\n        exit(1);\n    }\n\n    for (ii = 0; ii < 100; ii++)\n    {\n\n        theta = 4 * 3.14 * ii / 100;\n\n        if (theta == 0) // To avoid the 0/0 situation\n        {\n            theta = 0.000001;\n        }\n\n        result1 = sin(theta) / theta;\n        result2 = sin(2 * theta) / theta;\n\n        // printf("%f\\t%f\\n", theta, result);\n        fprintf(fp, "%f\\t%f\\t%f\\n", theta, result1, result2);\n    }\n    fclose(fp);\n    return 0;\n}\n'})}),(0,r.jsx)(s.A,{value:"C++",children:(0,r.jsx)(o.A,{language:"cpp",title:"src/cpp/file-io/01-write-file.cpp",showLineNumbers:!0,children:'#include <iostream>\n#include <fstream>\nusing namespace std;\n\nint main()\n{\n    // ofstream is used to write to file\n    ofstream fp_out{"data.txt"};\n    // ofstream fp_out{"data.txt", ios::out};\n\n    if (!fp_out)\n    {\n        cerr << "File could not be created!\\n";\n        return 1;\n    }\n\n    for (int i = 1; i <= 10; i++)\n    {\n        fp_out << i << " " << i * i << endl;\n    }\n    \n    fp_out.close();\n    return 0;\n}\n'})})]}),"\n",(0,r.jsx)(e.h2,{id:"read",children:"Read"}),"\n",(0,r.jsxs)(l.A,{groupId:"language",children:[(0,r.jsx)(s.A,{value:"C",children:(0,r.jsx)(o.A,{language:"c",title:"src/c/file-io/02-read-file.c",showLineNumbers:!0,children:'#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX_SIZE 10\n\nvoid read_file(FILE *fp, int data[], int *size)\n{\n    *size = 0;\n    while (fscanf(fp, "%d", &data[*size]) == 1) \n    // fscanf returns 1 if success, 0 if fails\n    {\n        (*size)++;\n    }\n}\n\nvoid print_data(int data[], int size)\n{\n    int i;\n    for (i = 0; i < size; i++)\n    {\n        printf("%d\\n", data[i]);\n    }\n}\n\ndouble average(int data[], int size)\n{\n    int i;\n    double average = 0.0;\n\n    for (i = 0; i < size; i++)\n    {\n        average += data[i];\n    }\n\n    return (average / size);\n}\n\nint main()\n{\n    int i;\n    int size = MAX_SIZE;\n    FILE *fp;\n    int data[MAX_SIZE] = {0};\n\n    fp = fopen("file.dat", "r");\n    if (fp == NULL)\n    {\n        printf("File could not be opened.\\n");\n        exit(1);\n    }\n\n    read_file(fp, data, &size);\n\n    printf("My %d scores are:\\n", size);\n    print_data(data, size);\n\n    printf("Average score: %.2f\\n", average(data, size));\n    fclose(fp);\n    return 0;\n}\n'})}),(0,r.jsx)(s.A,{value:"C++",children:(0,r.jsx)(o.A,{language:"cpp",title:"src/cpp/file-io/02-read-file.cpp",showLineNumbers:!0,children:'#include <iostream>\n#include <fstream>\n#include <string>\nusing namespace std;\n\nint main()\n{\n    // ifstream is used to read from file\n    ifstream fp_in{"data.txt"};\n    // ifstream fp_in{"data.txt", ios::in};\n    if (!fp_in)\n    {\n        cerr << "File could not be opened for reading!\\n";\n        return 1;\n    }\n\n    while (fp_in)\n    {\n        string input_string;\n        getline(fp_in, input_string);\n        cout << input_string << endl;\n    }\n\n    fp_in.close();\n    return 0;\n}\n'})})]}),"\n",(0,r.jsx)(e.h2,{id:"append",children:"Append"}),"\n","\n",(0,r.jsx)(o.A,{language:"cpp",title:"src/cpp/file-io/03-append-file.cpp",showLineNumbers:!0,children:'#include <iostream>\n#include <fstream>\nusing namespace std;\n\nint main()\n{\n    // ofstream is used to write to file\n    ofstream fp_out{"data.txt"};\n\n    if (!fp_out)\n    {\n        cerr << "File could not be created!\\n";\n        return 1;\n    }\n\n    for (int i = 1; i <= 10; i++)\n    {\n        fp_out << i << " " << i * i << endl;\n    }\n    \n    fp_out.close();\n\n    // now we will open the file again to append more content\n    ofstream fp_app{"data.txt", ios::app};\n    // it is also possible to open the same fp_out\n    // fp_out.open("data.txt", ios::app};\n\n    if (!fp_app)\n    {\n        cerr << "File could not be created!\\n";\n        return 1;\n    }\n\n    for (int i = 11; i <= 15; i++)\n    {\n        fp_app << i << " " << i * i << endl;\n    }\n\n    fp_app.close();\n    return 0;\n}\n'}),"\n",(0,r.jsx)(e.h2,{id:"save-buffer",children:"Save buffer"}),"\n",(0,r.jsx)(e.p,{children:"Saving and reading buffer as binary is faster than IO using formatted data."}),"\n","\n",(0,r.jsx)(o.A,{language:"cpp",title:"src/c/file-io/04-save-buffer.c",showLineNumbers:!0,children:'#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    int *base, x;\n    FILE *fp;\n\n    // allocate memory\n    base = (int *)malloc(sizeof(int) * 10);\n    if (base == NULL)\n    {\n        fprintf(stderr, "Failed to allocate memory.\\n");\n        exit(1);\n    }\n\n    // fill with values\n    for (x = 0; x < 10; x++)\n    {\n        *(base + x) = x * 10;\n    }\n\n    // open file\n    fp = fopen("numbers.bin", "w");\n    if (fp == NULL)\n    {\n        printf("File could not be created.\\n");\n        exit(1);\n    }\n\n    printf("%d\\n", *(base + 1));\n    // save buffer to file\n    int size;\n    size = fwrite(base, sizeof(int), 10, fp); \n    // this returns number of items\n    // the data is written in the binary format as it exit in the buffer\n    printf("%d\\n", size);\n    fclose(fp);\n    return 0;\n}\n'}),"\n",(0,r.jsx)(e.h2,{id:"read-buffer",children:"Read buffer"}),"\n","\n",(0,r.jsx)(o.A,{language:"cpp",title:"src/c/file-io/05-read-buffer.c",showLineNumbers:!0,children:'#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    int *base, x, r;\n    FILE *fp;\n\n    // allocate buffer\n    base = (int *)malloc(sizeof(int) * 10);\n    if (base == NULL)\n    {\n        fprintf(stderr, "Error while allocating memory.\\n");\n        exit(1);\n    }\n\n    // open file\n    fp = fopen("numbers.bin", "r");\n    if (fp == NULL)\n    {\n        fprintf(stderr, "Error reading file.\\n");\n        exit(1);\n    }\n\n    // fill the buffer\n    r = fread(base, sizeof(int), 10, fp);\n    if (r != 10)\n    {\n        fprintf(stderr, "Could not read 10 numbers.\\n");\n        exit(1);\n    }\n\n    // print values from buffer\n    for (int i = 0; i < 10; i++)\n    {\n        printf("%d\\n", *(base + i));\n    }\n\n    return 0;\n}\n'})]})}function h(n={}){let{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(p,{...n})}):p(n)}},3703:function(n,e,i){i.d(e,{A:()=>a});var t=i(4848);i(6540);var r=i(9836);function a({children:n,hidden:e,className:i}){return(0,t.jsx)("div",{role:"tabpanel",className:(0,r.A)("tabItem_Ymn6",i),hidden:e,children:n})}},4109:function(n,e,i){i.d(e,{A:()=>g});var t=i(4848),r=i(6540),a=i(9836),l=i(8251),s=i(6347),o=i(8004),u=i(5580),f=i(2213),c=i(5734);function d(n){return r.Children.toArray(n).filter(n=>"\n"!==n).map(n=>{if(!n||(0,r.isValidElement)(n)&&function(n){let{props:e}=n;return!!e&&"object"==typeof e&&"value"in e}(n))return n;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof n.type?n.type:n.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p({value:n,tabValues:e}){return e.some(e=>e.value===n)}var h=i(8864);function m({className:n,block:e,selectedValue:i,selectValue:r,tabValues:s}){let o=[],{blockElementScrollPositionUntilNextRender:u}=(0,l.a_)(),f=n=>{let e=n.currentTarget,t=s[o.indexOf(e)].value;t!==i&&(u(e),r(t))},c=n=>{let e=null;switch(n.key){case"Enter":f(n);break;case"ArrowRight":{let i=o.indexOf(n.currentTarget)+1;e=o[i]??o[0];break}case"ArrowLeft":{let i=o.indexOf(n.currentTarget)-1;e=o[i]??o[o.length-1]}}e?.focus()};return(0,t.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":e},n),children:s.map(({value:n,label:e,attributes:r})=>(0,t.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:n=>{o.push(n)},onKeyDown:c,onClick:f,...r,className:(0,a.A)("tabs__item","tabItem_LNqP",r?.className,{"tabs__item--active":i===n}),children:e??n},n))})}function b({lazy:n,children:e,selectedValue:i}){let l=(Array.isArray(e)?e:[e]).filter(Boolean);if(n){let n=l.find(n=>n.props.value===i);return n?(0,r.cloneElement)(n,{className:(0,a.A)("margin-top--md",n.props.className)}):null}return(0,t.jsx)("div",{className:"margin-top--md",children:l.map((n,e)=>(0,r.cloneElement)(n,{key:e,hidden:n.props.value!==i}))})}function v(n){let e=function(n){let{defaultValue:e,queryString:i=!1,groupId:t}=n,a=function(n){let{values:e,children:i}=n;return(0,r.useMemo)(()=>{let n=e??d(i).map(({props:{value:n,label:e,attributes:i,default:t}})=>({value:n,label:e,attributes:i,default:t})),t=(0,f.XI)(n,(n,e)=>n.value===e.value);if(t.length>0)throw Error(`Docusaurus error: Duplicate values "${t.map(n=>n.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`);return n},[e,i])}(n),[l,h]=(0,r.useState)(()=>(function({defaultValue:n,tabValues:e}){if(0===e.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:e}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${e.map(n=>n.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}let i=e.find(n=>n.default)??e[0];if(!i)throw Error("Unexpected error: 0 tabValues");return i.value})({defaultValue:e,tabValues:a})),[m,b]=function({queryString:n=!1,groupId:e}){let i=(0,s.W6)(),t=function({queryString:n=!1,groupId:e}){if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!e)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return e??null}({queryString:n,groupId:e});return[(0,u.aZ)(t),(0,r.useCallback)(n=>{if(!t)return;let e=new URLSearchParams(i.location.search);e.set(t,n),i.replace({...i.location,search:e.toString()})},[t,i])]}({queryString:i,groupId:t}),[v,g]=function({groupId:n}){let e=n?`docusaurus.tab.${n}`:null,[i,t]=(0,c.Dv)(e);return[i,(0,r.useCallback)(n=>{e&&t.set(n)},[e,t])]}({groupId:t}),x=(()=>{let n=m??v;return p({value:n,tabValues:a})?n:null})();return(0,o.A)(()=>{x&&h(x)},[x]),{selectedValue:l,selectValue:(0,r.useCallback)(n=>{if(!p({value:n,tabValues:a}))throw Error(`Can't select invalid tab value=${n}`);h(n),b(n),g(n)},[b,g,a]),tabValues:a}}(n);return(0,t.jsxs)("div",{className:(0,a.A)("tabs-container","tabList__CuJ"),children:[(0,t.jsx)(m,{...e,...n}),(0,t.jsx)(b,{...e,...n})]})}function g(n){let e=(0,h.A)();return(0,t.jsx)(v,{...n,children:d(n.children)},String(e))}}}]);