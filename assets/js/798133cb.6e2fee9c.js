"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([["1816"],{3430:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>c,toc:()=>d,default:()=>b,metadata:()=>r,assets:()=>u,contentTitle:()=>p});var r=JSON.parse('{"id":"arrays-pointers/pointer-basics","title":"Pointer basics","description":"","source":"@site/docs/arrays-pointers/pointer-basics.mdx","sourceDirName":"arrays-pointers","slug":"/arrays-pointers/pointer-basics","permalink":"/c-cpp/arrays-pointers/pointer-basics","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/c-cpp/blob/main/docs/arrays-pointers/pointer-basics.mdx","tags":[],"version":"current","frontMatter":{"title":"Pointer basics"},"sidebar":"docs","previous":{"title":"Array basics","permalink":"/c-cpp/arrays-pointers/array-basics"},"next":{"title":"Pointer to function","permalink":"/c-cpp/arrays-pointers/pointer-to-function"}}'),a=t(4848),o=t(4429),i=t(4109),s=t(3703),l=t(4565);let c={title:"Pointer basics"},p=void 0,u={},d=[];function f(e){return(0,a.jsxs)(i.A,{groupId:"language",children:[(0,a.jsx)(s.A,{value:"C",children:(0,a.jsx)(l.A,{language:"c",title:"src/c/arrays-pointers/02-pointer.c",showLineNumbers:!0,children:'#include <stdio.h>\n\nint main()\n{\n    char a;\n    char *ptr; // declare a pointer for char type\n    a = \'A\';\n    printf("Value of variable a: %c\\n", a);\n    printf("Size of variable a: %lu byte(s)\\n", sizeof(a));\n\n    // now assign the address of variable a to pointer\n    ptr = &a;\n    printf("Address of ptr: %p\\n", ptr); // address of pointer\n    printf("Value of ptr: %c\\n", *ptr);  // value of pointer\n\n    int b = 456;\n    int *ptr_b;\n    ptr_b = &b;\n    printf("\\nValue of variable b: %d\\n", b);\n    printf("Address of variable b: %p\\n", ptr_b);\n    printf("Size of variable a: %lu byte(s)\\n", sizeof(b));\n\n    double c = 4.56;\n    double *ptr_c;\n    ptr_c = &c;\n    printf("\\nValue of variable c: %g\\n", c);\n    printf("Address of variable c: %p\\n", ptr_c);\n    printf("Size of variable a: %lu byte(s)\\n", sizeof(c));\n\n    return 0;\n}\n'})}),(0,a.jsx)(s.A,{value:"C++",children:(0,a.jsx)(l.A,{language:"cpp",title:"src/cpp/arrays-pointers/02-pointer.cpp",showLineNumbers:!0,children:'// pointers are variables for storing memory addresses\n// type of pointer is tied to the type of variable address it stores\n\n// (1) the pointer must be allocated,\n// (2) the pointee must be allocated,\n// (3) the pointer must be assigned to point to the pointee.\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int x = 10;   // declare and assign a integer variable\n    int *ptr;     // declare an integer pointer\n                  // Note that pointers do not declare memory\n                  // A pointer must be assigned a pointee, before the pointer\n                  // can be dereferenced. This is a major source of pointer bugs\n    ptr = &x;     // `&` operator returns the address of a variable\n    int y = *ptr; // dereference the pointer variable to get its value\n\n    // The assignment operation (=) between two pointers make them point to the\n    // same pointee. This is called sharing.\n\n    // the dereference operator * can appear on the left side of an assignment\n    // we can assign a new value to x by:\n    // *ptr = 20;\n\n    // pointer to const: a non-constant pointer cannot point to constant var\n    const int z = 100;\n    const int *ptr_z;\n    ptr_z = &z;\n    // ++ptr_z; // OK\n\n    // there can also be constant pointer\n    int cx = 20;\n    int *const pt_cx = &cx; // const pointer can only be initialized\n                            // it cannot be assigned later\n    // ++*pt_cx; // OK: cx is not constant\n    // ++pt_cx;  // Not allowed: pt_cx is constant\n\n    // there could also be const pointer to const variable\n    // const int *const ptConst;\n\n    // null pointer\n    int *ptr_null = 0;\n    // alternatively\n    // ptr_null = NULL;\n    // ptr_null = nullptr;\n    cout << "NULL pointer: " << ptr_null << endl;\n\n    // type void*\n    // if we do not know the type of the pointer variable, we can declare\n    // void *ptv;\n    // address of any type can be stored in `ptv` above\n\n    cout << "prt : " << ptr << endl;\n    cout << "y : " << y << endl;\n\n    x = 25;\n    // *ptr = 25; // same result as above\n    y = *ptr;\n    // dereferencing operator `*` returns the value stored in the address\n    cout << "y : " << y << endl;\n\n    // pointer to a pointer\n    // pointer is simply a variable that stores the address of a variable\n    // it is possible also to store the address of a pointer\n    // In numerical applications, pointer to pointers often used when we have\n    // multidimensional arrays (the chain of pointers i.e., pointer to pointer\n    // to pointer ... can go up to the dimension of arrays)\n    int xx;\n    int *pt_xx;\n    int **pt_pt_xx;\n\n    pt_xx = &xx;\n    pt_pt_xx = &pt_xx;\n\n    xx = 12;\n    cout << "Pointer to a pointer: xx = " << **pt_pt_xx << endl;\n\n    int arr[] = {10, 12, 15};\n    int *ptr_arr = arr;\n    // notice that we do not need `&` operator for the address of an array\n    // the above assignment is same as:\n    // int *ptr_arr &arr[0];\n\n    // from Expert C Programming: there is one difference between an array name\n    // and a pointer that must be kept in mind. A pointer is a variable, so \n    // pa=a and pa++ are legal. But an array name is not a variable; \n    // constructions like a=pa and a++ are illegal.\n\n    for (int i = 0; i < 3; i++)\n    {\n        cout << "arr[" << i << "] = " << *(ptr_arr + i) << endl;\n    }\n\n    // we can refer to the address of pointer as well\n    cout << "Address of ptr: " << &ptr << endl;\n\n    return 0;\n}\n'})})]})}function b(e={}){let{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(f,{...e})}):f(e)}},3703:function(e,n,t){t.d(n,{A:()=>o});var r=t(4848);t(6540);var a=t(9836);function o(e){let{children:n,hidden:t,className:o}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.A)("tabItem_Ymn6",o),hidden:t,children:n})}},4109:function(e,n,t){t.d(n,{A:()=>x});var r=t(4848),a=t(6540),o=t(9836),i=t(8251),s=t(6347),l=t(8004),c=t(5580),p=t(2213),u=t(5734);function d(e){var n,t;return null!=(t=null==(n=a.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){let{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw Error("Docusaurus error: Bad <Tabs> child <".concat("string"==typeof e.type?e.type:e.type.name,'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.'))}))?void 0:n.filter(Boolean))?t:[]}function f(e){let{value:n,tabValues:t}=e;return t.some(e=>e.value===n)}var b=t(8864);function h(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.forEach(function(n){var r;r=t[n],n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r})}return e}function m(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):(function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t.push.apply(t,r)}return t})(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}),e}function v(e){let{className:n,block:t,selectedValue:a,selectValue:s,tabValues:l}=e,c=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.a_)(),u=e=>{let n=e.currentTarget,t=l[c.indexOf(n)].value;t!==a&&(p(n),s(t))},d=e=>{var n,t;let r=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{let t=c.indexOf(e.currentTarget)+1;r=null!=(n=c[t])?n:c[0];break}case"ArrowLeft":{let n=c.indexOf(e.currentTarget)-1;r=null!=(t=c[n])?t:c[c.length-1]}}null==r||r.focus()};return(0,r.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":t},n),children:l.map(e=>{let{value:n,label:t,attributes:i}=e;return(0,r.jsx)("li",m(h({role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>{c.push(e)},onKeyDown:d,onClick:u},i),{className:(0,o.A)("tabs__item","tabItem_LNqP",null==i?void 0:i.className,{"tabs__item--active":a===n}),children:null!=t?t:n}),n)})})}function y(e){let{lazy:n,children:t,selectedValue:i}=e,s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){let e=s.find(e=>e.props.value===i);return e?(0,a.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,r.jsx)("div",{className:"margin-top--md",children:s.map((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==i}))})}function g(e){let n=function(e){let{defaultValue:n,queryString:t=!1,groupId:r}=e,o=function(e){let{values:n,children:t}=e;return(0,a.useMemo)(()=>{let e=null!=n?n:d(t).map(e=>{let{props:{value:n,label:t,attributes:r,default:a}}=e;return{value:n,label:t,attributes:r,default:a}}),r=(0,p.XI)(e,(e,n)=>e.value===n.value);if(r.length>0)throw Error('Docusaurus error: Duplicate values "'.concat(r.map(e=>e.value).join(", "),'" found in <Tabs>. Every value needs to be unique.'));return e},[n,t])}(e),[i,b]=(0,a.useState)(()=>(function(e){var n;let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!f({value:t,tabValues:r}))throw Error('Docusaurus error: The <Tabs> has a defaultValue "'.concat(t,'" but none of its children has the corresponding value. Available values are: ').concat(r.map(e=>e.value).join(", "),". If you intend to show no default tab, use defaultValue={null} instead."));return t}let a=null!=(n=r.find(e=>e.default))?n:r[0];if(!a)throw Error("Unexpected error: 0 tabValues");return a.value})({defaultValue:n,tabValues:o})),[h,m]=function(e){let{queryString:n=!1,groupId:t}=e,r=(0,s.W6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=t?t:null}({queryString:n,groupId:t});return[(0,c.aZ)(o),(0,a.useCallback)(e=>{var n,t;if(!o)return;let a=new URLSearchParams(r.location.search);a.set(o,e),r.replace((n=function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.forEach(function(n){var r;r=t[n],n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r})}return e}({},r.location),t=t={search:a.toString()},Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):(function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t.push.apply(t,r)}return t})(Object(t)).forEach(function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}),n))},[o,r])]}({queryString:t,groupId:r}),[v,y]=function(e){let{groupId:n}=e,t=n?"docusaurus.tab.".concat(n):null,[r,o]=(0,u.Dv)(t);return[r,(0,a.useCallback)(e=>{t&&o.set(e)},[t,o])]}({groupId:r}),g=(()=>{let e=null!=h?h:v;return f({value:e,tabValues:o})?e:null})();return(0,l.A)(()=>{g&&b(g)},[g]),{selectedValue:i,selectValue:(0,a.useCallback)(e=>{if(!f({value:e,tabValues:o}))throw Error("Can't select invalid tab value=".concat(e));b(e),m(e),y(e)},[m,y,o]),tabValues:o}}(e);return(0,r.jsxs)("div",{className:(0,o.A)("tabs-container","tabList__CuJ"),children:[(0,r.jsx)(v,h({},n,e)),(0,r.jsx)(y,h({},n,e))]})}function x(e){let n=(0,b.A)();return(0,r.jsx)(g,m(h({},e),{children:d(e.children)}),String(n))}}}]);