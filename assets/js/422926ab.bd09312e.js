"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[3509],{5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),r=n(6010);const l="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(7462),r=n(7294),l=n(6010),o=n(2389),u=n(7392),s=n(7094),c=n(2466);const i="tabList__CuJ",m="tabItem_LNqP";function p(e){const{lazy:t,block:n,defaultValue:o,values:p,groupId:d,className:b}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),v=p??f.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),h=(0,u.l)(v,((e,t)=>e.value===t.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const x=null===o?o:o??f.find((e=>e.props.default))?.props.value??f[0].props.value;if(null!==x&&!v.some((e=>e.value===x)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${x}" but none of its children has the corresponding value. Available values are: ${v.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:g,setTabGroupChoices:_}=(0,s.U)(),[k,z]=(0,r.useState)(x),y=[],{blockElementScrollPositionUntilNextRender:T}=(0,c.o5)();if(null!=d){const e=g[d];null!=e&&e!==k&&v.some((t=>t.value===e))&&z(e)}const C=e=>{const t=e.currentTarget,n=y.indexOf(t),a=v[n].value;a!==k&&(T(t),z(a),null!=d&&_(d,String(a)))},w=e=>{let t=null;switch(e.key){case"Enter":C(e);break;case"ArrowRight":{const n=y.indexOf(e.currentTarget)+1;t=y[n]??y[0];break}case"ArrowLeft":{const n=y.indexOf(e.currentTarget)-1;t=y[n]??y[y.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",i)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},b)},v.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:k===t?0:-1,"aria-selected":k===t,key:t,ref:e=>y.push(e),onKeyDown:w,onClick:C},o,{className:(0,l.Z)("tabs__item",m,o?.className,{"tabs__item--active":k===t})}),n??t)}))),t?(0,r.cloneElement)(f.filter((e=>e.props.value===k))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==k})))))}function d(e){const t=(0,o.Z)();return r.createElement(p,(0,a.Z)({key:String(t)},e))}},9166:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>c,default:()=>b,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var a=n(7462),r=(n(7294),n(3905)),l=n(5488),o=n(5162),u=n(6823);const s={title:"Complex number"},c=void 0,i={unversionedId:"data-structure/complex-number",id:"data-structure/complex-number",title:"Complex number",description:"",source:"@site/docs/data-structure/complex-number.mdx",sourceDirName:"data-structure",slug:"/data-structure/complex-number",permalink:"/c-cpp/data-structure/complex-number",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/data-structure/complex-number.mdx",tags:[],version:"current",frontMatter:{title:"Complex number"},sidebar:"docs",previous:{title:"enum",permalink:"/c-cpp/data-structure/enum"},next:{title:"Linked list",permalink:"/c-cpp/data-structure/linked-list"}},m={},p=[],d={toc:p};function b(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"C",mdxType:"TabItem"},(0,r.kt)(u.Z,{language:"c",title:"src/c/data-structure/03-complex-number.c",showLineNumbers:!0,mdxType:"CodeBlock"},'// also see complex.h\n#include <stdio.h>\n\nint main()\n{\n    _Complex float z = 4.0 + 3.0i;\n\n    printf("Real part = %f\\n", __real__(z));\n    printf("Imaginary part = %f\\n", __imag__(z));\n    \n    // complex conjugate\n    _Complex float conj_z = ~z;\n    printf("Conjugate = (%f, %f)\\n", __real__(conj_z), __imag__(conj_z));\n\n    return 0;\n}')),(0,r.kt)(o.Z,{value:"C++",mdxType:"TabItem"},(0,r.kt)(u.Z,{language:"cpp",title:"src/cpp/data-structure/03-complex-number.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <iostream>\n#include <complex>\nusing namespace std;\n\nint main()\n{\n    complex<double> z(2.0, 3.0); // declare complex number: 2 + 3i\n\n    // real and imaginary parts\n    cout << "Real part: " << real(z) << endl;\n    cout << "Imaginary part: " << imag(z) << endl;\n\n    // absolute value\n    cout << "Absolute value of " << z << " is " << abs(z) << endl;\n\n    // norm\n    cout << "Norm of " << z << " is " << norm(z) << endl;\n\n    // complex conjugate\n    cout << "Complex conjugate of " << z << " is " << conj(z) << endl;\n\n    complex<double> z2(3.0, 4.0);\n    cout << z << " + " << z2 << " = " << z + z2 << endl;\n    cout << z << " * " << z2 << " = " << z * z2 << endl;\n\n    return 0;\n}\n'))))}b.isMDXComponent=!0}}]);