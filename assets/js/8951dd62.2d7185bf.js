"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[596],{4407:(a,t,e)=>{e.r(t),e.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>N,frontMatter:()=>m,metadata:()=>i,toc:()=>o});var n=e(7462),s=(e(7294),e(3905)),r=e(6823);const m={title:"Sorting algorithms",sidebar_label:"Sorting"},p=void 0,i={unversionedId:"algorithms/sorting",id:"algorithms/sorting",title:"Sorting algorithms",description:"Here we will look into some of the sorting algorithms and how they scales with",source:"@site/docs/algorithms/sorting.mdx",sourceDirName:"algorithms",slug:"/algorithms/sorting",permalink:"/c-cpp/algorithms/sorting",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/algorithms/sorting.mdx",tags:[],version:"current",frontMatter:{title:"Sorting algorithms",sidebar_label:"Sorting"},sidebar:"docs",previous:{title:"Complexity analysis",permalink:"/c-cpp/algorithms/big-o"},next:{title:"Data structure",permalink:"/c-cpp/category/data-structure"}},l={},o=[{value:"Permutation sort",id:"permutation-sort",level:3},{value:"Selection sort",id:"selection-sort",level:3},{value:"Insertion sort",id:"insertion-sort",level:3},{value:"Merge sort",id:"merge-sort",level:3},{value:"Resources",id:"resources",level:3}],c={toc:o};function N(a){let{components:t,...m}=a;return(0,s.kt)("wrapper",(0,n.Z)({},c,m,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Here we will look into some of the sorting algorithms and how they scales with\nincreasing problem size."),(0,s.kt)("h3",{id:"permutation-sort"},"Permutation sort"),(0,s.kt)("p",null,"Given an array, we create all possible permutations of the array items, then\ncheck if the one of those permutations are sorted. This algorithm is extremely\ninefficient, there are ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"!")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n!")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mclose"},"!")))))," possible permutations of ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"n")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n")))))," items. Even for a\nrelatively small number of input size 20, ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mn",{parentName:"mrow"},"20"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"!"),(0,s.kt)("mo",{parentName:"mrow"},"\u2248"),(0,s.kt)("mn",{parentName:"mrow"},"2"),(0,s.kt)("mo",{parentName:"mrow"},"\xd7"),(0,s.kt)("mn",{parentName:"mrow"},"1"),(0,s.kt)("msup",{parentName:"mrow"},(0,s.kt)("mn",{parentName:"msup"},"0"),(0,s.kt)("mn",{parentName:"msup"},"18"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"(20)! \\approx 2 \\times 10^{18}")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord"},"20"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")!"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u2248"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7278em",verticalAlign:"-0.0833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"2"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\xd7"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8141em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord"},"0"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"18"))))))))))))),". For\neach step, we also need about ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow",mathvariant:"script"},"O"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\mathcal{O}(n)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathcal",style:{marginRight:"0.02778em"}},"O"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")")))))," checks to find out if one of the\npermutations is sorted."),(0,s.kt)("h3",{id:"selection-sort"},"Selection sort"),(0,s.kt)("p",null,"Here is how the selection sort works: say we are given the following array to\nsort: ","[5, 8, 2, 3, 7, 9]"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Step 1:")," find the biggest element in first (n - 1) element and swap it with\nthe last element if it is bigger than the last element else do nothing"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Step 2:")," find biggest element in first (n - 2) element, and swap it with\n(n-1)th element if it is bigger"),(0,s.kt)("p",null,"Below is an implementation in C++."),(0,s.kt)(r.Z,{language:"cpp",title:"src/cpp/misc/selection_sort.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <iostream>\n#include <tuple>\nusing namespace std;\n\ntuple<int, int> find_biggest(int arr[], int size)\n{\n    int biggest = arr[0];\n    int id = 0;\n\n    for (int i = 0; i < size; i++)\n    {\n        if (arr[i] > biggest)\n        {\n            biggest = arr[i];\n            id = i;\n        }\n    }\n\n    return make_tuple(biggest, id);\n}\n\nint main()\n{\n    int arr[] = {5, 8, 2, 3, 7, 4};\n    const int SIZE = 6;\n\n    for (int i = 1; i < SIZE; i++)\n    {\n        int biggest, id;\n        tie(biggest, id) = find_biggest(arr, SIZE - i);\n\n        if (biggest > arr[SIZE - i])\n        {\n            int tmp = arr[SIZE - i];\n            arr[SIZE - i] = biggest;\n            arr[id] = tmp;\n        }\n    }\n\n    for (int i = 0; i < SIZE; i++)\n    {\n        cout << arr[i] << "  ";\n    }\n    cout << endl;\n\n    return 0;\n}\n'),(0,s.kt)("h3",{id:"insertion-sort"},"Insertion sort"),(0,s.kt)(r.Z,{language:"cpp",title:"src/cpp/misc/insertion_sort.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int arr[] = {5, 8, 2, 3, 7, 4};\n    const int SIZE = 6;\n\n    for (int i = 1; i < SIZE; i++)\n    {\n        int j = i;\n        while (j > 0 && arr[j] < arr[j - 1])\n        {\n            int tmp = arr[j];\n            arr[j] = arr[j - 1];\n            arr[j - 1] = tmp;\n            j--;\n        }\n    }\n\n    for (int i = 0; i < SIZE; i++)\n    {\n        cout << arr[i];\n\n        if (i != SIZE - 1)\n        {\n            cout << ", ";\n        }\n    }\n    cout << endl;\n\n    return 0;\n}\n'),(0,s.kt)("p",null,"Both selection sort and insertion sort has time complexity ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow",mathvariant:"script"},"O"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("msup",{parentName:"mrow"},(0,s.kt)("mi",{parentName:"msup"},"n"),(0,s.kt)("mn",{parentName:"msup"},"2")),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\mathcal{O}(n^2)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.0641em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathcal",style:{marginRight:"0.02778em"}},"O"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"2")))))))),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"))))),"."),(0,s.kt)("h3",{id:"merge-sort"},"Merge sort"),(0,s.kt)(r.Z,{language:"cpp",title:"src/cpp/misc/merge_sort.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <iostream>\nusing namespace std;\n\nvoid print_array(int arr[], const int SIZE)\n{\n    for (int i = 0; i < SIZE; i++)\n    {\n        cout << arr[i];\n        if (i < SIZE - 1)\n        {\n            cout << ", ";\n        }\n    }\n    cout << endl;\n}\n\nvoid merge(int arr[], const int start, const int center, const int end)\n{\n    // temporary arrays\n    auto *left_array = new int[center - start];\n    auto *right_array = new int[end - center];\n\n    // copy data to temp arrays\n    for (auto i = 0; i < center - start; i++)\n    {\n        left_array[i] = arr[start + i];\n    }\n\n    for (auto i = 0; i < end - center; i++)\n    {\n        right_array[i] = arr[center + i];\n    }\n\n    // merge\n    int i = 0;\n    int j = 0;\n    int left = start;\n    while (left < end)\n    {\n        if ((j >= end - center) || ((i < center - start) && (left_array[i] < right_array[j])))\n        {\n            arr[left] = left_array[i];\n            i++;\n        }\n        else\n        {\n            arr[left] = right_array[j];\n            j++;\n        }\n        left++;\n    }\n\n    delete[] left_array;\n    delete[] right_array;\n}\n\nvoid merge_sort(int arr[], int start, int end)\n{\n    if (end - start > 1)\n    {\n        auto center = (start + end + 1) / 2;\n        merge_sort(arr, start, center);\n        merge_sort(arr, center, end);\n        merge(arr, start, center, end);\n    }\n}\n\nint main()\n{\n    int arr[] = {5, 8, 2, 3, 7, 4};\n    const int SIZE = 6;\n\n    merge_sort(arr, 0, SIZE);\n    print_array(arr, 6);\n\n    return 0;\n}\n'),(0,s.kt)("p",null,"Merge sort has time complexity ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow",mathvariant:"script"},"O"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mi",{parentName:"mrow"},"log"),(0,s.kt)("mo",{parentName:"mrow"},"\u2061"),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\mathcal{O}(n \\log n)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathcal",style:{marginRight:"0.02778em"}},"O"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mop"},"lo",(0,s.kt)("span",{parentName:"span",style:{marginRight:"0.01389em"}},"g")),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"))))),"."),(0,s.kt)("h3",{id:"resources"},"Resources"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=oS9aPzUNG-s&list=PLUl4u3cNGP63EdVPNLG3ToM6LaEUuStEY&index=4"},"MIT OCW Lecture Video")," (",(0,s.kt)("a",{target:"_blank",href:e(6017).Z},"related notes"),")"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=yndgIDO0zQQ&list=PLUl4u3cNGP63EdVPNLG3ToM6LaEUuStEY&index=7"},"Linear Sorting lecture video from MIT OCW")," (",(0,s.kt)("a",{target:"_blank",href:e(9234).Z},"related notes"),")")))}N.isMDXComponent=!0},6017:(a,t,e)=>{e.d(t,{Z:()=>n});const n=e.p+"assets/files/MIT6_006S20_r03_sorting-0d388861e858099d2d60b052dfc1468a.pdf"},9234:(a,t,e)=>{e.d(t,{Z:()=>n});const n=e.p+"assets/files/MIT6_006S20_r05_linear_sorting-9bc94dfbbe64710e69585629157e6914.pdf"}}]);