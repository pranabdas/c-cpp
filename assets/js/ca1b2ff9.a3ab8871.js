"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([["6275"],{4922:function(r,n,e){e.r(n),e.d(n,{default:()=>m,frontMatter:()=>u,metadata:()=>a,assets:()=>d,toc:()=>p,contentTitle:()=>c});var a=JSON.parse('{"id":"arrays-pointers/array-basics","title":"Array basics","description":"","source":"@site/docs/arrays-pointers/array-basics.mdx","sourceDirName":"arrays-pointers","slug":"/arrays-pointers/array-basics","permalink":"/c-cpp/arrays-pointers/array-basics","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/c-cpp/blob/main/docs/arrays-pointers/array-basics.mdx","tags":[],"version":"current","frontMatter":{"title":"Array basics"},"sidebar":"docs","previous":{"title":"Array and Pointer","permalink":"/c-cpp/category/array-and-pointer"},"next":{"title":"Pointer basics","permalink":"/c-cpp/arrays-pointers/pointer-basics"}}'),t=e("5893"),i=e("65"),s=e("8168"),o=e("7645"),l=e("1705");let u={title:"Array basics"},c=void 0,d={},p=[];function f(r){return(0,t.jsxs)(s.Z,{groupId:"language",children:[(0,t.jsx)(o.Z,{value:"C",children:(0,t.jsx)(l.Z,{language:"c",title:"src/c/arrays-pointers/01-array-basics.c",showLineNumbers:!0,children:'#include <stdio.h>\n\nint main()\n{\n    const int SIZE = 5;\n\n    // int array1[SIZE] = {0}; // if the array size is not knowns compile time,\n                            // use heap dynamic memory\n    // int array2[SIZE] = {1, 2, 3, 4, 5};\n    // some compiler might complain here, use 5 instead of SIZE\n    // fails in gcc, however works in apple clang\n    int array1[5] = {0};\n    int array2[5] = {1, 2, 3, 4, 5};\n    int array3[] = {1, 2, 3, 4, 5};\n\n    char str1[] = "hello";\n\n    int i;\n    double sum2 = 0, sum3 = 0;\n    double *ptr_sum2 = &sum2;\n\n    for (i = 0; i < SIZE; i++)\n    {\n        sum2 += array2[i];\n        sum3 += array3[i];\n    }\n\n    printf("Sum2 = %f\\n", sum2);\n    printf("Sum3 = %f\\n", sum3);\n\n    printf("Pointer sum2: %p\\n", ptr_sum2);\n    printf("Sum2 = %f\\n", *ptr_sum2);\n\n    printf("array2 position: %p\\n", array2);\n\n    return 0;\n}\n'})}),(0,t.jsx)(o.Z,{value:"C++",children:(0,t.jsx)(l.Z,{language:"cpp",title:"src/cpp/arrays-pointers/01-array-basics.cpp",showLineNumbers:!0,children:'#include <iostream>\nusing namespace std;\n\nvoid print_2d_array(float *, int, int);\n\nint main()\n{\n    int arr[] = {2, 4, 8, 15};\n    // arr[4] = {1, 2};\n    // above assignment sets: arr[0] = 1, arr[1] = 2, arr[2] = 0, arr[3] = 0\n    // aggregation initialization:\n    // note that if we do not provide any value via curly braces, the array\n    // remains uninitialized. To make sure array is initialized to zeros:\n    // arr[4] = {}\n\n    for (int i : arr)\n    {\n        cout << i << endl;\n    }\n\n    const int SIZE = 10; // `const` is necessary here\n    double data[SIZE];\n    // if the size of array is not known compile time, use heap dynamic array\n\n    cout << "Size of data = " << sizeof(data) << " bytes\\n";\n    cout << "Length of data array: " << sizeof(data) / sizeof(data[0]) << endl;\n    // the above prints the size of the entire array\n\n    // multi-dimensional array:\n    float arr2d[3][4] = {0.0}; // this initializes all elements to with 0.0\n    cout << "\\narr2d:\\n";\n    print_2d_array(&arr2d[0][0], 3, 4);\n\n    float arr2d2[3][4] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\n    cout << "\\narr2d2:\\n";\n    print_2d_array(&arr2d2[0][0], 3, 4);\n\n    float arr2d3[3][4] = {{1.1, 2.2, 3.3, 4.4},\n                          {5.5, 6.6, 7.7, 8.8},\n                          {9.9, 10., 11., 12.}};\n    cout << "\\narr2d3:\\n";\n    print_2d_array(&arr2d3[0][0], 3, 4);\n\n    float arr2d4[][4] = {{1.1, 2.2, 3.3, 4.4},\n                          {5.5, 6.6, 7.7, 8.8},\n                          {9.9, 10., 11., 12.}};\n    cout << "\\narr2d4:\\n";\n    print_2d_array(&arr2d4[0][0], 3, 4);\n\n    float arr2d5[][4] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\n    cout << "\\narr2d5:\\n";\n    print_2d_array(&arr2d5[0][0], 3, 4);\n\n    float arr2d6[3][4] = {0.3}; // sets first element to 0.3, rest to 0.0\n    cout << "\\narr2d6:\\n";\n    print_2d_array(&arr2d6[0][0], 3, 4);\n\n    return 0;\n}\n\nvoid print_2d_array(float *arr, int m, int n)\n{\n    for (int i = 0; i < m; i++)\n    {\n        for (int j = 0; j < n; j++)\n        {\n            // array elements are continuously stored row by row in C++\n            cout << *(arr + (n * i) + j) << "\\t";\n            //      |   --- pointer to the first element, do the pointer\n            //      |       arithmetic to get the next elements\n            //      dereference the value\n        }\n        cout << endl;\n    }\n}\n'})})]})}function m(r={}){let{wrapper:n}={...(0,i.a)(),...r.components};return n?(0,t.jsx)(n,{...r,children:(0,t.jsx)(f,{...r})}):f(r)}},7645:function(r,n,e){e.d(n,{Z:()=>i});var a=e("5893");e("7294");var t=e("7026");function i(r){let{children:n,hidden:e,className:i}=r;return(0,a.jsx)("div",{role:"tabpanel",className:(0,t.Z)("tabItem_Ymn6",i),hidden:e,children:n})}},8168:function(r,n,e){e.d(n,{Z:()=>v});var a=e("5893"),t=e("7294"),i=e("7026"),s=e("4718"),o=e("6550"),l=e("8714"),u=e("9207"),c=e("9413"),d=e("4510");function p(r){return t.Children.toArray(r).filter(r=>"\n"!==r).map(r=>{if(!r||t.isValidElement(r)&&function(r){let{props:n}=r;return!!n&&"object"==typeof n&&"value"in n}(r))return r;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof r.type?r.type:r.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function f(r){let{value:n,tabValues:e}=r;return e.some(r=>r.value===n)}var m=e("6735");function h(r){let{className:n,block:e,selectedValue:t,selectValue:o,tabValues:l}=r,u=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.o5)(),d=r=>{let n=r.currentTarget,e=l[u.indexOf(n)].value;e!==t&&(c(n),o(e))},p=r=>{let n=null;switch(r.key){case"Enter":d(r);break;case"ArrowRight":{let e=u.indexOf(r.currentTarget)+1;n=u[e]??u[0];break}case"ArrowLeft":{let e=u.indexOf(r.currentTarget)-1;n=u[e]??u[u.length-1]}}n?.focus()};return(0,a.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":e},n),children:l.map(r=>{let{value:n,label:e,attributes:s}=r;return(0,a.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:r=>{u.push(r)},onKeyDown:p,onClick:d,...s,className:(0,i.Z)("tabs__item","tabItem_LNqP",s?.className,{"tabs__item--active":t===n}),children:e??n},n)})})}function y(r){let{lazy:n,children:e,selectedValue:s}=r,o=(Array.isArray(e)?e:[e]).filter(Boolean);if(n){let r=o.find(r=>r.props.value===s);return r?(0,t.cloneElement)(r,{className:(0,i.Z)("margin-top--md",r.props.className)}):null}return(0,a.jsx)("div",{className:"margin-top--md",children:o.map((r,n)=>(0,t.cloneElement)(r,{key:n,hidden:r.props.value!==s}))})}function b(r){let n=function(r){let{defaultValue:n,queryString:e=!1,groupId:a}=r,i=function(r){let{values:n,children:e}=r;return(0,t.useMemo)(()=>{let r=n??p(e).map(r=>{let{props:{value:n,label:e,attributes:a,default:t}}=r;return{value:n,label:e,attributes:a,default:t}});return!function(r){let n=(0,c.lx)(r,(r,n)=>r.value===n.value);if(n.length>0)throw Error(`Docusaurus error: Duplicate values "${n.map(r=>r.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(r),r},[n,e])}(r),[s,m]=(0,t.useState)(()=>(function(r){let{defaultValue:n,tabValues:e}=r;if(0===e.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!f({value:n,tabValues:e}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${e.map(r=>r.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}let a=e.find(r=>r.default)??e[0];if(!a)throw Error("Unexpected error: 0 tabValues");return a.value})({defaultValue:n,tabValues:i})),[h,y]=function(r){let{queryString:n=!1,groupId:e}=r,a=(0,o.k6)(),i=function(r){let{queryString:n=!1,groupId:e}=r;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!e)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return e??null}({queryString:n,groupId:e});return[(0,u._X)(i),(0,t.useCallback)(r=>{if(!i)return;let n=new URLSearchParams(a.location.search);n.set(i,r),a.replace({...a.location,search:n.toString()})},[i,a])]}({queryString:e,groupId:a}),[b,v]=function(r){let{groupId:n}=r,e=n?`docusaurus.tab.${n}`:null,[a,i]=(0,d.Nk)(e);return[a,(0,t.useCallback)(r=>{e&&i.set(r)},[e,i])]}({groupId:a}),g=(()=>{let r=h??b;return f({value:r,tabValues:i})?r:null})();return(0,l.Z)(()=>{g&&m(g)},[g]),{selectedValue:s,selectValue:(0,t.useCallback)(r=>{if(!f({value:r,tabValues:i}))throw Error(`Can't select invalid tab value=${r}`);m(r),y(r),v(r)},[y,v,i]),tabValues:i}}(r);return(0,a.jsxs)("div",{className:(0,i.Z)("tabs-container","tabList__CuJ"),children:[(0,a.jsx)(h,{...n,...r}),(0,a.jsx)(y,{...n,...r})]})}function v(r){let n=(0,m.Z)();return(0,a.jsx)(b,{...r,children:p(r.children)},String(n))}}}]);