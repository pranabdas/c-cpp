"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[528],{5180:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>p,contentTitle:()=>l,default:()=>b,frontMatter:()=>a,metadata:()=>u,toc:()=>m});var t=i(7462),r=(i(7294),i(3905)),c=i(5488),s=i(5162),o=i(814);const a={title:"Recursion"},l=void 0,u={unversionedId:"basics/recursion",id:"basics/recursion",title:"Recursion",description:"Recursion enables us to solve certain types of problems very elegantly, however",source:"@site/docs/basics/recursion.mdx",sourceDirName:"basics",slug:"/basics/recursion",permalink:"/c-cpp/basics/recursion",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/basics/recursion.mdx",tags:[],version:"current",frontMatter:{title:"Recursion"},sidebar:"docs",previous:{title:"Function",permalink:"/c-cpp/basics/function"},next:{title:"Static storage",permalink:"/c-cpp/basics/static-storage"}},p={},m=[],d={toc:m};function b(n){let{components:e,...i}=n;return(0,r.kt)("wrapper",(0,t.Z)({},d,i,{components:e,mdxType:"MDXLayout"}),(0,r.kt)(c.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"C",mdxType:"TabItem"},(0,r.kt)(o.Z,{language:"c",title:"src/c/basics/06-recursive-factorial.c",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <stdio.h>\n\n// long allows factorial up to 20\nlong factorial(int num)\n{\n    if (num == 1)\n        return 1;\n    else\n        return (num * factorial(num - 1));\n}\n\nint main()\n{\n    int lim = 10, i;\n    long fact;\n\n    for (i = 1; i < lim; i++)\n    {\n        fact = factorial(i);\n        printf("%d! = %ld\\n", i, fact);\n    }\n    return 0;\n}\n')),(0,r.kt)(s.Z,{value:"C++",mdxType:"TabItem"},(0,r.kt)(o.Z,{language:"cpp",title:"src/cpp/basics/06-recursive-fibonacci.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <iostream>\nusing namespace std;\n\nlong fibonacci(int n)\n{\n    if (n <= 1)\n        return n;\n    else\n        return (fibonacci(n - 1) + fibonacci(n - 2));\n}\n\nint main()\n{\n    int lim = 45, i;\n    long fib;\n\n    for (i = 0; i < lim; i++)\n    {\n        fib = fibonacci(i);\n        cout << "F(" << i << ") = " << fib << endl;\n    }\n    \n    return 0;\n}\n'))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Recursion enables us to solve certain types of problems very elegantly, however\nthere are certain downside to large numbers of recursive function calls; it\nrequires large amount of stack memory, and program might crash with stack\noverflow.")))}b.isMDXComponent=!0}}]);