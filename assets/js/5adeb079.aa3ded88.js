"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[734],{3055:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>d,toc:()=>u});var a=t(7462),i=(t(7294),t(3905)),s=t(5488),c=t(5162),r=t(814);const o={title:"Basic data types"},l=void 0,d={unversionedId:"basics/data-types",id:"basics/data-types",title:"Basic data types",description:"C/C++ statically typed languages. Before we can store certain values in the",source:"@site/docs/basics/data-types.mdx",sourceDirName:"basics",slug:"/basics/data-types",permalink:"/c-cpp/basics/data-types",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/basics/data-types.mdx",tags:[],version:"current",frontMatter:{title:"Basic data types"},sidebar:"docs",previous:{title:"Add two integers",permalink:"/c-cpp/basics/add-two-integers"},next:{title:"Control flow",permalink:"/c-cpp/basics/control-flow"}},p={},u=[],m={toc:u};function g(n){let{components:e,...t}=n;return(0,i.kt)("wrapper",(0,a.Z)({},m,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"C/C++ statically typed languages. Before we can store certain values in the\ncomputer memory, we need to declare their data types."),(0,i.kt)(s.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(c.Z,{value:"C",mdxType:"TabItem"},(0,i.kt)(r.Z,{language:"c",title:"src/c/basics/02-data-types.c",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <stdio.h>\n\nint main()\n{\n    unsigned int u_num = 8;\n    printf("Unsigned integer: %u\\n", u_num);\n\n    int num = -9;\n    printf("Integer: %d\\n", num);\n\n    long int large_num = 3988764563425;\n    printf("Large integer: %ld\\n", large_num);\n\n    float num_f = 3.14159;\n    printf("Float: %f\\n", num_f);\n\n    double num_d = 3.141592653589793;\n    printf("Double precision float: %16.15f\\n", num_d);\n\n    char c = \'a\'; // char data type must be wrapped in single quotes\n                  // double quote in c/c++ denotes string literal which is an\n                  // array of char with null terminator (\\0)\n    printf("Char: %c\\n", c);\n    printf("ASCII value of char: %d\\n", c);\n    printf("char corresponding to ascii value 98: %c\\n", 98);\n\n    char message[] = "Hello"; // string literal\n                              // same as {\'H\', \'e\', \'l\', \'l\', \'o\', \'\\0\'}\n    printf("String: %s\\n", message);\n\n    return 0;\n}\n')),(0,i.kt)(c.Z,{value:"C++",mdxType:"TabItem"},(0,i.kt)(r.Z,{language:"cpp",title:"src/cpp/basics/02-data-types.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <iostream>\n#include <iomanip> // setprecision\nusing namespace std;\n\nint main()\n{\n    unsigned int u_num = 8;\n    cout << "Unsigned integer: " << u_num << endl;\n\n    int num = -9;\n    cout << "Integer: " << num << endl;\n\n    long int large_num = 3988764563425;\n    cout << "Large integer: " << large_num << endl;\n\n    float num_f = 3.14159;\n    cout << "Float: " << num_f << endl;\n\n    double num_d = 3.141592653589793;\n    cout << "Double precision float: " << setprecision(16) << num_d << endl;\n\n    char c = \'a\';\n    cout << "Char: " << c << endl;\n    cout << "ASCII value of char: " << int(c) << endl;\n    cout << "char corresponding to ascii value 98: " << char(98) << endl;\n\n    char message[] = "Hello";\n    cout << "String: " << message << endl;\n\n    return 0;\n}\n'))),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"A decimal integer cannot start with ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),", in that case it is considered octal\nbase. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"076")," denotes ",(0,i.kt)("inlineCode",{parentName:"p"},"63")," in decimal notation.")))}g.isMDXComponent=!0}}]);