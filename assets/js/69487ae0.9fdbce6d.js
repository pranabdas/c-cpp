"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[3325],{5162:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(7294),r=n(6010);const u="tabItem_Ymn6";function s(e){let{children:t,hidden:n,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(u,s),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>T});var a=n(7462),r=n(7294),u=n(6010),s=n(2466),l=n(6550),i=n(1980),o=n(7392),c=n(12);function d(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function m(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,o.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),u=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i._X)(u),(0,r.useCallback)((e=>{if(!u)return;const t=new URLSearchParams(a.location.search);t.set(u,e),a.replace({...a.location,search:t.toString()})}),[u,a])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,u=m(e),[s,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:u}))),[i,o]=g({queryString:n,groupId:a}),[d,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,u]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&u.set(e)}),[n,u])]}({groupId:a}),f=(()=>{const e=i??d;return p({value:e,tabValues:u})?e:null})();(0,r.useEffect)((()=>{f&&l(f)}),[f]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:u}))throw new Error(`Can't select invalid tab value=${e}`);l(e),o(e),b(e)}),[o,b,u]),tabValues:u}}var f=n(2389);const v="tabList__CuJ",h="tabItem_LNqP";function y(e){let{className:t,block:n,selectedValue:l,selectValue:i,tabValues:o}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.o5)(),m=e=>{const t=e.currentTarget,n=c.indexOf(t),a=o[n].value;a!==l&&(d(t),i(a))},p=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":n},t)},o.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>c.push(e),onKeyDown:p,onClick:m},s,{className:(0,u.Z)("tabs__item",h,s?.className,{"tabs__item--active":l===t})}),n??t)})))}function k(e){let{lazy:t,children:n,selectedValue:a}=e;if(t){const e=n.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function w(e){const t=b(e);return r.createElement("div",{className:(0,u.Z)("tabs-container",v)},r.createElement(y,(0,a.Z)({},e,t)),r.createElement(k,(0,a.Z)({},e,t)))}function T(e){const t=(0,f.Z)();return r.createElement(w,(0,a.Z)({key:String(t)},e))}},1227:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>c,toc:()=>m});var a=n(7462),r=(n(7294),n(3905)),u=n(4866),s=n(5162),l=n(814);const i={title:"Parsing command arguments",sidebar_label:"Argument parsing"},o=void 0,c={unversionedId:"misc/arg-parsing",id:"misc/arg-parsing",title:"Parsing command arguments",description:"",source:"@site/docs/misc/arg-parsing.mdx",sourceDirName:"misc",slug:"/misc/arg-parsing",permalink:"/c-cpp/misc/arg-parsing",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/misc/arg-parsing.mdx",tags:[],version:"current",frontMatter:{title:"Parsing command arguments",sidebar_label:"Argument parsing"},sidebar:"docs",previous:{title:"Miscellaneous",permalink:"/c-cpp/category/miscellaneous"},next:{title:"Bit shifting",permalink:"/c-cpp/misc/bit-shifting"}},d={},m=[],p={toc:m};function g(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(u.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"C",mdxType:"TabItem"},(0,r.kt)(l.Z,{language:"c",title:"src/c/misc/01-argc-argv.c",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <stdio.h>\n// ./a.out first second\n// argv[0] = a.out\n// argv[1] = first\n// argv[2] = second\n\nint main(int argc, char *argv[]) // argument count, argument vector\n{\n    for (int i = 0; i < argc; i++)\n    {\n        printf("argv[%d] = %s\\n", i, argv[i]);\n    }\n    return 0;\n}\n')),(0,r.kt)(s.Z,{value:"C++",mdxType:"TabItem"},(0,r.kt)(l.Z,{language:"cpp",title:"src/cpp/misc/01-argc-argv.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n    cout << "Program: " << argv[0] << endl;\n    cout << "You have provided " << argc - 1 << " arguments\\n";\n\n    if (argc > 1)\n    {\n        cout << "Arguments are:\\n";\n\n        for (int i = 1; i < argc; i++)\n        {\n            cout << "arg[" << i << "] : " << argv[i] << endl;\n        }\n    }\n\n    // Note that the arguments are string\n    // They have to be converted to other data type as necessary\n    // for example we can use `<cstdlib>` `atoi` to convert string to int\n\n    int max = atoi("100");\n    max += 10;\n\n    cout << max << endl;\n    \n    return 0;\n}\n'))))}g.isMDXComponent=!0}}]);