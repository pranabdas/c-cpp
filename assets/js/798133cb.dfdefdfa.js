"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[3714],{5162:(e,n,t)=>{t.d(n,{Z:()=>i});var a=t(7294),r=t(6010);const o="tabItem_Ymn6";function i(e){let{children:n,hidden:t,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,i),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>b});var a=t(7462),r=t(7294),o=t(6010),i=t(2389),s=t(7392),l=t(7094),p=t(2466);const c="tabList__CuJ",u="tabItem_LNqP";function d(e){const{lazy:n,block:t,defaultValue:i,values:d,groupId:b,className:m}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=d??f.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),v=(0,s.l)(h,((e,n)=>e.value===n.value));if(v.length>0)throw new Error(`Docusaurus error: Duplicate values "${v.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===i?i:i??f.find((e=>e.props.default))?.props.value??f[0].props.value;if(null!==y&&!h.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:g,setTabGroupChoices:x}=(0,l.U)(),[_,w]=(0,r.useState)(y),k=[],{blockElementScrollPositionUntilNextRender:T}=(0,p.o5)();if(null!=b){const e=g[b];null!=e&&e!==_&&h.some((n=>n.value===e))&&w(e)}const N=e=>{const n=e.currentTarget,t=k.indexOf(n),a=h[t].value;a!==_&&(T(n),w(a),null!=b&&x(b,String(a)))},E=e=>{let n=null;switch(e.key){case"Enter":N(e);break;case"ArrowRight":{const t=k.indexOf(e.currentTarget)+1;n=k[t]??k[0];break}case"ArrowLeft":{const t=k.indexOf(e.currentTarget)-1;n=k[t]??k[k.length-1];break}}n?.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},m)},h.map((e=>{let{value:n,label:t,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:_===n?0:-1,"aria-selected":_===n,key:n,ref:e=>k.push(e),onKeyDown:E,onClick:N},i,{className:(0,o.Z)("tabs__item",u,i?.className,{"tabs__item--active":_===n})}),t??n)}))),n?(0,r.cloneElement)(f.filter((e=>e.props.value===_))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==_})))))}function b(e){const n=(0,i.Z)();return r.createElement(d,(0,a.Z)({key:String(n)},e))}},5942:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>p,default:()=>m,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var a=t(7462),r=(t(7294),t(3905)),o=t(5488),i=t(5162),s=t(6823);const l={title:"Pointer basics"},p=void 0,c={unversionedId:"arrays-pointers/pointer-basics",id:"arrays-pointers/pointer-basics",title:"Pointer basics",description:"",source:"@site/docs/arrays-pointers/pointer-basics.mdx",sourceDirName:"arrays-pointers",slug:"/arrays-pointers/pointer-basics",permalink:"/c-cpp/arrays-pointers/pointer-basics",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/arrays-pointers/pointer-basics.mdx",tags:[],version:"current",frontMatter:{title:"Pointer basics"},sidebar:"docs",previous:{title:"Array basics",permalink:"/c-cpp/arrays-pointers/array-basics"},next:{title:"Pointer to function",permalink:"/c-cpp/arrays-pointers/pointer-to-function"}},u={},d=[],b={toc:d};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},b,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"C",mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"c",title:"src/c/arrays-pointers/02-pointer.c",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <stdio.h>\n\nint main()\n{\n    char a;\n    char *ptr; // declare a pointer for char type\n    a = \'A\';\n    printf("Value of variable a: %c\\n", a);\n    printf("Size of variable a: %lu byte(s)\\n", sizeof(a));\n\n    // now assign the address of variable a to pointer\n    ptr = &a;\n    printf("Address of ptr: %p\\n", ptr); // address of pointer\n    printf("Value of ptr: %c\\n", *ptr);  // value of pointer\n\n    int b = 456;\n    int *ptr_b;\n    ptr_b = &b;\n    printf("\\nValue of variable b: %d\\n", b);\n    printf("Address of variable b: %p\\n", ptr_b);\n    printf("Size of variable a: %lu byte(s)\\n", sizeof(b));\n\n    double c = 4.56;\n    double *ptr_c;\n    ptr_c = &c;\n    printf("\\nValue of variable c: %g\\n", c);\n    printf("Address of variable c: %p\\n", ptr_c);\n    printf("Size of variable a: %lu byte(s)\\n", sizeof(c));\n\n    return 0;\n}\n')),(0,r.kt)(i.Z,{value:"C++",mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"cpp",title:"src/cpp/arrays-pointers/02-pointer.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'// pointers are variables for storing memory addresses\n// type of pointer is tied to the type of variable address it stores\n\n// (1) the pointer must be allocated,\n// (2) the pointee must be allocated,\n// (3) the pointer must be assigned to point to the pointee.\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int x = 10;   // declare and assign a integer variable\n    int *ptr;     // declare an integer pointer\n                  // Note that pointers do not declare memory\n                  // A pointer must be assigned a pointee, before the pointer\n                  // can be dereferenced. This is a major source of pointer bugs\n    ptr = &x;     // `&` operator returns the address of a variable\n    int y = *ptr; // dereference the pointer variable to get its value\n\n    // The assignment operation (=) between two pointers make them point to the\n    // same pointee. This is called sharing.\n\n    // the dereference operator * can appear on the left side of an assignment\n    // we can assign a new value to x by:\n    // *ptr = 20;\n\n    // pointer to const: a non-constant pointer cannot point to constant var\n    const int z = 100;\n    const int *ptr_z;\n    ptr_z = &z;\n    // ++ptr_z; // OK\n\n    // there can also be constant pointer\n    int cx = 20;\n    int *const pt_cx = &cx; // const pointer can only be initialized\n                            // it cannot be assigned later\n    // ++*pt_cx; // OK: cx is not constant\n    // ++pt_cx;  // Not allowed: pt_cx is constant\n\n    // there could also be const pointer to const variable\n    // const int *const ptConst;\n\n    // null pointer\n    int *ptr_null = 0;\n    // alternatively\n    // ptr_null = NULL;\n    // ptr_null = nullptr;\n    cout << "NULL pointer: " << ptr_null << endl;\n\n    // type void*\n    // if we do not know the type of the pointer variable, we can declare\n    // void *ptv;\n    // address of any type can be stored in `ptv` above\n\n    cout << "prt : " << ptr << endl;\n    cout << "y : " << y << endl;\n\n    x = 25;\n    // *ptr = 25; // same result as above\n    y = *ptr;\n    // dereferencing operator `*` returns the value stored in the address\n    cout << "y : " << y << endl;\n\n    // pointer to a pointer\n    // pointer is simply a variable that stores the address of a variable\n    // it is possible also to store the address of a pointer\n    // In numerical applications, pointer to pointers often used when we have\n    // multidimensional arrays (the chain of pointers i.e., pointer to pointer\n    // to pointer ... can go up to the dimension of arrays)\n    int xx;\n    int *pt_xx;\n    int **pt_pt_xx;\n\n    pt_xx = &xx;\n    pt_pt_xx = &pt_xx;\n\n    xx = 12;\n    cout << "Pointer to a pointer: xx = " << **pt_pt_xx << endl;\n\n    int arr[] = {10, 12, 15};\n    int *ptr_arr = arr;\n    // notice that we do not need `&` operator for the address of an array\n    // the above assignment is same as:\n    // int *ptr_arr &arr[0];\n\n    // from Expert C Programming: there is one difference between an array name\n    // and a pointer that must be kept in mind. A pointer is a variable, so \n    // pa=a and pa++ are legal. But an array name is not a variable; \n    // constructions like a=pa and a++ are illegal.\n\n    for (int i = 0; i < 3; i++)\n    {\n        cout << "arr[" << i << "] = " << *(ptr_arr + i) << endl;\n    }\n\n    // we can refer to the address of pointer as well\n    cout << "Address of ptr: " << &ptr << endl;\n\n    return 0;\n}\n'))))}m.isMDXComponent=!0}}]);