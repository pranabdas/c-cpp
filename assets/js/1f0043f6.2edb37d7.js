"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[59],{7153:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>p,toc:()=>u});var t=i(7462),a=(i(7294),i(3905)),r=i(5488),f=i(5162),l=i(814);const s={title:"File Input Output",sidebar_label:"File IO basics"},o=void 0,p={unversionedId:"file-io/file-io",id:"file-io/file-io",title:"File Input Output",description:"Write",source:"@site/docs/file-io/file-io.mdx",sourceDirName:"file-io",slug:"/file-io/",permalink:"/c-cpp/file-io/",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/file-io/file-io.mdx",tags:[],version:"current",frontMatter:{title:"File Input Output",sidebar_label:"File IO basics"},sidebar:"docs",previous:{title:"File IO",permalink:"/c-cpp/category/file-io"},next:{title:"Miscellaneous",permalink:"/c-cpp/category/miscellaneous"}},d={},u=[{value:"Write",id:"write",level:2},{value:"Read",id:"read",level:2},{value:"Append",id:"append",level:2},{value:"Save buffer",id:"save-buffer",level:2},{value:"Read buffer",id:"read-buffer",level:2}],c={toc:u};function m(n){let{components:e,...i}=n;return(0,a.kt)("wrapper",(0,t.Z)({},c,i,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"write"},"Write"),(0,a.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,a.kt)(f.Z,{value:"C",mdxType:"TabItem"},(0,a.kt)(l.Z,{language:"c",title:"src/c/file-io/01-write-file.c",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n// compile: gcc file.c -lm\n\nint main()\n{\n    int ii;\n    double theta, result1, result2;\n\n    FILE *fp;\n    fp = fopen("results.dat", "w");\n    if (fp == NULL)\n    {\n        printf("File could not be created.\\n");\n        exit(1);\n    }\n\n    for (ii = 0; ii < 100; ii++)\n    {\n\n        theta = 4 * 3.14 * ii / 100;\n\n        if (theta == 0) // To avoid the 0/0 situation\n        {\n            theta = 0.000001;\n        }\n\n        result1 = sin(theta) / theta;\n        result2 = sin(2 * theta) / theta;\n\n        // printf("%f\\t%f\\n", theta, result);\n        fprintf(fp, "%f\\t%f\\t%f\\n", theta, result1, result2);\n    }\n    fclose(fp);\n    return 0;\n}\n')),(0,a.kt)(f.Z,{value:"C++",mdxType:"TabItem"},(0,a.kt)(l.Z,{language:"cpp",title:"src/cpp/file-io/01-write-file.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <iostream>\n#include <fstream>\nusing namespace std;\n\nint main()\n{\n    // ofstream is used to write to file\n    ofstream fp_out{"data.txt"};\n    // ofstream fp_out{"data.txt", ios::out};\n\n    if (!fp_out)\n    {\n        cerr << "File could not be created!\\n";\n        return 1;\n    }\n\n    for (int i = 1; i <= 10; i++)\n    {\n        fp_out << i << " " << i * i << endl;\n    }\n    \n    fp_out.close();\n    return 0;\n}\n'))),(0,a.kt)("h2",{id:"read"},"Read"),(0,a.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,a.kt)(f.Z,{value:"C",mdxType:"TabItem"},(0,a.kt)(l.Z,{language:"c",title:"src/c/file-io/02-read-file.c",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX_SIZE 10\n\nvoid read_file(FILE *fp, int data[], int *size)\n{\n    *size = 0;\n    while (fscanf(fp, "%d", &data[*size]) == 1) \n    // fscanf returns 1 if success, 0 if fails\n    {\n        (*size)++;\n    }\n}\n\nvoid print_data(int data[], int size)\n{\n    int i;\n    for (i = 0; i < size; i++)\n    {\n        printf("%d\\n", data[i]);\n    }\n}\n\ndouble average(int data[], int size)\n{\n    int i;\n    double average = 0.0;\n\n    for (i = 0; i < size; i++)\n    {\n        average += data[i];\n    }\n\n    return (average / size);\n}\n\nint main()\n{\n    int i;\n    int size = MAX_SIZE;\n    FILE *fp;\n    int data[MAX_SIZE] = {0};\n\n    fp = fopen("file.dat", "r");\n    if (fp == NULL)\n    {\n        printf("File could not be opened.\\n");\n        exit(1);\n    }\n\n    read_file(fp, data, &size);\n\n    printf("My %d scores are:\\n", size);\n    print_data(data, size);\n\n    printf("Average score: %.2f\\n", average(data, size));\n    fclose(fp);\n    return 0;\n}\n')),(0,a.kt)(f.Z,{value:"C++",mdxType:"TabItem"},(0,a.kt)(l.Z,{language:"cpp",title:"src/cpp/file-io/02-read-file.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <iostream>\n#include <fstream>\n#include <string>\nusing namespace std;\n\nint main()\n{\n    // ifstream is used to read from file\n    ifstream fp_in{"data.txt"};\n    // ifstream fp_in{"data.txt", ios::in};\n    if (!fp_in)\n    {\n        cerr << "File could not be opened for reading!\\n";\n        return 1;\n    }\n\n    while (fp_in)\n    {\n        string input_string;\n        getline(fp_in, input_string);\n        cout << input_string << endl;\n    }\n\n    fp_in.close();\n    return 0;\n}\n'))),(0,a.kt)("h2",{id:"append"},"Append"),(0,a.kt)(l.Z,{language:"cpp",title:"src/cpp/file-io/03-append-file.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <iostream>\n#include <fstream>\nusing namespace std;\n\nint main()\n{\n    // ofstream is used to write to file\n    ofstream fp_out{"data.txt"};\n\n    if (!fp_out)\n    {\n        cerr << "File could not be created!\\n";\n        return 1;\n    }\n\n    for (int i = 1; i <= 10; i++)\n    {\n        fp_out << i << " " << i * i << endl;\n    }\n    \n    fp_out.close();\n\n    // now we will open the file again to append more content\n    ofstream fp_app{"data.txt", ios::app};\n    // it is also possible to open the same fp_out\n    // fp_out.open("data.txt", ios::app};\n\n    if (!fp_app)\n    {\n        cerr << "File could not be created!\\n";\n        return 1;\n    }\n\n    for (int i = 11; i <= 15; i++)\n    {\n        fp_app << i << " " << i * i << endl;\n    }\n\n    fp_app.close();\n    return 0;\n}\n'),(0,a.kt)("h2",{id:"save-buffer"},"Save buffer"),(0,a.kt)("p",null,"Saving and reading buffer as binary is faster than IO using formatted data."),(0,a.kt)(l.Z,{language:"cpp",title:"src/c/file-io/04-save-buffer.c",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    int *base, x;\n    FILE *fp;\n\n    // allocate memory\n    base = (int *)malloc(sizeof(int) * 10);\n    if (base == NULL)\n    {\n        fprintf(stderr, "Failed to allocate memory.\\n");\n        exit(1);\n    }\n\n    // fill with values\n    for (x = 0; x < 10; x++)\n    {\n        *(base + x) = x * 10;\n    }\n\n    // open file\n    fp = fopen("numbers.bin", "w");\n    if (fp == NULL)\n    {\n        printf("File could not be created.\\n");\n        exit(1);\n    }\n\n    printf("%d\\n", *(base + 1));\n    // save buffer to file\n    int size;\n    size = fwrite(base, sizeof(int), 10, fp); \n    // this returns number of items\n    // the data is written in the binary format as it exit in the buffer\n    printf("%d\\n", size);\n    fclose(fp);\n    return 0;\n}\n'),(0,a.kt)("h2",{id:"read-buffer"},"Read buffer"),(0,a.kt)(l.Z,{language:"cpp",title:"src/c/file-io/05-read-buffer.c",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    int *base, x, r;\n    FILE *fp;\n\n    // allocate buffer\n    base = (int *)malloc(sizeof(int) * 10);\n    if (base == NULL)\n    {\n        fprintf(stderr, "Error while allocating memory.\\n");\n        exit(1);\n    }\n\n    // open file\n    fp = fopen("numbers.bin", "r");\n    if (fp == NULL)\n    {\n        fprintf(stderr, "Error reading file.\\n");\n        exit(1);\n    }\n\n    // fill the buffer\n    r = fread(base, sizeof(int), 10, fp);\n    if (r != 10)\n    {\n        fprintf(stderr, "Could not read 10 numbers.\\n");\n        exit(1);\n    }\n\n    // print values from buffer\n    for (int i = 0; i < 10; i++)\n    {\n        printf("%d\\n", *(base + i));\n    }\n\n    return 0;\n}\n'))}m.isMDXComponent=!0}}]);