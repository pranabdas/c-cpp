"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([["1816"],{3430:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>p,toc:()=>d,default:()=>b,metadata:()=>r,assets:()=>u,contentTitle:()=>c});var r=JSON.parse('{"id":"arrays-pointers/pointer-basics","title":"Pointer basics","description":"","source":"@site/docs/arrays-pointers/pointer-basics.mdx","sourceDirName":"arrays-pointers","slug":"/arrays-pointers/pointer-basics","permalink":"/c-cpp/arrays-pointers/pointer-basics","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/c-cpp/blob/main/docs/arrays-pointers/pointer-basics.mdx","tags":[],"version":"current","frontMatter":{"title":"Pointer basics"},"sidebar":"docs","previous":{"title":"Array basics","permalink":"/c-cpp/arrays-pointers/array-basics"},"next":{"title":"Pointer to function","permalink":"/c-cpp/arrays-pointers/pointer-to-function"}}'),a=t(4848),i=t(4429),o=t(4109),s=t(3703),l=t(4565);let p={title:"Pointer basics"},c=void 0,u={},d=[];function f(e){return(0,a.jsxs)(o.A,{groupId:"language",children:[(0,a.jsx)(s.A,{value:"C",children:(0,a.jsx)(l.A,{language:"c",title:"src/c/arrays-pointers/02-pointer.c",showLineNumbers:!0,children:'#include <stdio.h>\n\nint main()\n{\n    char a;\n    char *ptr; // declare a pointer for char type\n    a = \'A\';\n    printf("Value of variable a: %c\\n", a);\n    printf("Size of variable a: %lu byte(s)\\n", sizeof(a));\n\n    // now assign the address of variable a to pointer\n    ptr = &a;\n    printf("Address of ptr: %p\\n", ptr); // address of pointer\n    printf("Value of ptr: %c\\n", *ptr);  // value of pointer\n\n    int b = 456;\n    int *ptr_b;\n    ptr_b = &b;\n    printf("\\nValue of variable b: %d\\n", b);\n    printf("Address of variable b: %p\\n", ptr_b);\n    printf("Size of variable a: %lu byte(s)\\n", sizeof(b));\n\n    double c = 4.56;\n    double *ptr_c;\n    ptr_c = &c;\n    printf("\\nValue of variable c: %g\\n", c);\n    printf("Address of variable c: %p\\n", ptr_c);\n    printf("Size of variable a: %lu byte(s)\\n", sizeof(c));\n\n    return 0;\n}\n'})}),(0,a.jsx)(s.A,{value:"C++",children:(0,a.jsx)(l.A,{language:"cpp",title:"src/cpp/arrays-pointers/02-pointer.cpp",showLineNumbers:!0,children:'// pointers are variables for storing memory addresses\n// type of pointer is tied to the type of variable address it stores\n\n// (1) the pointer must be allocated,\n// (2) the pointee must be allocated,\n// (3) the pointer must be assigned to point to the pointee.\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int x = 10;   // declare and assign a integer variable\n    int *ptr;     // declare an integer pointer\n                  // Note that pointers do not declare memory\n                  // A pointer must be assigned a pointee, before the pointer\n                  // can be dereferenced. This is a major source of pointer bugs\n    ptr = &x;     // `&` operator returns the address of a variable\n    int y = *ptr; // dereference the pointer variable to get its value\n\n    // The assignment operation (=) between two pointers make them point to the\n    // same pointee. This is called sharing.\n\n    // the dereference operator * can appear on the left side of an assignment\n    // we can assign a new value to x by:\n    // *ptr = 20;\n\n    // pointer to const: a non-constant pointer cannot point to constant var\n    const int z = 100;\n    const int *ptr_z;\n    ptr_z = &z;\n    // ++ptr_z; // OK\n\n    // there can also be constant pointer\n    int cx = 20;\n    int *const pt_cx = &cx; // const pointer can only be initialized\n                            // it cannot be assigned later\n    // ++*pt_cx; // OK: cx is not constant\n    // ++pt_cx;  // Not allowed: pt_cx is constant\n\n    // there could also be const pointer to const variable\n    // const int *const ptConst;\n\n    // null pointer\n    int *ptr_null = 0;\n    // alternatively\n    // ptr_null = NULL;\n    // ptr_null = nullptr;\n    cout << "NULL pointer: " << ptr_null << endl;\n\n    // type void*\n    // if we do not know the type of the pointer variable, we can declare\n    // void *ptv;\n    // address of any type can be stored in `ptv` above\n\n    cout << "prt : " << ptr << endl;\n    cout << "y : " << y << endl;\n\n    x = 25;\n    // *ptr = 25; // same result as above\n    y = *ptr;\n    // dereferencing operator `*` returns the value stored in the address\n    cout << "y : " << y << endl;\n\n    // pointer to a pointer\n    // pointer is simply a variable that stores the address of a variable\n    // it is possible also to store the address of a pointer\n    // In numerical applications, pointer to pointers often used when we have\n    // multidimensional arrays (the chain of pointers i.e., pointer to pointer\n    // to pointer ... can go up to the dimension of arrays)\n    int xx;\n    int *pt_xx;\n    int **pt_pt_xx;\n\n    pt_xx = &xx;\n    pt_pt_xx = &pt_xx;\n\n    xx = 12;\n    cout << "Pointer to a pointer: xx = " << **pt_pt_xx << endl;\n\n    int arr[] = {10, 12, 15};\n    int *ptr_arr = arr;\n    // notice that we do not need `&` operator for the address of an array\n    // the above assignment is same as:\n    // int *ptr_arr &arr[0];\n\n    // from Expert C Programming: there is one difference between an array name\n    // and a pointer that must be kept in mind. A pointer is a variable, so \n    // pa=a and pa++ are legal. But an array name is not a variable; \n    // constructions like a=pa and a++ are illegal.\n\n    for (int i = 0; i < 3; i++)\n    {\n        cout << "arr[" << i << "] = " << *(ptr_arr + i) << endl;\n    }\n\n    // we can refer to the address of pointer as well\n    cout << "Address of ptr: " << &ptr << endl;\n\n    return 0;\n}\n'})})]})}function b(e={}){let{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(f,{...e})}):f(e)}},3703:function(e,n,t){t.d(n,{A:()=>i});var r=t(4848);t(6540);var a=t(9836);function i({children:e,hidden:n,className:t}){return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.A)("tabItem_Ymn6",t),hidden:n,children:e})}},4109:function(e,n,t){t.d(n,{A:()=>y});var r=t(4848),a=t(6540),i=t(9836),o=t(8251),s=t(6347),l=t(8004),p=t(5580),c=t(2213),u=t(5734);function d(e){return a.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){let{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function f({value:e,tabValues:n}){return n.some(n=>n.value===e)}var b=t(8864);function h({className:e,block:n,selectedValue:t,selectValue:a,tabValues:s}){let l=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.a_)(),c=e=>{let n=e.currentTarget,r=s[l.indexOf(n)].value;r!==t&&(p(n),a(r))},u=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{let t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{let t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1]}}n?.focus()};return(0,r.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":n},e),children:s.map(({value:e,label:n,attributes:a})=>(0,r.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{l.push(e)},onKeyDown:u,onClick:c,...a,className:(0,i.A)("tabs__item","tabItem_LNqP",a?.className,{"tabs__item--active":t===e}),children:n??e},e))})}function m({lazy:e,children:n,selectedValue:t}){let o=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){let e=o.find(e=>e.props.value===t);return e?(0,a.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,r.jsx)("div",{className:"margin-top--md",children:o.map((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==t}))})}function v(e){let n=function(e){let{defaultValue:n,queryString:t=!1,groupId:r}=e,i=function(e){let{values:n,children:t}=e;return(0,a.useMemo)(()=>{let e=n??d(t).map(({props:{value:e,label:n,attributes:t,default:r}})=>({value:e,label:n,attributes:t,default:r})),r=(0,c.XI)(e,(e,n)=>e.value===n.value);if(r.length>0)throw Error(`Docusaurus error: Duplicate values "${r.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`);return e},[n,t])}(e),[o,b]=(0,a.useState)(()=>(function({defaultValue:e,tabValues:n}){if(0===n.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!f({value:e,tabValues:n}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}let t=n.find(e=>e.default)??n[0];if(!t)throw Error("Unexpected error: 0 tabValues");return t.value})({defaultValue:n,tabValues:i})),[h,m]=function({queryString:e=!1,groupId:n}){let t=(0,s.W6)(),r=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,p.aZ)(r),(0,a.useCallback)(e=>{if(!r)return;let n=new URLSearchParams(t.location.search);n.set(r,e),t.replace({...t.location,search:n.toString()})},[r,t])]}({queryString:t,groupId:r}),[v,y]=function({groupId:e}){let n=e?`docusaurus.tab.${e}`:null,[t,r]=(0,u.Dv)(n);return[t,(0,a.useCallback)(e=>{n&&r.set(e)},[n,r])]}({groupId:r}),x=(()=>{let e=h??v;return f({value:e,tabValues:i})?e:null})();return(0,l.A)(()=>{x&&b(x)},[x]),{selectedValue:o,selectValue:(0,a.useCallback)(e=>{if(!f({value:e,tabValues:i}))throw Error(`Can't select invalid tab value=${e}`);b(e),m(e),y(e)},[m,y,i]),tabValues:i}}(e);return(0,r.jsxs)("div",{className:(0,i.A)("tabs-container","tabList__CuJ"),children:[(0,r.jsx)(h,{...n,...e}),(0,r.jsx)(m,{...n,...e})]})}function y(e){let n=(0,b.A)();return(0,r.jsx)(v,{...e,children:d(e.children)},String(n))}}}]);