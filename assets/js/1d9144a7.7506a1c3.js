"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[453],{5162:(e,n,a)=>{a.d(n,{Z:()=>l});var t=a(7294),r=a(6010);const s="tabItem_Ymn6";function l(e){let{children:n,hidden:a,className:l}=e;return t.createElement("div",{role:"tabpanel",className:(0,r.Z)(s,l),hidden:a},n)}},5488:(e,n,a)=>{a.d(n,{Z:()=>b});var t=a(7462),r=a(7294),s=a(6010),l=a(2389),i=a(7392),o=a(7094),c=a(2466);const u="tabList__CuJ",d="tabItem_LNqP";function p(e){var n;const{lazy:a,block:l,defaultValue:p,values:b,groupId:m,className:g}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=b??f.map((e=>{let{props:{value:n,label:a,attributes:t}}=e;return{value:n,label:a,attributes:t}})),y=(0,i.l)(h,((e,n)=>e.value===n.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===p?p:p??(null==(n=f.find((e=>e.props.default)))?void 0:n.props.value)??f[0].props.value;if(null!==v&&!h.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:T}=(0,o.U)(),[w,x]=(0,r.useState)(v),Z=[],{blockElementScrollPositionUntilNextRender:C}=(0,c.o5)();if(null!=m){const e=k[m];null!=e&&e!==w&&h.some((n=>n.value===e))&&x(e)}const I=e=>{const n=e.currentTarget,a=Z.indexOf(n),t=h[a].value;t!==w&&(C(n),x(t),null!=m&&T(m,String(t)))},N=e=>{var n;let a=null;switch(e.key){case"Enter":I(e);break;case"ArrowRight":{const n=Z.indexOf(e.currentTarget)+1;a=Z[n]??Z[0];break}case"ArrowLeft":{const n=Z.indexOf(e.currentTarget)-1;a=Z[n]??Z[Z.length-1];break}}null==(n=a)||n.focus()};return r.createElement("div",{className:(0,s.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":l},g)},h.map((e=>{let{value:n,label:a,attributes:l}=e;return r.createElement("li",(0,t.Z)({role:"tab",tabIndex:w===n?0:-1,"aria-selected":w===n,key:n,ref:e=>Z.push(e),onKeyDown:N,onClick:I},l,{className:(0,s.Z)("tabs__item",d,null==l?void 0:l.className,{"tabs__item--active":w===n})}),a??n)}))),a?(0,r.cloneElement)(f.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==w})))))}function b(e){const n=(0,l.Z)();return r.createElement(p,(0,t.Z)({key:String(n)},e))}},1770:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>u,toc:()=>p});var t=a(7462),r=(a(7294),a(3905)),s=a(5488),l=a(5162),i=a(814);const o={title:"Control flow"},c=void 0,u={unversionedId:"basics/control-flow",id:"basics/control-flow",title:"Control flow",description:"if-else",source:"@site/docs/basics/control-flow.mdx",sourceDirName:"basics",slug:"/basics/control-flow",permalink:"/c-cpp/basics/control-flow",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/basics/control-flow.mdx",tags:[],version:"current",frontMatter:{title:"Control flow"},sidebar:"docs",previous:{title:"Basic data types",permalink:"/c-cpp/basics/data-types"},next:{title:"Loop",permalink:"/c-cpp/basics/loop"}},d={},p=[{value:"if-else",id:"if-else",level:2},{value:"switch",id:"switch",level:2},{value:"Ternary operator",id:"ternary-operator",level:2}],b={toc:p};function m(e){let{components:n,...a}=e;return(0,r.kt)("wrapper",(0,t.Z)({},b,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"if-else"},"if-else"),(0,r.kt)(s.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"C",mdxType:"TabItem"},(0,r.kt)(i.Z,{language:"c",title:"src/c/basics/03-if-else.c",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <stdio.h>\n\nint main()\n{\n    int age = 0;\n\n    printf("Please enter your age in years: ");\n    scanf("%d", &age);\n\n    if (age <= 18)\n        printf("You are not an adult.\\n");\n    else if (age < 65)\n        printf("You are an adult.\\n");\n    else\n        printf("You are a senior citizen.\\n");\n\n    return 0;\n}\n')),(0,r.kt)(l.Z,{value:"C++",mdxType:"TabItem"},(0,r.kt)(i.Z,{language:"cpp",title:"src/cpp/basics/03-if-else.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int a = 6;\n    int b = 5;\n\n    if (a > b)\n    {\n        cout << "a is greater than b" << endl;\n    }\n    else if (a < b)\n    {\n        cout << "a is less than b" << endl;\n    }\n    else\n    {\n        cout << "a is equal to b" << endl;\n    }\n\n    return 0;\n}\n'))),(0,r.kt)("h2",{id:"switch"},"switch"),(0,r.kt)(s.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"C",mdxType:"TabItem"},(0,r.kt)(i.Z,{language:"c",title:"src/c/basics/03-switch.c",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <stdio.h>\n\nint main()\n{\n    int age = 0, category;\n\n    printf("Please enter your age in years: ");\n    scanf("%d", &age);\n\n    if (age < 0)\n        category = 0;\n    else if (age <= 18)\n        category = 1;\n    else if (age < 65)\n        category = 2;\n    else\n        category = 3;\n\n    switch (category)\n    {\n    case 0:\n        printf("Invalid age.\\n");\n        break;\n    case 1:\n        printf("You are not an adult.\\n");\n        break;\n    case 2:\n        printf("You are an adult.\\n");\n        break;\n    case 3:\n        printf("You are a senior citizen.\\n");\n        break;\n\n    default:\n        printf("Should not be necessary here.\\n");\n        break;\n    }\n\n    return 0;\n}\n')),(0,r.kt)(l.Z,{value:"C++",mdxType:"TabItem"},(0,r.kt)(i.Z,{language:"cpp",title:"src/cpp/basics/03-switch.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int age = 0, category;\n\n    cout << "Please enter your age in years: ";\n    cin >> age;\n\n    if (age < 0)\n        category = 0;\n    else if (age <= 18)\n        category = 1;\n    else if (age < 65)\n        category = 2;\n    else\n        category = 3;\n\n    switch (category)\n    {\n    case 0:\n        cout << "Invalid age." << endl;\n        break;\n    case 1:\n        cout << "You are not an adult." << endl;\n        break;\n    case 2:\n        cout << "You are an adult." << endl;\n        break;\n    case 3:\n        cout << "You are a senior citizen." << endl;\n        break;\n\n    default:\n        cout << "Should not be necessary here." << endl;\n        break;\n    }\n\n    return 0;\n}\n'))),(0,r.kt)("h2",{id:"ternary-operator"},"Ternary operator"),(0,r.kt)(s.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"C",mdxType:"TabItem"},(0,r.kt)(i.Z,{language:"c",title:"src/c/basics/03-ternary.c",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <stdio.h>\n\nint main()\n{\n    int input1, input2, big;\n    printf("Enter two integer numbers (separated by space): ");\n    scanf("%d%d", &input1, &input2);\n\n    big = (input1 > input2) ? input1 : input2;\n\n    printf("Biggest number = %d\\n", big);\n    return 0;\n}\n')),(0,r.kt)(l.Z,{value:"C++",mdxType:"TabItem"},(0,r.kt)(i.Z,{language:"cpp",title:"src/cpp/basics/03-ternary.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int x = 5;\n    int y = 9;\n\n    const char *s = x > y ? "Yes" : "No";\n\n    cout << s << endl;\n    return 0;\n}\n'))))}m.isMDXComponent=!0}}]);