"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[7122],{3039:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>d,metadata:()=>c,toc:()=>s});var a=e(7462),r=(e(7294),e(3905)),u=e(814);const d={title:"enum"},o=void 0,c={unversionedId:"data-structure/enum",id:"data-structure/enum",title:"enum",description:"",source:"@site/docs/data-structure/enum.mdx",sourceDirName:"data-structure",slug:"/data-structure/enum",permalink:"/c-cpp/data-structure/enum",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/data-structure/enum.mdx",tags:[],version:"current",frontMatter:{title:"enum"},sidebar:"docs",previous:{title:"Struct",permalink:"/c-cpp/data-structure/struct"},next:{title:"Complex number",permalink:"/c-cpp/data-structure/complex-number"}},i={},s=[],p={toc:s};function m(n){let{components:t,...e}=n;return(0,r.kt)("wrapper",(0,a.Z)({},p,e,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(u.Z,{language:"c",title:"src/c/data-structure/02-enum.c",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <stdio.h>\n\nenum day\n{\n    SUN,\n    MON,\n    TUE,\n    WED,\n    THU,\n    FRI,\n    SAT\n};\n\n// if you do not want to avoid the keyword enum all the time\n// typedef enum day day;\n// now we can write \'day today FRI;\' instead of \'enum day today FRI;\n\nvoid print_day(enum day d)\n{\n    switch (d)\n    {\n    case SUN:\n        printf("Sunday");\n        break;\n    case MON:\n        printf("Monday");\n        break;\n    case TUE:\n        printf("Tuesday");\n        break;\n    case WED:\n        printf("Wednesday");\n        break;\n    case THU:\n        printf("Thursday");\n        break;\n    case FRI:\n        printf("Friday");\n        break;\n    case SAT:\n        printf("Saturday");\n        break;\n    default:\n        printf("Something went wrong!");\n        break;\n    }\n}\n\nenum day tomorrow(enum day d)\n{\n    // internally enum evaluates the index only\n    return ((d + 1) % 7);\n}\n\nint main()\n{\n    enum day today = FRI;\n    printf("Today is ");\n    // we can not format enum day type\n    print_day(FRI);\n    printf(".\\n");\n\n    printf("Tomorrow is ");\n    print_day(tomorrow(today));\n    printf(".\\n");\n    return 0;\n}\n'))}m.isMDXComponent=!0}}]);