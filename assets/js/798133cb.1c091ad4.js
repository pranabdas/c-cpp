"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[3714],{5162:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(7294),a=n(6010);const o={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o.tabItem,i),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>w});var r=n(7462),a=n(7294),o=n(6010),i=n(2466),s=n(6550),l=n(1980),c=n(7392),u=n(12);function p(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function d(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function b(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const r=(0,s.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(o),(0,a.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(r.location.search);t.set(o,e),r.replace({...r.location,search:t.toString()})}),[o,r])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,o=d(e),[i,s]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!b({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:o}))),[l,c]=f({queryString:n,groupId:r}),[p,m]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,u.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:r}),h=(()=>{const e=l??p;return b({value:e,tabValues:o})?e:null})();(0,a.useLayoutEffect)((()=>{h&&s(h)}),[h]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!b({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),c(e),m(e)}),[c,m,o]),tabValues:o}}var h=n(2389);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:t,block:n,selectedValue:s,selectValue:l,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.o5)(),d=e=>{const t=e.currentTarget,n=u.indexOf(t),r=c[n].value;r!==s&&(p(t),l(r))},b=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:i}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>u.push(e),onKeyDown:b,onClick:d},i,{className:(0,o.Z)("tabs__item",v.tabItem,i?.className,{"tabs__item--active":s===t})}),n??t)})))}function g(e){let{lazy:t,children:n,selectedValue:r}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function x(e){const t=m(e);return a.createElement("div",{className:(0,o.Z)("tabs-container",v.tabList)},a.createElement(y,(0,r.Z)({},e,t)),a.createElement(g,(0,r.Z)({},e,t)))}function w(e){const t=(0,h.Z)();return a.createElement(x,(0,r.Z)({key:String(t)},e))}},5942:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>b,contentTitle:()=>p,default:()=>v,frontMatter:()=>u,metadata:()=>d,toc:()=>f});var r=n(7462),a=(n(7294),n(3905)),o=n(4866),i=n(5162),s=n(614);const l='#include <stdio.h>\n\nint main()\n{\n    char a;\n    char *ptr; // declare a pointer for char type\n    a = \'A\';\n    printf("Value of variable a: %c\\n", a);\n    printf("Size of variable a: %lu byte(s)\\n", sizeof(a));\n\n    // now assign the address of variable a to pointer\n    ptr = &a;\n    printf("Address of ptr: %p\\n", ptr); // address of pointer\n    printf("Value of ptr: %c\\n", *ptr);  // value of pointer\n\n    int b = 456;\n    int *ptr_b;\n    ptr_b = &b;\n    printf("\\nValue of variable b: %d\\n", b);\n    printf("Address of variable b: %p\\n", ptr_b);\n    printf("Size of variable a: %lu byte(s)\\n", sizeof(b));\n\n    double c = 4.56;\n    double *ptr_c;\n    ptr_c = &c;\n    printf("\\nValue of variable c: %g\\n", c);\n    printf("Address of variable c: %p\\n", ptr_c);\n    printf("Size of variable a: %lu byte(s)\\n", sizeof(c));\n\n    return 0;\n}\n',c='// pointers are variables for storing memory addresses\n// type of pointer is tied to the type of variable address it stores\n\n// (1) the pointer must be allocated,\n// (2) the pointee must be allocated,\n// (3) the pointer must be assigned to point to the pointee.\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int x = 10;   // declare and assign a integer variable\n    int *ptr;     // declare an integer pointer\n                  // Note that pointers do not declare memory\n                  // A pointer must be assigned a pointee, before the pointer\n                  // can be dereferenced. This is a major source of pointer bugs\n    ptr = &x;     // `&` operator returns the address of a variable\n    int y = *ptr; // dereference the pointer variable to get its value\n\n    // The assignment operation (=) between two pointers make them point to the\n    // same pointee. This is called sharing.\n\n    // the dereference operator * can appear on the left side of an assignment\n    // we can assign a new value to x by:\n    // *ptr = 20;\n\n    // pointer to const: a non-constant pointer cannot point to constant var\n    const int z = 100;\n    const int *ptr_z;\n    ptr_z = &z;\n    // ++ptr_z; // OK\n\n    // there can also be constant pointer\n    int cx = 20;\n    int *const pt_cx = &cx; // const pointer can only be initialized\n                            // it cannot be assigned later\n    // ++*pt_cx; // OK: cx is not constant\n    // ++pt_cx;  // Not allowed: pt_cx is constant\n\n    // there could also be const pointer to const variable\n    // const int *const ptConst;\n\n    // null pointer\n    int *ptr_null = 0;\n    // alternatively\n    // ptr_null = NULL;\n    // ptr_null = nullptr;\n    cout << "NULL pointer: " << ptr_null << endl;\n\n    // type void*\n    // if we do not know the type of the pointer variable, we can declare\n    // void *ptv;\n    // address of any type can be stored in `ptv` above\n\n    cout << "prt : " << ptr << endl;\n    cout << "y : " << y << endl;\n\n    x = 25;\n    // *ptr = 25; // same result as above\n    y = *ptr;\n    // dereferencing operator `*` returns the value stored in the address\n    cout << "y : " << y << endl;\n\n    // pointer to a pointer\n    // pointer is simply a variable that stores the address of a variable\n    // it is possible also to store the address of a pointer\n    // In numerical applications, pointer to pointers often used when we have\n    // multidimensional arrays (the chain of pointers i.e., pointer to pointer\n    // to pointer ... can go up to the dimension of arrays)\n    int xx;\n    int *pt_xx;\n    int **pt_pt_xx;\n\n    pt_xx = &xx;\n    pt_pt_xx = &pt_xx;\n\n    xx = 12;\n    cout << "Pointer to a pointer: xx = " << **pt_pt_xx << endl;\n\n    int arr[] = {10, 12, 15};\n    int *ptr_arr = arr;\n    // notice that we do not need `&` operator for the address of an array\n    // the above assignment is same as:\n    // int *ptr_arr &arr[0];\n\n    // from Expert C Programming: there is one difference between an array name\n    // and a pointer that must be kept in mind. A pointer is a variable, so \n    // pa=a and pa++ are legal. But an array name is not a variable; \n    // constructions like a=pa and a++ are illegal.\n\n    for (int i = 0; i < 3; i++)\n    {\n        cout << "arr[" << i << "] = " << *(ptr_arr + i) << endl;\n    }\n\n    // we can refer to the address of pointer as well\n    cout << "Address of ptr: " << &ptr << endl;\n\n    return 0;\n}\n',u={title:"Pointer basics"},p=void 0,d={unversionedId:"arrays-pointers/pointer-basics",id:"arrays-pointers/pointer-basics",title:"Pointer basics",description:"",source:"@site/docs/arrays-pointers/pointer-basics.mdx",sourceDirName:"arrays-pointers",slug:"/arrays-pointers/pointer-basics",permalink:"/c-cpp/arrays-pointers/pointer-basics",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/arrays-pointers/pointer-basics.mdx",tags:[],version:"current",frontMatter:{title:"Pointer basics"},sidebar:"docs",previous:{title:"Array basics",permalink:"/c-cpp/arrays-pointers/array-basics"},next:{title:"Pointer to function",permalink:"/c-cpp/arrays-pointers/pointer-to-function"}},b={},f=[],m={toc:f},h="wrapper";function v(e){let{components:t,...n}=e;return(0,a.kt)(h,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"C",mdxType:"TabItem"},(0,a.kt)(s.Z,{language:"c",title:"src/c/arrays-pointers/02-pointer.c",showLineNumbers:!0,mdxType:"CodeBlock"},l)),(0,a.kt)(i.Z,{value:"C++",mdxType:"TabItem"},(0,a.kt)(s.Z,{language:"cpp",title:"src/cpp/arrays-pointers/02-pointer.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},c))))}v.isMDXComponent=!0}}]);