"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([["5889"],{6579:function(s,e,n){n.r(e),n.d(e,{frontMatter:()=>l,default:()=>d,toc:()=>h,metadata:()=>a,assets:()=>m,contentTitle:()=>c});var a=JSON.parse('{"id":"algorithms/sorting","title":"Sorting algorithms","description":"Computers spend a lot of time sorting while processing data. Once sorting is","source":"@site/docs/algorithms/sorting.mdx","sourceDirName":"algorithms","slug":"/algorithms/sorting","permalink":"/c-cpp/algorithms/sorting","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/c-cpp/blob/main/docs/algorithms/sorting.mdx","tags":[],"version":"current","frontMatter":{"title":"Sorting algorithms","sidebar_label":"Sorting"},"sidebar":"docs","previous":{"title":"Complexity analysis","permalink":"/c-cpp/algorithms/big-o"},"next":{"title":"Data structure","permalink":"/c-cpp/category/data-structure"}}'),t=n(5893),i=n(65),r=n(2834);let l={title:"Sorting algorithms",sidebar_label:"Sorting"},c=void 0,m={},h=[{value:"Permutation sort",id:"permutation-sort",level:3},{value:"Selection sort",id:"selection-sort",level:3},{value:"Insertion sort",id:"insertion-sort",level:3},{value:"Merge sort",id:"merge-sort",level:3},{value:"Linear sort",id:"linear-sort",level:3},{value:"Resources",id:"resources",level:3}];function o(s){let e={a:"a",admonition:"admonition",annotation:"annotation",code:"code",h3:"h3",li:"li",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",msup:"msup",p:"p",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,i.a)(),...s.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:"Computers spend a lot of time sorting while processing data. Once sorting is\ndone, many other problems becomes very easy. It is also one of the most studied\nproblem in computer science. Many of the interesting ideas such as\ndive-and-conquer, randomized algorithms, lower bounds etc. can be found in the\ncontext of sorting. Here we will look into some of the sorting algorithms and\nhow they scales with increasing problem size."}),"\n",(0,t.jsx)(e.h3,{id:"permutation-sort",children:"Permutation sort"}),"\n",(0,t.jsxs)(e.p,{children:["Given an array, we create all possible permutations of the array items, then\ncheck if the one of those permutations are sorted. This algorithm is extremely\ninefficient, there are ",(0,t.jsxs)(e.span,{className:"katex",children:[(0,t.jsx)(e.span,{className:"katex-mathml",children:(0,t.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(e.semantics,{children:[(0,t.jsxs)(e.mrow,{children:[(0,t.jsx)(e.mi,{children:"n"}),(0,t.jsx)(e.mo,{stretchy:"false",children:"!"})]}),(0,t.jsx)(e.annotation,{encoding:"application/x-tex",children:"n!"})]})})}),(0,t.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(e.span,{className:"base",children:[(0,t.jsx)(e.span,{className:"strut",style:{height:"0.6944em"}}),(0,t.jsx)(e.span,{className:"mord mathnormal",children:"n"}),(0,t.jsx)(e.span,{className:"mclose",children:"!"})]})})]})," possible permutations of ",(0,t.jsxs)(e.span,{className:"katex",children:[(0,t.jsx)(e.span,{className:"katex-mathml",children:(0,t.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(e.semantics,{children:[(0,t.jsx)(e.mrow,{children:(0,t.jsx)(e.mi,{children:"n"})}),(0,t.jsx)(e.annotation,{encoding:"application/x-tex",children:"n"})]})})}),(0,t.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(e.span,{className:"base",children:[(0,t.jsx)(e.span,{className:"strut",style:{height:"0.4306em"}}),(0,t.jsx)(e.span,{className:"mord mathnormal",children:"n"})]})})]})," items. Even for a\nrelatively small number of input size 20, ",(0,t.jsxs)(e.span,{className:"katex",children:[(0,t.jsx)(e.span,{className:"katex-mathml",children:(0,t.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(e.semantics,{children:[(0,t.jsxs)(e.mrow,{children:[(0,t.jsx)(e.mo,{stretchy:"false",children:"("}),(0,t.jsx)(e.mn,{children:"20"}),(0,t.jsx)(e.mo,{stretchy:"false",children:")"}),(0,t.jsx)(e.mo,{stretchy:"false",children:"!"}),(0,t.jsx)(e.mo,{children:"\u2248"}),(0,t.jsx)(e.mn,{children:"2"}),(0,t.jsx)(e.mo,{children:"\xd7"}),(0,t.jsxs)(e.msup,{children:[(0,t.jsx)(e.mn,{children:"10"}),(0,t.jsx)(e.mn,{children:"18"})]})]}),(0,t.jsx)(e.annotation,{encoding:"application/x-tex",children:"(20)! \\approx 2 \\times 10^{18}"})]})})}),(0,t.jsxs)(e.span,{className:"katex-html","aria-hidden":"true",children:[(0,t.jsxs)(e.span,{className:"base",children:[(0,t.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.jsx)(e.span,{className:"mopen",children:"("}),(0,t.jsx)(e.span,{className:"mord",children:"20"}),(0,t.jsx)(e.span,{className:"mclose",children:")!"}),(0,t.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.jsx)(e.span,{className:"mrel",children:"\u2248"}),(0,t.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,t.jsxs)(e.span,{className:"base",children:[(0,t.jsx)(e.span,{className:"strut",style:{height:"0.7278em",verticalAlign:"-0.0833em"}}),(0,t.jsx)(e.span,{className:"mord",children:"2"}),(0,t.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.jsx)(e.span,{className:"mbin",children:"\xd7"}),(0,t.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,t.jsxs)(e.span,{className:"base",children:[(0,t.jsx)(e.span,{className:"strut",style:{height:"0.8141em"}}),(0,t.jsx)(e.span,{className:"mord",children:"1"}),(0,t.jsxs)(e.span,{className:"mord",children:[(0,t.jsx)(e.span,{className:"mord",children:"0"}),(0,t.jsx)(e.span,{className:"msupsub",children:(0,t.jsx)(e.span,{className:"vlist-t",children:(0,t.jsx)(e.span,{className:"vlist-r",children:(0,t.jsx)(e.span,{className:"vlist",style:{height:"0.8141em"},children:(0,t.jsxs)(e.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,t.jsx)(e.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(e.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(e.span,{className:"mord mtight",children:(0,t.jsx)(e.span,{className:"mord mtight",children:"18"})})})]})})})})})]})]})]})]}),". For\neach step, we also need about ",(0,t.jsxs)(e.span,{className:"katex",children:[(0,t.jsx)(e.span,{className:"katex-mathml",children:(0,t.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(e.semantics,{children:[(0,t.jsxs)(e.mrow,{children:[(0,t.jsx)(e.mi,{mathvariant:"script",children:"O"}),(0,t.jsx)(e.mo,{stretchy:"false",children:"("}),(0,t.jsx)(e.mi,{children:"n"}),(0,t.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,t.jsx)(e.annotation,{encoding:"application/x-tex",children:"\\mathcal{O}(n)"})]})})}),(0,t.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(e.span,{className:"base",children:[(0,t.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.jsx)(e.span,{className:"mord mathcal",style:{marginRight:"0.02778em"},children:"O"}),(0,t.jsx)(e.span,{className:"mopen",children:"("}),(0,t.jsx)(e.span,{className:"mord mathnormal",children:"n"}),(0,t.jsx)(e.span,{className:"mclose",children:")"})]})})]})," checks to find out if one of the\npermutations is sorted."]}),"\n",(0,t.jsx)(e.h3,{id:"selection-sort",children:"Selection sort"}),"\n",(0,t.jsx)(e.p,{children:"Here is how the selection sort works: say we are given the following array to\nsort: [5, 8, 2, 3, 7, 9]"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Step 1:"})," find the biggest element in first (n - 1) element and swap it with\nthe last element if it is bigger than the last element else do nothing"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Step 2:"})," find biggest element in first (n - 2) element, and swap it with\n(n-1)th element if it is bigger"]}),"\n",(0,t.jsx)(e.p,{children:"Below is an implementation in C++."}),"\n","\n",(0,t.jsx)(r.Z,{language:"cpp",title:"src/cpp/misc/selection_sort.cpp",showLineNumbers:!0,children:'#include <iostream>\n#include <tuple>\nusing namespace std;\n\ntuple<int, int> find_biggest(int arr[], int size)\n{\n    int biggest = arr[0];\n    int id = 0;\n\n    for (int i = 0; i < size; i++)\n    {\n        if (arr[i] > biggest)\n        {\n            biggest = arr[i];\n            id = i;\n        }\n    }\n\n    return make_tuple(biggest, id);\n}\n\nint main()\n{\n    int arr[] = {5, 8, 2, 3, 7, 4};\n    const int SIZE = 6;\n\n    for (int i = 1; i < SIZE; i++)\n    {\n        int biggest, id;\n        tie(biggest, id) = find_biggest(arr, SIZE - i);\n\n        if (biggest > arr[SIZE - i])\n        {\n            int tmp = arr[SIZE - i];\n            arr[SIZE - i] = biggest;\n            arr[id] = tmp;\n        }\n    }\n\n    for (int i = 0; i < SIZE; i++)\n    {\n        cout << arr[i] << "  ";\n    }\n    cout << endl;\n\n    return 0;\n}\n'}),"\n",(0,t.jsx)(e.h3,{id:"insertion-sort",children:"Insertion sort"}),"\n","\n",(0,t.jsx)(r.Z,{language:"cpp",title:"src/cpp/misc/insertion_sort.cpp",showLineNumbers:!0,children:'#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int arr[] = {5, 8, 2, 3, 7, 4};\n    const int SIZE = 6;\n\n    for (int i = 1; i < SIZE; i++)\n    {\n        int j = i;\n        while (j > 0 && arr[j] < arr[j - 1])\n        {\n            int tmp = arr[j];\n            arr[j] = arr[j - 1];\n            arr[j - 1] = tmp;\n            j--;\n        }\n    }\n\n    for (int i = 0; i < SIZE; i++)\n    {\n        cout << arr[i];\n\n        if (i != SIZE - 1)\n        {\n            cout << ", ";\n        }\n    }\n    cout << endl;\n\n    return 0;\n}\n'}),"\n",(0,t.jsxs)(e.p,{children:["Both selection sort and insertion sort has time complexity ",(0,t.jsxs)(e.span,{className:"katex",children:[(0,t.jsx)(e.span,{className:"katex-mathml",children:(0,t.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(e.semantics,{children:[(0,t.jsxs)(e.mrow,{children:[(0,t.jsx)(e.mi,{mathvariant:"script",children:"O"}),(0,t.jsx)(e.mo,{stretchy:"false",children:"("}),(0,t.jsxs)(e.msup,{children:[(0,t.jsx)(e.mi,{children:"n"}),(0,t.jsx)(e.mn,{children:"2"})]}),(0,t.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,t.jsx)(e.annotation,{encoding:"application/x-tex",children:"\\mathcal{O}(n^2)"})]})})}),(0,t.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(e.span,{className:"base",children:[(0,t.jsx)(e.span,{className:"strut",style:{height:"1.0641em",verticalAlign:"-0.25em"}}),(0,t.jsx)(e.span,{className:"mord mathcal",style:{marginRight:"0.02778em"},children:"O"}),(0,t.jsx)(e.span,{className:"mopen",children:"("}),(0,t.jsxs)(e.span,{className:"mord",children:[(0,t.jsx)(e.span,{className:"mord mathnormal",children:"n"}),(0,t.jsx)(e.span,{className:"msupsub",children:(0,t.jsx)(e.span,{className:"vlist-t",children:(0,t.jsx)(e.span,{className:"vlist-r",children:(0,t.jsx)(e.span,{className:"vlist",style:{height:"0.8141em"},children:(0,t.jsxs)(e.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,t.jsx)(e.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(e.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(e.span,{className:"mord mtight",children:"2"})})]})})})})})]}),(0,t.jsx)(e.span,{className:"mclose",children:")"})]})})]}),"."]}),"\n",(0,t.jsx)(e.h3,{id:"merge-sort",children:"Merge sort"}),"\n","\n",(0,t.jsx)(r.Z,{language:"cpp",title:"src/cpp/misc/merge_sort.cpp",showLineNumbers:!0,children:'#include <iostream>\nusing namespace std;\n\nvoid print_array(int arr[], const int SIZE)\n{\n    for (int i = 0; i < SIZE; i++)\n    {\n        cout << arr[i];\n        if (i < SIZE - 1)\n        {\n            cout << ", ";\n        }\n    }\n    cout << endl;\n}\n\nvoid merge(int arr[], const int start, const int center, const int end)\n{\n    // temporary arrays\n    auto *left_array = new int[center - start];\n    auto *right_array = new int[end - center];\n\n    // copy data to temp arrays\n    for (auto i = 0; i < center - start; i++)\n    {\n        left_array[i] = arr[start + i];\n    }\n\n    for (auto i = 0; i < end - center; i++)\n    {\n        right_array[i] = arr[center + i];\n    }\n\n    // merge\n    int i = 0;\n    int j = 0;\n    int left = start;\n    while (left < end)\n    {\n        if ((j >= end - center) || ((i < center - start) && (left_array[i] < right_array[j])))\n        {\n            arr[left] = left_array[i];\n            i++;\n        }\n        else\n        {\n            arr[left] = right_array[j];\n            j++;\n        }\n        left++;\n    }\n\n    delete[] left_array;\n    delete[] right_array;\n}\n\nvoid merge_sort(int arr[], int start, int end)\n{\n    if (end - start > 1)\n    {\n        auto center = (start + end + 1) / 2;\n        merge_sort(arr, start, center);\n        merge_sort(arr, center, end);\n        merge(arr, start, center, end);\n    }\n}\n\nint main()\n{\n    int arr[] = {5, 8, 2, 3, 7, 4};\n    const int SIZE = 6;\n\n    merge_sort(arr, 0, SIZE);\n    print_array(arr, 6);\n\n    return 0;\n}\n'}),"\n",(0,t.jsxs)(e.p,{children:["Merge sort has time complexity ",(0,t.jsxs)(e.span,{className:"katex",children:[(0,t.jsx)(e.span,{className:"katex-mathml",children:(0,t.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(e.semantics,{children:[(0,t.jsxs)(e.mrow,{children:[(0,t.jsx)(e.mi,{mathvariant:"script",children:"O"}),(0,t.jsx)(e.mo,{stretchy:"false",children:"("}),(0,t.jsx)(e.mi,{children:"n"}),(0,t.jsx)(e.mi,{children:"log"}),(0,t.jsx)(e.mo,{children:"\u2061"}),(0,t.jsx)(e.mi,{children:"n"}),(0,t.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,t.jsx)(e.annotation,{encoding:"application/x-tex",children:"\\mathcal{O}(n \\log n)"})]})})}),(0,t.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(e.span,{className:"base",children:[(0,t.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.jsx)(e.span,{className:"mord mathcal",style:{marginRight:"0.02778em"},children:"O"}),(0,t.jsx)(e.span,{className:"mopen",children:"("}),(0,t.jsx)(e.span,{className:"mord mathnormal",children:"n"}),(0,t.jsx)(e.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,t.jsxs)(e.span,{className:"mop",children:["lo",(0,t.jsx)(e.span,{style:{marginRight:"0.01389em"},children:"g"})]}),(0,t.jsx)(e.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,t.jsx)(e.span,{className:"mord mathnormal",children:"n"}),(0,t.jsx)(e.span,{className:"mclose",children:")"})]})})]}),". Note that for any\ncomparison model, there are ",(0,t.jsxs)(e.span,{className:"katex",children:[(0,t.jsx)(e.span,{className:"katex-mathml",children:(0,t.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(e.semantics,{children:[(0,t.jsxs)(e.mrow,{children:[(0,t.jsx)(e.mi,{children:"n"}),(0,t.jsx)(e.mo,{stretchy:"false",children:"!"})]}),(0,t.jsx)(e.annotation,{encoding:"application/x-tex",children:"n!"})]})})}),(0,t.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(e.span,{className:"base",children:[(0,t.jsx)(e.span,{className:"strut",style:{height:"0.6944em"}}),(0,t.jsx)(e.span,{className:"mord mathnormal",children:"n"}),(0,t.jsx)(e.span,{className:"mclose",children:"!"})]})})]})," possible outcomes for a problem size ",(0,t.jsxs)(e.span,{className:"katex",children:[(0,t.jsx)(e.span,{className:"katex-mathml",children:(0,t.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(e.semantics,{children:[(0,t.jsx)(e.mrow,{children:(0,t.jsx)(e.mi,{children:"n"})}),(0,t.jsx)(e.annotation,{encoding:"application/x-tex",children:"n"})]})})}),(0,t.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(e.span,{className:"base",children:[(0,t.jsx)(e.span,{className:"strut",style:{height:"0.4306em"}}),(0,t.jsx)(e.span,{className:"mord mathnormal",children:"n"})]})})]}),".\nMinimum height of such as descision tree would be ",(0,t.jsxs)(e.span,{className:"katex",children:[(0,t.jsx)(e.span,{className:"katex-mathml",children:(0,t.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(e.semantics,{children:[(0,t.jsxs)(e.mrow,{children:[(0,t.jsx)(e.mi,{children:"log"}),(0,t.jsx)(e.mo,{children:"\u2061"}),(0,t.jsx)(e.mo,{stretchy:"false",children:"("}),(0,t.jsx)(e.mi,{children:"n"}),(0,t.jsx)(e.mo,{stretchy:"false",children:"!"}),(0,t.jsx)(e.mo,{stretchy:"false",children:")"}),(0,t.jsx)(e.mo,{children:"\u2248"}),(0,t.jsx)(e.mi,{children:"n"}),(0,t.jsx)(e.mi,{children:"log"}),(0,t.jsx)(e.mo,{children:"\u2061"}),(0,t.jsx)(e.mi,{children:"n"})]}),(0,t.jsx)(e.annotation,{encoding:"application/x-tex",children:"\\log(n!) \\approx n \\log n"})]})})}),(0,t.jsxs)(e.span,{className:"katex-html","aria-hidden":"true",children:[(0,t.jsxs)(e.span,{className:"base",children:[(0,t.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.jsxs)(e.span,{className:"mop",children:["lo",(0,t.jsx)(e.span,{style:{marginRight:"0.01389em"},children:"g"})]}),(0,t.jsx)(e.span,{className:"mopen",children:"("}),(0,t.jsx)(e.span,{className:"mord mathnormal",children:"n"}),(0,t.jsx)(e.span,{className:"mclose",children:"!)"}),(0,t.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.jsx)(e.span,{className:"mrel",children:"\u2248"}),(0,t.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,t.jsxs)(e.span,{className:"base",children:[(0,t.jsx)(e.span,{className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,t.jsx)(e.span,{className:"mord mathnormal",children:"n"}),(0,t.jsx)(e.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,t.jsxs)(e.span,{className:"mop",children:["lo",(0,t.jsx)(e.span,{style:{marginRight:"0.01389em"},children:"g"})]}),(0,t.jsx)(e.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,t.jsx)(e.span,{className:"mord mathnormal",children:"n"})]})]})]}),".\nTherefore, merge sort is best possible (or close to best possible) solution for\nany sorting algorithm based on comparison model. Can we do better?"]}),"\n",(0,t.jsx)(e.h3,{id:"linear-sort",children:"Linear sort"}),"\n",(0,t.jsxs)(e.p,{children:["It takes constant amount of time to access a memory location (RAM) by its\naddress. If we are able to build a direct access array (DAA), we can get its\nelements by its index. We can build key value pairs, where keys are index of an\nDAA. If we have to search through the array, we can get an item in constant\ntime. Say we have ",(0,t.jsxs)(e.span,{className:"katex",children:[(0,t.jsx)(e.span,{className:"katex-mathml",children:(0,t.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(e.semantics,{children:[(0,t.jsx)(e.mrow,{children:(0,t.jsx)(e.mi,{children:"n"})}),(0,t.jsx)(e.annotation,{encoding:"application/x-tex",children:"n"})]})})}),(0,t.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(e.span,{className:"base",children:[(0,t.jsx)(e.span,{className:"strut",style:{height:"0.4306em"}}),(0,t.jsx)(e.span,{className:"mord mathnormal",children:"n"})]})})]})," items and the key space is ",(0,t.jsxs)(e.span,{className:"katex",children:[(0,t.jsx)(e.span,{className:"katex-mathml",children:(0,t.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(e.semantics,{children:[(0,t.jsx)(e.mrow,{children:(0,t.jsx)(e.mi,{children:"u"})}),(0,t.jsx)(e.annotation,{encoding:"application/x-tex",children:"u"})]})})}),(0,t.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(e.span,{className:"base",children:[(0,t.jsx)(e.span,{className:"strut",style:{height:"0.4306em"}}),(0,t.jsx)(e.span,{className:"mord mathnormal",children:"u"})]})})]}),". If ",(0,t.jsxs)(e.span,{className:"katex",children:[(0,t.jsx)(e.span,{className:"katex-mathml",children:(0,t.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(e.semantics,{children:[(0,t.jsx)(e.mrow,{children:(0,t.jsx)(e.mi,{children:"n"})}),(0,t.jsx)(e.annotation,{encoding:"application/x-tex",children:"n"})]})})}),(0,t.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(e.span,{className:"base",children:[(0,t.jsx)(e.span,{className:"strut",style:{height:"0.4306em"}}),(0,t.jsx)(e.span,{className:"mord mathnormal",children:"n"})]})})]})," and ",(0,t.jsxs)(e.span,{className:"katex",children:[(0,t.jsx)(e.span,{className:"katex-mathml",children:(0,t.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(e.semantics,{children:[(0,t.jsx)(e.mrow,{children:(0,t.jsx)(e.mi,{children:"u"})}),(0,t.jsx)(e.annotation,{encoding:"application/x-tex",children:"u"})]})})}),(0,t.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(e.span,{className:"base",children:[(0,t.jsx)(e.span,{className:"strut",style:{height:"0.4306em"}}),(0,t.jsx)(e.span,{className:"mord mathnormal",children:"u"})]})})]})," are of the\nsame order, then such an algorithm would be efficient. Example: say we have\nstudent IDs (keys) based on their ranking."]}),"\n",(0,t.jsxs)(e.p,{children:["What if key space is of the order of ",(0,t.jsxs)(e.span,{className:"katex",children:[(0,t.jsx)(e.span,{className:"katex-mathml",children:(0,t.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(e.semantics,{children:[(0,t.jsx)(e.mrow,{children:(0,t.jsxs)(e.msup,{children:[(0,t.jsx)(e.mi,{children:"n"}),(0,t.jsx)(e.mn,{children:"2"})]})}),(0,t.jsx)(e.annotation,{encoding:"application/x-tex",children:"n^2"})]})})}),(0,t.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(e.span,{className:"base",children:[(0,t.jsx)(e.span,{className:"strut",style:{height:"0.8141em"}}),(0,t.jsxs)(e.span,{className:"mord",children:[(0,t.jsx)(e.span,{className:"mord mathnormal",children:"n"}),(0,t.jsx)(e.span,{className:"msupsub",children:(0,t.jsx)(e.span,{className:"vlist-t",children:(0,t.jsx)(e.span,{className:"vlist-r",children:(0,t.jsx)(e.span,{className:"vlist",style:{height:"0.8141em"},children:(0,t.jsxs)(e.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,t.jsx)(e.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(e.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(e.span,{className:"mord mtight",children:"2"})})]})})})})})]})]})})]}),"? In that case, we can break down each\nkey in a tuple of (a, b), where ",(0,t.jsx)(e.code,{children:"a = u / n"})," (integer division), and ",(0,t.jsx)(e.code,{children:"b = u % n"}),"\n(remainder of modulo division). Example: say we have a list of 5 numbers:\n",24,", we can transform them into ",4,". Now, if we need to sort them (we can call tuple sort), we need to sort\nfirst based on the least significant tuple digit (here second digit), and we\nobtain: ",4,". Finally, we sort by the most\nsignificant tuple digit: ",4,"."]}),"\n",(0,t.jsx)(e.admonition,{type:"info",children:(0,t.jsxs)(e.p,{children:["Note that we need a stable sorting algorithm to sort above tuple, i.e., it\nmaintains the order of numbers in the original input list. If the input tuple\nwas ",1," after sorting based on most significant tuple digit (i.e.,\nfirst digit), it should return ",1,"."]})}),"\n",(0,t.jsx)(e.h3,{id:"resources",children:"Resources"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"https://www.youtube.com/watch?v=oS9aPzUNG-s&list=PLUl4u3cNGP63EdVPNLG3ToM6LaEUuStEY&index=4",children:"MIT OCW Lecture Video"})," (",(0,t.jsx)("a",{target:"_blank",href:n(8032).Z,children:"related notes"}),")"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:"https://www.youtube.com/watch?v=yndgIDO0zQQ&list=PLUl4u3cNGP63EdVPNLG3ToM6LaEUuStEY&index=7",children:"Linear Sorting lecture video from MIT OCW"})," (",(0,t.jsx)("a",{target:"_blank",href:n(179).Z,children:"related notes"}),")"]}),"\n"]})]})}function d(s={}){let{wrapper:e}={...(0,i.a)(),...s.components};return e?(0,t.jsx)(e,{...s,children:(0,t.jsx)(o,{...s})}):o(s)}},8032:function(s,e,n){n.d(e,{Z:()=>a});let a=n.p+"assets/files/MIT6_006S20_r03_sorting-0d388861e858099d2d60b052dfc1468a.pdf"},179:function(s,e,n){n.d(e,{Z:()=>a});let a=n.p+"assets/files/MIT6_006S20_r05_linear_sorting-9bc94dfbbe64710e69585629157e6914.pdf"}}]);