"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[5745],{2443:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>m,toc:()=>_});var a=s(5893),r=s(1151),i=s(9286);const c='#include <stdio.h>\n#include <mpi.h>\n\nint main(int argc, char **argv)\n{\n  int process_rank, num_procs, namelen;\n  char cluster_name[MPI_MAX_PROCESSOR_NAME];\n\n  MPI_Init(&argc, &argv);\n  MPI_Comm_size(MPI_COMM_WORLD, &num_procs);\n  MPI_Comm_rank(MPI_COMM_WORLD, &process_rank);\n  MPI_Get_processor_name(cluster_name, &namelen);\n\n  printf("Hello from process %d of %d on %s\\n", process_rank, num_procs, cluster_name);\n\n  MPI_Finalize();\n  return 0;\n}\n',t='#include <stdio.h>\n#include <mpi.h>\n#include <string.h>\n\nint main(int argc, char *argv[])\n{\n  char message[100];\n  int proc_rank, cluster_size, message_len;\n  MPI_Status status;\n\n  MPI_Init(&argc, &argv);\n  MPI_Comm_size(MPI_COMM_WORLD, &cluster_size);\n  MPI_Comm_rank(MPI_COMM_WORLD, &proc_rank);\n\n  strcpy(message, "Hello, today is a beautiful day.");\n  message_len = strlen(message);\n\n  if (proc_rank == 0)\n  {\n    printf("Process: %d\\nI am sending following message to process 1:\\n%s\\n\\n", proc_rank, message);\n    MPI_Send(message, message_len, MPI_CHAR, 1, 99, MPI_COMM_WORLD);\n    // int MPI_Send(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm)\n    // buf: initial address of send buffer (choice)\n    // count: number of elements in send buffer (nonnegative integer)\n    // datatype: datatype of each send buffer element (handle)\n    // dest: rank of destination (integer)\n    // tag: message tag (integer)\n    // comm: communicator (handle)\n  }\n  else if (proc_rank == 1)\n  {\n    strcpy(message, "null");\n\n    MPI_Recv(message, message_len, MPI_CHAR, 0, 99, MPI_COMM_WORLD, &status);\n    printf("Process: %d\\nI have received following message from process 0:\\n%s\\n", proc_rank, message);\n  }\n\n  MPI_Finalize();\n  return 0;\n}\n',o={title:"Message Passing Interface",sidebar_label:"MPI Basics"},l=void 0,m={id:"misc/mpi",title:"Message Passing Interface",description:"Hello world",source:"@site/docs/misc/mpi.mdx",sourceDirName:"misc",slug:"/misc/mpi",permalink:"/c-cpp/misc/mpi",draft:!1,unlisted:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/misc/mpi.mdx",tags:[],version:"current",frontMatter:{title:"Message Passing Interface",sidebar_label:"MPI Basics"},sidebar:"docs",previous:{title:"Dynamic Programming",permalink:"/c-cpp/misc/dynamic-programming"},next:{title:"Coding practice",permalink:"/c-cpp/category/coding-practice"}},d={},_=[{value:"Hello world",id:"hello-world",level:3},{value:"Send and receive",id:"send-and-receive",level:3}];function p(e){const n={h3:"h3",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h3,{id:"hello-world",children:"Hello world"}),"\n","\n",(0,a.jsx)(i.Z,{language:"c",title:"src/c/mpi/mpi_hello_world.c",showLineNumbers:!0,children:c}),"\n",(0,a.jsx)(n.h3,{id:"send-and-receive",children:"Send and receive"}),"\n","\n","\n",(0,a.jsx)(i.Z,{language:"c",title:"src/c/mpi/mpi_send_recv.c",showLineNumbers:!0,children:t})]})}function g(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}}}]);