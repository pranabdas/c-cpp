"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([["8846"],{6142:function(e,n,t){t.r(n),t.d(n,{metadata:()=>r,contentTitle:()=>c,default:()=>m,assets:()=>d,toc:()=>p,frontMatter:()=>u});var r=JSON.parse('{"id":"basics/add-two-integers","title":"Add two integers","description":"In the following program, we will ask the user to enter two integer inputs. The","source":"@site/docs/basics/add-two-integers.mdx","sourceDirName":"basics","slug":"/basics/add-two-integers","permalink":"/c-cpp/basics/add-two-integers","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/c-cpp/blob/main/docs/basics/add-two-integers.mdx","tags":[],"version":"current","frontMatter":{"title":"Add two integers"},"sidebar":"docs","previous":{"title":"Hello world","permalink":"/c-cpp/basics/hello-world"},"next":{"title":"Basic data types","permalink":"/c-cpp/basics/data-types"}}'),a=t("5893"),i=t("65"),s=t("7902"),l=t("5525"),o=t("5056");let u={title:"Add two integers"},c=void 0,d={},p=[];function h(e){let n={admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"In the following program, we will ask the user to enter two integer inputs. The\nprograms will calculate and print the sum of two numbers."}),"\n","\n",(0,a.jsxs)(s.Z,{groupId:"language",children:[(0,a.jsx)(l.Z,{value:"C",children:(0,a.jsx)(o.Z,{language:"c",title:"src/c/basics/01-add-two-integers.c",showLineNumbers:!0,children:'#include <stdio.h>\n\nint main()\n{\n    int input1, input2, sum;\n\n    printf("Enter input 1: ");\n    scanf("%d", &input1);\n\n    printf("Enter input 2: ");\n    scanf("%d", &input2);\n\n    sum = input1 + input2;\n\n    printf("%d + %d = %d\\n", input1, input2, sum);\n\n    return 0;\n}\n'})}),(0,a.jsx)(l.Z,{value:"C++",children:(0,a.jsx)(o.Z,{language:"cpp",title:"src/cpp/basics/01-add-two-integers.cpp",showLineNumbers:!0,children:'#include <iostream>\nusing namespace std;\n// above declaration exposes all the methods described in the std namespace\n// so that we can use cout instead of std::cout. Beware that in large\n// applications there could be naming conflict among various imported headers.\n// We can either use the convention std::cout or declare only the methods we\n// need:\n// using std::cout;\n\nint main()\n{\n    int input1, input2, sum;\n\n    cout << "Enter input 1: ";\n    cin >> input1;\n\n    cout << "Enter input 2: ";\n    cin >> input2;\n\n    sum = input1 + input2;\n\n    cout << input1 << " + " << input2 << " = " << sum << endl;\n\n    return 0;\n}\n'})})]}),"\n",(0,a.jsx)(n.admonition,{type:"danger",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:"int a = 123456789;\nlong long b = a * a; // this is wrong, a * a will result in int type\nlong long c = (long long) a * a; // or change the type of a to long long\n"})})}),"\n",(0,a.jsxs)(n.admonition,{type:"caution",children:[(0,a.jsxs)(n.p,{children:["It is risky to compare floating point numbers with ",(0,a.jsx)(n.code,{children:"=="})," due to precision errors.\nBetter approach is to check the difference is less than a small number:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:"if (abs(a - b) < 1e-9)\n{\n    // a and b are equal\n}\n"})})]})]})}function m(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},5525:function(e,n,t){t.d(n,{Z:()=>s});var r=t("5893");t("7294");var a=t("7026");let i="tabItem_Ymn6";function s(e){let{children:n,hidden:t,className:s}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.Z)(i,s),hidden:t,children:n})}},7902:function(e,n,t){t.d(n,{Z:()=>x});var r=t("5893"),a=t("7294"),i=t("7026"),s=t("9599"),l=t("6550"),o=t("2000"),u=t("4520"),c=t("8341"),d=t("6009");function p(e){return a.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||a.isValidElement(e)&&function(e){let{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){let{value:n,tabValues:t}=e;return t.some(e=>e.value===n)}var m=t("7227");let f="tabList__CuJ",b="tabItem_LNqP";function g(e){let{className:n,block:t,selectedValue:a,selectValue:l,tabValues:o}=e,u=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.o5)(),d=e=>{let n=e.currentTarget,t=o[u.indexOf(n)].value;t!==a&&(c(n),l(t))},p=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{let t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{let t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1]}}n?.focus()};return(0,r.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},n),children:o.map(e=>{let{value:n,label:t,attributes:s}=e;return(0,r.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>u.push(e),onKeyDown:p,onClick:d,...s,className:(0,i.Z)("tabs__item",b,s?.className,{"tabs__item--active":a===n}),children:t??n},n)})})}function w(e){let{lazy:n,children:t,selectedValue:s}=e,l=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){let e=l.find(e=>e.props.value===s);return e?(0,a.cloneElement)(e,{className:(0,i.Z)("margin-top--md",e.props.className)}):null}return(0,r.jsx)("div",{className:"margin-top--md",children:l.map((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==s}))})}function v(e){let n=function(e){let{defaultValue:n,queryString:t=!1,groupId:r}=e,i=function(e){let{values:n,children:t}=e;return(0,a.useMemo)(()=>{let e=n??p(t).map(e=>{let{props:{value:n,label:t,attributes:r,default:a}}=e;return{value:n,label:t,attributes:r,default:a}});return!function(e){let n=(0,c.lx)(e,(e,n)=>e.value===n.value);if(n.length>0)throw Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}(e),[s,m]=(0,a.useState)(()=>(function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}let r=t.find(e=>e.default)??t[0];if(!r)throw Error("Unexpected error: 0 tabValues");return r.value})({defaultValue:n,tabValues:i})),[f,b]=function(e){let{queryString:n=!1,groupId:t}=e,r=(0,l.k6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t}),s=(0,u._X)(i);return[s,(0,a.useCallback)(e=>{if(!i)return;let n=new URLSearchParams(r.location.search);n.set(i,e),r.replace({...r.location,search:n.toString()})},[i,r])]}({queryString:t,groupId:r}),[g,w]=function(e){var n;let{groupId:t}=e;let r=(n=t)?`docusaurus.tab.${n}`:null,[i,s]=(0,d.Nk)(r);return[i,(0,a.useCallback)(e=>{if(!!r)s.set(e)},[r,s])]}({groupId:r}),v=(()=>{let e=f??g;return h({value:e,tabValues:i})?e:null})();return(0,o.Z)(()=>{v&&m(v)},[v]),{selectedValue:s,selectValue:(0,a.useCallback)(e=>{if(!h({value:e,tabValues:i}))throw Error(`Can't select invalid tab value=${e}`);m(e),b(e),w(e)},[b,w,i]),tabValues:i}}(e);return(0,r.jsxs)("div",{className:(0,i.Z)("tabs-container",f),children:[(0,r.jsx)(g,{...n,...e}),(0,r.jsx)(w,{...n,...e})]})}function x(e){let n=(0,m.Z)();return(0,r.jsx)(v,{...e,children:p(e.children)},String(n))}}}]);