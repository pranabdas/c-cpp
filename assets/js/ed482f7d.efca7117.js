"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[637],{5162:(e,n,t)=>{t.d(n,{Z:()=>a});var i=t(7294),s=t(6010);const r="tabItem_Ymn6";function a(e){let{children:n,hidden:t,className:a}=e;return i.createElement("div",{role:"tabpanel",className:(0,s.Z)(r,a),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>p});var i=t(7462),s=t(7294),r=t(6010),a=t(2389),l=t(7392),o=t(7094),d=t(2466);const m="tabList__CuJ",u="tabItem_LNqP";function c(e){const{lazy:n,block:t,defaultValue:a,values:c,groupId:p,className:_}=e,h=s.Children.map(e.children,(e=>{if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=c??h.map((e=>{let{props:{value:n,label:t,attributes:i}}=e;return{value:n,label:t,attributes:i}})),b=(0,l.l)(f,((e,n)=>e.value===n.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===a?a:a??h.find((e=>e.props.default))?.props.value??h[0].props.value;if(null!==k&&!f.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:L,setTabGroupChoices:y}=(0,o.U)(),[w,v]=(0,s.useState)(k),g=[],{blockElementScrollPositionUntilNextRender:x}=(0,d.o5)();if(null!=p){const e=L[p];null!=e&&e!==w&&f.some((n=>n.value===e))&&v(e)}const N=e=>{const n=e.currentTarget,t=g.indexOf(n),i=f[t].value;i!==w&&(x(n),v(i),null!=p&&y(p,String(i)))},T=e=>{let n=null;switch(e.key){case"Enter":N(e);break;case"ArrowRight":{const t=g.indexOf(e.currentTarget)+1;n=g[t]??g[0];break}case"ArrowLeft":{const t=g.indexOf(e.currentTarget)-1;n=g[t]??g[g.length-1];break}}n?.focus()};return s.createElement("div",{className:(0,r.Z)("tabs-container",m)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},_)},f.map((e=>{let{value:n,label:t,attributes:a}=e;return s.createElement("li",(0,i.Z)({role:"tab",tabIndex:w===n?0:-1,"aria-selected":w===n,key:n,ref:e=>g.push(e),onKeyDown:T,onClick:N},a,{className:(0,r.Z)("tabs__item",u,a?.className,{"tabs__item--active":w===n})}),t??n)}))),n?(0,s.cloneElement)(h.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},h.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==w})))))}function p(e){const n=(0,a.Z)();return s.createElement(c,(0,i.Z)({key:String(n)},e))}},4529:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>_,frontMatter:()=>o,metadata:()=>m,toc:()=>c});var i=t(7462),s=(t(7294),t(3905)),r=t(5488),a=t(5162),l=t(6823);const o={title:"Linked list"},d=void 0,m={unversionedId:"data-structure/linked-list",id:"data-structure/linked-list",title:"Linked list",description:"",source:"@site/docs/data-structure/linked-list.mdx",sourceDirName:"data-structure",slug:"/data-structure/linked-list",permalink:"/c-cpp/data-structure/linked-list",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/data-structure/linked-list.mdx",tags:[],version:"current",frontMatter:{title:"Linked list"},sidebar:"docs",previous:{title:"Complex number",permalink:"/c-cpp/data-structure/complex-number"},next:{title:"Binary trees",permalink:"/c-cpp/data-structure/binary-trees"}},u={},c=[],p={toc:c};function _(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)(r.Z,{groupId:"language",mdxType:"Tabs"},(0,s.kt)(a.Z,{value:"C",mdxType:"TabItem"},(0,s.kt)(l.Z,{language:"c",title:"src/c/data-structure/linked-list.c",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <stdio.h>  // printf\n#include <stdlib.h> // malloc\n#include <string.h> // strcpy, strcmp\n#include <assert.h> // assert\n\ntypedef struct todo_list\n{\n    char item_name[100];\n    int number_of_item;\n    int is_important; // no boolean type in C, use 0/1 for false/true\n    struct todo_list *next;\n} todo_list;\n\ntodo_list *create_new_item(char item_name[], int number_of_item, int is_important)\n{\n    todo_list *list;\n    list = malloc(sizeof(todo_list));\n    assert(list);\n    strcpy(list->item_name, item_name);\n    list->number_of_item = number_of_item;\n    list->is_important = is_important;\n    list->next = NULL;\n    return list;\n}\n\nvoid print_item(todo_list *list)\n{\n    if (list == NULL)\n    {\n        return;\n    }\n    else\n    {\n        printf("Item name: %s\\n", list->item_name);\n        printf("Number of items: %d\\n", list->number_of_item);\n\n        if (list->is_important == 0)\n        {\n            printf("Is important: false\\n");\n        }\n        else\n        {\n            printf("Is important: true\\n");\n        }\n    }\n}\n\nvoid print_list(todo_list *list)\n{\n    if (list == NULL)\n    {\n        return;\n    }\n    else\n    {\n        print_item(list);\n\n        if (list->next == NULL)\n        {\n            return;\n        }\n        else\n        {\n            printf("\\n");\n            print_list(list->next);\n        }\n    }\n}\n\nvoid insert_head(todo_list **list, todo_list *todo_item)\n{\n    todo_item->next = *list;\n    *list = todo_item;\n}\n\ntodo_list *search_list(todo_list *list, char item_name[])\n// returns pointer to the todo item\n{\n    if (list == NULL)\n    {\n        return NULL;\n    }\n\n    if (strcmp(list->item_name, item_name) == 0)\n    {\n        return list;\n    }\n    else\n    {\n        return search_list(list->next, item_name);\n        // if program arrives here it must return\n    }\n}\n\ntodo_list *item_ahead(todo_list *list, char item_name[])\n{\n    if ((list == NULL) || (list->next == NULL))\n    {\n        return (NULL);\n    }\n\n    if (strcmp(list->item_name, item_name) == 0)\n    {\n        return (list->next);\n    }\n    else\n    {\n        return (item_ahead(list->next, item_name));\n    }\n}\n\nvoid delete_head(todo_list **list)\n{\n    if ((*list) != NULL)\n    {\n        todo_list *head;\n        head = (*list)->next;\n        free(*list);\n        *list = head;\n    }\n}\n\nvoid delete_list(todo_list **list)\n{\n    while ((*list) != NULL)\n    {\n        delete_head(list);\n    }\n}\n\nint main()\n{\n    todo_list *my_list = create_new_item("bread", 2, 0);\n    todo_list *milk = create_new_item("milk", 3, 1);\n    insert_head(&my_list, milk);\n\n    print_list(my_list);\n\n    // search\n    char item[] = "bread";\n    todo_list *my_item = search_list(my_list, item);\n\n    if (my_item == NULL)\n    {\n        printf("\\n%s is not included in my list.\\n", item);\n    }\n    else\n    {\n        printf("\\n%s is included in my list.\\n", item);\n    }\n\n    // item ahead\n    todo_list *next_item;\n    next_item = item_ahead(my_list, "milk");\n    printf("next time: %s\\n", next_item->item_name);\n\n    printf("\\n+++ Delete head +++\\n");\n    delete_head(&my_list);\n    print_list(my_list);\n\n    printf("\\n+++ Insert milk again +++\\n");\n    milk = create_new_item("milk", 5, 0);\n    insert_head(&my_list, milk);\n    print_list(my_list);\n\n    printf("\\n+++ Delete all +++\\n");\n    delete_list(&my_list);\n    print_list(my_list);\n\n    return 0;\n}\n')),(0,s.kt)(a.Z,{value:"C++",mdxType:"TabItem"},(0,s.kt)(l.Z,{language:"cpp",title:"src/cpp/data-structure/linked-list.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'// linked lists are dynamic collection\n// adding new item has O(1) complexity, while searching items in the list has\n// O(N) cost. In comparison, inserting item in a regular array is O(N) while\n// array search is O(1). If we use dynamic array instead of static array, we\n// start with a specific size of the array, once we run out of space, we\n// allocate a new array with double the previous size of array. We copy the\n// first half of the array from previous array, and add the new element. In this\n// we need to double about log(N) time for N item, so half of the item is copied\n// once, quarter of item is moved twice, and so on, we will see that this is\n// still a O(N) complexity to build such array.\n// linked lists are used where the array size is not known compile time, and\n// we do not need random access to the items in it.\n// Use cases: list of navigational nodes (going from one point to another in a\n// map), list of items in a shopping cart\n\n#include <iostream>\n#include <string>\nusing namespace std;\n\n// this is the data structure we are going to store in our list\nstruct LinkedList\n{\n    string item_name;\n    int number_of_item;\n    LinkedList *next;\n};\n\n// inserting new element to the head i.e., the new element becomes head\nvoid add_to_head(LinkedList *&head, string new_item_name, int new_number_of_item)\n{\n    LinkedList *new_ptr;\n    new_ptr = new LinkedList;\n    new_ptr->item_name = new_item_name;\n    new_ptr->number_of_item = new_number_of_item;\n    new_ptr->next = head;\n\n    head = new_ptr;\n}\n\nvoid print_linked_list(LinkedList *head)\n{\n    LinkedList *ref_ptr = head;\n    cout << "List items: \\n";\n\n    while (true)\n    {\n        cout << ref_ptr->item_name << " (" << ref_ptr->number_of_item << " pcs.)"\n             << endl;\n        ref_ptr = ref_ptr->next;\n\n        if (!ref_ptr)\n        {\n            break;\n        }\n    }\n}\n\nint length_linked_list(LinkedList *head)\n{\n    int len = 0;\n    LinkedList *ref_ptr = head;\n\n    while (true)\n    {\n        len += 1;\n        ref_ptr = ref_ptr->next;\n\n        if (!ref_ptr)\n        {\n            break;\n        }\n    }\n\n    return len;\n}\n\nvoid delete_head(LinkedList *&head)\n// in order to delete and modify pointer we need pass by reference\n{\n    if (head)\n    {\n        LinkedList *tmp_ptr;\n        tmp_ptr = head->next;\n        delete head;\n        head = tmp_ptr;\n    }\n}\n\nint main()\n{\n    // let\'s define our head pointer first\n    // head pointer points to the first element of the linked list\n    // head pointer also used to refer to the linked list as a whole\n    LinkedList *head;\n    head = new LinkedList;\n    // assign the first element of the linked list\n    // two ways of accessing struct members via pointer dereferencing\n    head->item_name = "bread"; // (*head).item_name = "bread";\n    head->number_of_item = 3;\n    // if our list has only one item, the next pointer points to NULL\n    // in case the head pointer points to nullptr, the list is empty\n    // head = nullptr; // refers to empty linked list\n    head->next = nullptr;\n\n    cout << "Length of list = " << length_linked_list(head) << endl;\n\n    // let\'s add new item to the head\n    add_to_head(head, "water bottle", 5);\n\n    print_linked_list(head);\n\n    // add another item and print\n    add_to_head(head, "tissue roll", 2);\n    print_linked_list(head);\n    cout << "Length of list = " << length_linked_list(head) << endl;\n\n    delete_head(head);\n    print_linked_list(head);\n\n    return 0;\n}\n'))))}_.isMDXComponent=!0}}]);