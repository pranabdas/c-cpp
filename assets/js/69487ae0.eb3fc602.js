"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[3325],{85162:(e,t,a)=>{a.d(t,{Z:()=>u});var n=a(67294),r=a(86010);const s={tabItem:"tabItem_Ymn6"};function u(e){let{children:t,hidden:a,className:u}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(s.tabItem,u),hidden:a},t)}},74866:(e,t,a)=>{a.d(t,{Z:()=>w});var n=a(87462),r=a(67294),s=a(86010),u=a(12466),i=a(16550),l=a(91980),o=a(67392),c=a(50012);function d(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function m(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??d(a);return function(e){const t=(0,o.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function p(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:a}=e;const n=(0,i.k6)(),s=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,l._X)(s),(0,r.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(n.location.search);t.set(s,e),n.replace({...n.location,search:t.toString()})}),[s,n])]}function b(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,s=m(e),[u,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:s}))),[l,o]=g({queryString:a,groupId:n}),[d,b]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,s]=(0,c.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&s.set(e)}),[a,s])]}({groupId:n}),f=(()=>{const e=l??d;return p({value:e,tabValues:s})?e:null})();(0,r.useLayoutEffect)((()=>{f&&i(f)}),[f]);return{selectedValue:u,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);i(e),o(e),b(e)}),[o,b,s]),tabValues:s}}var f=a(72389);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function h(e){let{className:t,block:a,selectedValue:i,selectValue:l,tabValues:o}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,u.o5)(),m=e=>{const t=e.currentTarget,a=c.indexOf(t),n=o[a].value;n!==i&&(d(t),l(n))},p=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const a=c.indexOf(e.currentTarget)+1;t=c[a]??c[0];break}case"ArrowLeft":{const a=c.indexOf(e.currentTarget)-1;t=c[a]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":a},t)},o.map((e=>{let{value:t,label:a,attributes:u}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>c.push(e),onKeyDown:p,onClick:m},u,{className:(0,s.Z)("tabs__item",v.tabItem,u?.className,{"tabs__item--active":i===t})}),a??t)})))}function y(e){let{lazy:t,children:a,selectedValue:n}=e;if(a=Array.isArray(a)?a:[a],t){const e=a.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},a.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function k(e){const t=b(e);return r.createElement("div",{className:(0,s.Z)("tabs-container",v.tabList)},r.createElement(h,(0,n.Z)({},e,t)),r.createElement(y,(0,n.Z)({},e,t)))}function w(e){const t=(0,f.Z)();return r.createElement(k,(0,n.Z)({key:String(t)},e))}},41227:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>d,default:()=>v,frontMatter:()=>c,metadata:()=>m,toc:()=>g});var n=a(87462),r=(a(67294),a(3905)),s=a(74866),u=a(85162),i=a(90814);const l='#include <stdio.h>\n// ./a.out first second\n// argv[0] = a.out\n// argv[1] = first\n// argv[2] = second\n\nint main(int argc, char *argv[]) // argument count, argument vector\n{\n    for (int i = 0; i < argc; i++)\n    {\n        printf("argv[%d] = %s\\n", i, argv[i]);\n    }\n    return 0;\n}\n',o='#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\nint main(int argc, char *argv[])\n{\n    cout << "Program: " << argv[0] << endl;\n    cout << "You have provided " << argc - 1 << " arguments\\n";\n\n    if (argc > 1)\n    {\n        cout << "Arguments are:\\n";\n\n        for (int i = 1; i < argc; i++)\n        {\n            cout << "arg[" << i << "] : " << argv[i] << endl;\n        }\n    }\n\n    // Note that the arguments are string\n    // They have to be converted to other data type as necessary\n    // for example we can use `<cstdlib>` `atoi` to convert string to int\n\n    int max = atoi("100");\n    max += 10;\n\n    cout << max << endl;\n    \n    return 0;\n}\n',c={title:"Parsing command arguments",sidebar_label:"Argument parsing"},d=void 0,m={unversionedId:"misc/arg-parsing",id:"misc/arg-parsing",title:"Parsing command arguments",description:"",source:"@site/docs/misc/arg-parsing.mdx",sourceDirName:"misc",slug:"/misc/arg-parsing",permalink:"/c-cpp/misc/arg-parsing",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/misc/arg-parsing.mdx",tags:[],version:"current",frontMatter:{title:"Parsing command arguments",sidebar_label:"Argument parsing"},sidebar:"docs",previous:{title:"Miscellaneous",permalink:"/c-cpp/category/miscellaneous"},next:{title:"Bit shifting",permalink:"/c-cpp/misc/bit-shifting"}},p={},g=[],b={toc:g},f="wrapper";function v(e){let{components:t,...a}=e;return(0,r.kt)(f,(0,n.Z)({},b,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(s.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(u.Z,{value:"C",mdxType:"TabItem"},(0,r.kt)(i.Z,{language:"c",title:"src/c/misc/01-argc-argv.c",showLineNumbers:!0,mdxType:"CodeBlock"},l)),(0,r.kt)(u.Z,{value:"C++",mdxType:"TabItem"},(0,r.kt)(i.Z,{language:"cpp",title:"src/cpp/misc/01-argc-argv.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},o))))}v.isMDXComponent=!0}}]);