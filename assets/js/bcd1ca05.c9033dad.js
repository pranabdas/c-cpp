"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[8],{5488:(e,n,a)=>{a.d(n,{Z:()=>d});var t=a(7462),r=a(7294),i=a(6010),o=a(2389),s=a(7392),l=a(7094),c=a(2466);const u="tabList__CuJ",m="tabItem_LNqP";function p(e){const{lazy:n,block:a,defaultValue:o,values:p,groupId:d,className:g}=e,b=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=p??b.map((e=>{let{props:{value:n,label:a,attributes:t}}=e;return{value:n,label:a,attributes:t}})),f=(0,s.l)(h,((e,n)=>e.value===n.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===o?o:o??b.find((e=>e.props.default))?.props.value??b[0].props.value;if(null!==v&&!h.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:w}=(0,l.U)(),[k,T]=(0,r.useState)(v),E=[],{blockElementScrollPositionUntilNextRender:x}=(0,c.o5)();if(null!=d){const e=y[d];null!=e&&e!==k&&h.some((n=>n.value===e))&&T(e)}const D=e=>{const n=e.currentTarget,a=E.indexOf(n),t=h[a].value;t!==k&&(x(n),T(t),null!=d&&w(d,String(t)))},N=e=>{let n=null;switch(e.key){case"Enter":D(e);break;case"ArrowRight":{const a=E.indexOf(e.currentTarget)+1;n=E[a]??E[0];break}case"ArrowLeft":{const a=E.indexOf(e.currentTarget)-1;n=E[a]??E[E.length-1];break}}n?.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":a},g)},h.map((e=>{let{value:n,label:a,attributes:o}=e;return r.createElement("li",(0,t.Z)({role:"tab",tabIndex:k===n?0:-1,"aria-selected":k===n,key:n,ref:e=>E.push(e),onKeyDown:N,onClick:D},o,{className:(0,i.Z)("tabs__item",m,o?.className,{"tabs__item--active":k===n})}),a??n)}))),n?(0,r.cloneElement)(b.filter((e=>e.props.value===k))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},b.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==k})))))}function d(e){const n=(0,o.Z)();return r.createElement(p,(0,t.Z)({key:String(n)},e))}},1189:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var t=a(7462),r=(a(7294),a(3905)),i=(a(5488),a(6823));const o={title:"Dynamic Programming"},s=void 0,l={unversionedId:"misc/dynamic-programming",id:"misc/dynamic-programming",title:"Dynamic Programming",description:"Example of dynamic programming:",source:"@site/docs/misc/dynamic-programming.mdx",sourceDirName:"misc",slug:"/misc/dynamic-programming",permalink:"/c-cpp/misc/dynamic-programming",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/misc/dynamic-programming.mdx",tags:[],version:"current",frontMatter:{title:"Dynamic Programming"},sidebar:"docs",previous:{title:"Multiple return",permalink:"/c-cpp/misc/multiple-return"},next:{title:"Coding practice",permalink:"/c-cpp/category/coding-practice"}},c={},u=[],m={toc:u};function p(e){let{components:n,...a}=e;return(0,r.kt)("wrapper",(0,t.Z)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Example of dynamic programming:"),(0,r.kt)(i.Z,{language:"c",title:"src/c/misc/fib_dynamic.c",showLineNumbers:!0,mdxType:"CodeBlock"},'// recursive version of this program has exponential complexity O(a^n), where\n// `a` is the golden ratio 1.6180339887. T(n) = T(n-1) + T(n-2) + O(1), which is\n// in-between 2T(n-1) ~ 2^n and 2T(n-2) ~ 2^(n/2) ~ (\u221a2)^n ~ 1.4142^n. By using\n// following dynamic programming technique the complexity becomes linear in\n// time. Recursion is a top down approach, while dynamic programming is bottom\n// up approach so that we do not duplicate sub tasks\n// https://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#dynamicProgramming\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n\nint fib(int n)\n{\n    int *a;\n    int i;\n    int result;\n\n    if (n < 1)\n    {\n        return 0;\n    }\n    else if (n == 1)\n    {\n        return 1;\n    }\n    else\n    {\n        a = malloc(sizeof(*a) * (n + 1));\n        assert(a);\n\n        a[0] = 0;\n        a[1] = 1;\n\n        for (i = 2; i <= n; i++)\n        {\n            a[i] = a[i - 1] + a[i - 2];\n        }\n    }\n\n    result = a[n];\n    free(a);\n    return result;\n}\n\nint main()\n{\n    int n = 45;\n    printf("Fib(%d) = %d\\n", n, fib(n));\n\n    return 0;\n}\n'))}p.isMDXComponent=!0}}]);