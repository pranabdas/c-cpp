"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[501],{5762:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>c,contentTitle:()=>p,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>s});var a=l(7462),i=(l(7294),l(3905)),t=l(6823);const o={title:"Setting up C/C++ compiler",sidebar_label:"Setup",slug:"/",keywords:["C programming","C++ programming","scientific programming","numerical programming","numerical integration"]},p=void 0,r={unversionedId:"setup",id:"setup",title:"Setting up C/C++ compiler",description:"I will be using GNU C Compiler (GCC) to compile codes in a Linux computer. You",source:"@site/docs/setup.mdx",sourceDirName:".",slug:"/",permalink:"/c-cpp/",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/setup.mdx",tags:[],version:"current",frontMatter:{title:"Setting up C/C++ compiler",sidebar_label:"Setup",slug:"/",keywords:["C programming","C++ programming","scientific programming","numerical programming","numerical integration"]},sidebar:"docs",next:{title:"Basics",permalink:"/c-cpp/category/basics"}},c={},s=[{value:"Makefile",id:"makefile",level:3},{value:"Cppcheck",id:"cppcheck",level:3}],m={toc:s};function u(e){let{components:n,...l}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,l,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"I will be using GNU C Compiler (GCC) to compile codes in a Linux computer. You\ncan install GCC in Ubuntu/Debian by:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"apt install gcc\n")),(0,i.kt)("p",null,"Command to compile:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"gcc filename.c\n\n# linking math lib\ngcc filename.c -lm\n\n# show all compiler warnings\ngcc -Wall filename.c\n\ng++ filename.cpp\n\n# compile with specific standard (might require for latest language features)\ng++ -std=c++17 filename.cpp\ng++ -std=c++2a filename.cpp\n")),(0,i.kt)("p",null,"This would produce executable with default name ",(0,i.kt)("inlineCode",{parentName:"p"},"a.out"),". You can specify the\nexecutable name by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"-o")," flag:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"gcc filename.c -o program_name\n")),(0,i.kt)("p",null,"For complex programs, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"-g")," flag to generate debugging information.\n",(0,i.kt)("inlineCode",{parentName:"p"},"-O")," flag can be used to optimize the executable file (",(0,i.kt)("inlineCode",{parentName:"p"},"-O2"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"-O3")," denotes\nvarious levels of optimization)."),(0,i.kt)("p",null,"Compiler (GCC/Clang) flags for warnings: ",(0,i.kt)("inlineCode",{parentName:"p"},"-Wall"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"-Wextra"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"-Wpedantic"),",\n",(0,i.kt)("inlineCode",{parentName:"p"},"-Wunused"),"."),(0,i.kt)("h3",{id:"makefile"},"Makefile"),(0,i.kt)("p",null,"For large/complex projects with multiple source/header files and might require\nlinking various various libraries, unix makefile is very helpful to write the\ncompilation rules and build the program. Here is a very simple example:"),(0,i.kt)(t.Z,{language:"makefile",title:"src/cpp/basics/Makefile",showLineNumbers:!0,mdxType:"CodeBlock"},"CC = g++\n\nall: hello\n\nhello: hello.o\n    ${CC} -o hello hello.o\n\nhello.o: 00-hello-world.cpp\n    ${CC} -c 00-hello-world.cpp -o hello.o\n\nclean:\n    rm hello.o hello\n"),(0,i.kt)("p",null,"A makefile is consists of a set of rules. A rule consists of a target, a list of\nprerequisites, and a command. In the above example, we have several rules:\n",(0,i.kt)("inlineCode",{parentName:"p"},"all"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"hello"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"hello.o"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"clean"),". In case of ",(0,i.kt)("inlineCode",{parentName:"p"},"all"),", we have prerequisite\n",(0,i.kt)("inlineCode",{parentName:"p"},"hello"),", while there is no command. In case of ",(0,i.kt)("inlineCode",{parentName:"p"},"hello"),", prerequisite is ",(0,i.kt)("inlineCode",{parentName:"p"},"hello.o"),"\nand rule is: ",(0,i.kt)("inlineCode",{parentName:"p"},"${CC} -o hello hello.o")," and so on. If we run ",(0,i.kt)("inlineCode",{parentName:"p"},"make")," without any\nargument, the first rule will run, which is in this case ",(0,i.kt)("inlineCode",{parentName:"p"},"all"),". We can run\nanother rule, we can run it by providing its name, e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"make clean"),". Later we\nwill see use of more complex makefile."),(0,i.kt)("h3",{id:"cppcheck"},"Cppcheck"),(0,i.kt)("p",null,"Sometimes I will be using ",(0,i.kt)("inlineCode",{parentName:"p"},"cppcheck")," to debug codes as well."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"apt install cppcheck\ncppcheck --enable=all filename.cpp \n")))}u.isMDXComponent=!0}}]);