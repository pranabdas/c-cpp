"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[1154],{5162:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(7294),r=n(6010);const o={tabItem:"tabItem_Ymn6"};function s(e){let{children:t,hidden:n,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,s),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>y});var a=n(7462),r=n(7294),o=n(6010),s=n(2466),i=n(6550),u=n(1980),l=n(7392),c=n(12);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,l.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function b(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,u._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=p(e),[s,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[u,l]=b({queryString:n,groupId:a}),[d,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),h=(()=>{const e=u??d;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{h&&i(h)}),[h]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),l(e),f(e)}),[l,f,o]),tabValues:o}}var h=n(2389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function w(e){let{className:t,block:n,selectedValue:i,selectValue:u,tabValues:l}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.o5)(),p=e=>{const t=e.currentTarget,n=c.indexOf(t),a=l[n].value;a!==i&&(d(t),u(a))},m=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},l.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:p},s,{className:(0,o.Z)("tabs__item",g.tabItem,s?.className,{"tabs__item--active":i===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function k(e){const t=f(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",g.tabList)},r.createElement(w,(0,a.Z)({},e,t)),r.createElement(v,(0,a.Z)({},e,t)))}function y(e){const t=(0,h.Z)();return r.createElement(k,(0,a.Z)({key:String(t)},e))}},8600:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>d,default:()=>g,frontMatter:()=>c,metadata:()=>p,toc:()=>b});var a=n(7462),r=(n(7294),n(3905)),o=n(4866),s=n(5162),i=n(614);const u='#include <stdio.h>\n\nint main()\n{\n    int input1, input2, sum;\n\n    printf("Enter input 1: ");\n    scanf("%d", &input1);\n\n    printf("Enter input 2: ");\n    scanf("%d", &input2);\n\n    sum = input1 + input2;\n\n    printf("%d + %d = %d\\n", input1, input2, sum);\n\n    return 0;\n}\n',l='#include <iostream>\nusing namespace std;\n// above declaration exposes all the methods described in the std namespace\n// so that we can use cout instead of std::cout. Beware that in large\n// applications there could be naming conflict among various imported headers.\n// We can either use the convention std::cout or declare only the methods we\n// need:\n// using std::cout;\n\nint main()\n{\n    int input1, input2, sum;\n\n    cout << "Enter input 1: ";\n    cin >> input1;\n\n    cout << "Enter input 2: ";\n    cin >> input2;\n\n    sum = input1 + input2;\n\n    cout << input1 << " + " << input2 << " = " << sum << endl;\n\n    return 0;\n}\n',c={title:"Add two integers"},d=void 0,p={unversionedId:"basics/add-two-integers",id:"basics/add-two-integers",title:"Add two integers",description:"In the following program, we will ask the user to enter two integer inputs. The",source:"@site/docs/basics/add-two-integers.mdx",sourceDirName:"basics",slug:"/basics/add-two-integers",permalink:"/c-cpp/basics/add-two-integers",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/basics/add-two-integers.mdx",tags:[],version:"current",frontMatter:{title:"Add two integers"},sidebar:"docs",previous:{title:"Hello world",permalink:"/c-cpp/basics/hello-world"},next:{title:"Basic data types",permalink:"/c-cpp/basics/data-types"}},m={},b=[],f={toc:b},h="wrapper";function g(e){let{components:t,...n}=e;return(0,r.kt)(h,(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In the following program, we will ask the user to enter two integer inputs. The\nprograms will calculate and print the sum of two numbers."),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"C",mdxType:"TabItem"},(0,r.kt)(i.Z,{language:"c",title:"src/c/basics/01-add-two-integers.c",showLineNumbers:!0,mdxType:"CodeBlock"},u)),(0,r.kt)(s.Z,{value:"C++",mdxType:"TabItem"},(0,r.kt)(i.Z,{language:"cpp",title:"src/cpp/basics/01-add-two-integers.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},l))),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int a = 123456789;\nlong long b = a * a; // this is wrong, a * a will result in int type\nlong long c = (long long) a * a; // or change the type of a to long long\n"))),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"It is risky to compare floating point numbers with ",(0,r.kt)("inlineCode",{parentName:"p"},"==")," due to precision errors.\nBetter approach is to check the difference is less than a small number:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"if (abs(a - b) < 1e-9)\n{\n    // a and b are equal\n}\n"))))}g.isMDXComponent=!0}}]);