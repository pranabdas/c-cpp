"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[630],{5350:(n,r,a)=>{a.r(r),a.d(r,{assets:()=>u,contentTitle:()=>p,default:()=>l,frontMatter:()=>c,metadata:()=>m,toc:()=>y});var e=a(7462),i=(a(7294),a(3905)),t=a(5488),s=a(5162),o=a(814);const c={title:"Array basics"},p=void 0,m={unversionedId:"arrays-pointers/array-basics",id:"arrays-pointers/array-basics",title:"Array basics",description:"",source:"@site/docs/arrays-pointers/array-basics.mdx",sourceDirName:"arrays-pointers",slug:"/arrays-pointers/array-basics",permalink:"/c-cpp/arrays-pointers/array-basics",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/arrays-pointers/array-basics.mdx",tags:[],version:"current",frontMatter:{title:"Array basics"},sidebar:"docs",previous:{title:"Array and Pointer",permalink:"/c-cpp/category/array-and-pointer"},next:{title:"Pointer basics",permalink:"/c-cpp/arrays-pointers/pointer-basics"}},u={},y=[],d={toc:y};function l(n){let{components:r,...a}=n;return(0,i.kt)("wrapper",(0,e.Z)({},d,a,{components:r,mdxType:"MDXLayout"}),(0,i.kt)(t.Z,{groupId:"language",mdxType:"Tabs"},(0,i.kt)(s.Z,{value:"C",mdxType:"TabItem"},(0,i.kt)(o.Z,{language:"c",title:"src/c/arrays-pointers/01-array-basics.c",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <stdio.h>\n\nint main()\n{\n    const int SIZE = 5;\n\n    // int array1[SIZE] = {0}; // if the array size is not knowns compile time,\n                            // use heap dynamic memory\n    // int array2[SIZE] = {1, 2, 3, 4, 5};\n    // some compiler might complain here, use 5 instead of SIZE\n    // fails in gcc, however works in apple clang\n    int array1[5] = {0};\n    int array2[5] = {1, 2, 3, 4, 5};\n    int array3[] = {1, 2, 3, 4, 5};\n\n    char str1[] = "hello";\n\n    int i;\n    double sum2 = 0, sum3 = 0;\n    double *ptr_sum2 = &sum2;\n\n    for (i = 0; i < SIZE; i++)\n    {\n        sum2 += array2[i];\n        sum3 += array3[i];\n    }\n\n    printf("Sum2 = %f\\n", sum2);\n    printf("Sum3 = %f\\n", sum3);\n\n    printf("Pointer sum2: %p\\n", ptr_sum2);\n    printf("Sum2 = %f\\n", *ptr_sum2);\n\n    printf("array2 position: %p\\n", array2);\n\n    return 0;\n}\n')),(0,i.kt)(s.Z,{value:"C++",mdxType:"TabItem"},(0,i.kt)(o.Z,{language:"cpp",title:"src/cpp/arrays-pointers/01-array-basics.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int arr[] = {2, 4, 8, 15};\n    // arr[4] = {1, 2};\n    // above assignment sets: arr[0] = 1, arr[1] = 2, arr[2] = 0, arr[3] = 0\n    // aggregation initialization:\n    // note that if we do not provide any value via curly braces, the array\n    // remains uninitialized. To make sure array is initialized to zeros:\n    // arr[4] = {}\n\n    // multi-dimensional array: float arr2d[3][4];\n\n    for (int i : arr)\n    {\n        cout << i << endl;\n    }\n\n    const int SIZE = 10; // `const` is necessary here\n    double data[SIZE];\n    // if the size of array is not known compile time, use heap dynamic array\n\n    cout << "Size of data = " << sizeof(data) << " bytes\\n";\n    // the above prints the size of the entire array\n\n    return 0;\n}\n'))))}l.isMDXComponent=!0}}]);