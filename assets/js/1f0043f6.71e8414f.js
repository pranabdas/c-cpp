"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([["6462"],{9238:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>u,toc:()=>p,default:()=>b,metadata:()=>r,assets:()=>f,contentTitle:()=>c});var r=JSON.parse('{"id":"file-io/file-io","title":"File Input Output","description":"Write","source":"@site/docs/file-io/file-io.mdx","sourceDirName":"file-io","slug":"/file-io/","permalink":"/c-cpp/file-io/","draft":false,"unlisted":false,"editUrl":"https://github.com/pranabdas/c-cpp/blob/main/docs/file-io/file-io.mdx","tags":[],"version":"current","frontMatter":{"title":"File Input Output","sidebar_label":"File IO basics"},"sidebar":"docs","previous":{"title":"File IO","permalink":"/c-cpp/category/file-io"},"next":{"title":"Miscellaneous","permalink":"/c-cpp/category/miscellaneous"}}'),i=t(4848),a=t(4429),l=t(4109),o=t(3703),s=t(4565);let u={title:"File Input Output",sidebar_label:"File IO basics"},c=void 0,f={},p=[{value:"Write",id:"write",level:2},{value:"Read",id:"read",level:2},{value:"Append",id:"append",level:2},{value:"Save buffer",id:"save-buffer",level:2},{value:"Read buffer",id:"read-buffer",level:2}];function d(e){let n={h2:"h2",p:"p",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"write",children:"Write"}),"\n","\n",(0,i.jsxs)(l.A,{groupId:"language",children:[(0,i.jsx)(o.A,{value:"C",children:(0,i.jsx)(s.A,{language:"c",title:"src/c/file-io/01-write-file.c",showLineNumbers:!0,children:'#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n// compile: gcc file.c -lm\n\nint main()\n{\n    int ii;\n    double theta, result1, result2;\n\n    FILE *fp;\n    fp = fopen("results.dat", "w");\n    if (fp == NULL)\n    {\n        printf("File could not be created.\\n");\n        exit(1);\n    }\n\n    for (ii = 0; ii < 100; ii++)\n    {\n\n        theta = 4 * 3.14 * ii / 100;\n\n        if (theta == 0) // To avoid the 0/0 situation\n        {\n            theta = 0.000001;\n        }\n\n        result1 = sin(theta) / theta;\n        result2 = sin(2 * theta) / theta;\n\n        // printf("%f\\t%f\\n", theta, result);\n        fprintf(fp, "%f\\t%f\\t%f\\n", theta, result1, result2);\n    }\n    fclose(fp);\n    return 0;\n}\n'})}),(0,i.jsx)(o.A,{value:"C++",children:(0,i.jsx)(s.A,{language:"cpp",title:"src/cpp/file-io/01-write-file.cpp",showLineNumbers:!0,children:'#include <iostream>\n#include <fstream>\nusing namespace std;\n\nint main()\n{\n    // ofstream is used to write to file\n    ofstream fp_out{"data.txt"};\n    // ofstream fp_out{"data.txt", ios::out};\n\n    if (!fp_out)\n    {\n        cerr << "File could not be created!\\n";\n        return 1;\n    }\n\n    for (int i = 1; i <= 10; i++)\n    {\n        fp_out << i << " " << i * i << endl;\n    }\n    \n    fp_out.close();\n    return 0;\n}\n'})})]}),"\n",(0,i.jsx)(n.h2,{id:"read",children:"Read"}),"\n",(0,i.jsxs)(l.A,{groupId:"language",children:[(0,i.jsx)(o.A,{value:"C",children:(0,i.jsx)(s.A,{language:"c",title:"src/c/file-io/02-read-file.c",showLineNumbers:!0,children:'#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX_SIZE 10\n\nvoid read_file(FILE *fp, int data[], int *size)\n{\n    *size = 0;\n    while (fscanf(fp, "%d", &data[*size]) == 1) \n    // fscanf returns 1 if success, 0 if fails\n    {\n        (*size)++;\n    }\n}\n\nvoid print_data(int data[], int size)\n{\n    int i;\n    for (i = 0; i < size; i++)\n    {\n        printf("%d\\n", data[i]);\n    }\n}\n\ndouble average(int data[], int size)\n{\n    int i;\n    double average = 0.0;\n\n    for (i = 0; i < size; i++)\n    {\n        average += data[i];\n    }\n\n    return (average / size);\n}\n\nint main()\n{\n    int i;\n    int size = MAX_SIZE;\n    FILE *fp;\n    int data[MAX_SIZE] = {0};\n\n    fp = fopen("file.dat", "r");\n    if (fp == NULL)\n    {\n        printf("File could not be opened.\\n");\n        exit(1);\n    }\n\n    read_file(fp, data, &size);\n\n    printf("My %d scores are:\\n", size);\n    print_data(data, size);\n\n    printf("Average score: %.2f\\n", average(data, size));\n    fclose(fp);\n    return 0;\n}\n'})}),(0,i.jsx)(o.A,{value:"C++",children:(0,i.jsx)(s.A,{language:"cpp",title:"src/cpp/file-io/02-read-file.cpp",showLineNumbers:!0,children:'#include <iostream>\n#include <fstream>\n#include <string>\nusing namespace std;\n\nint main()\n{\n    // ifstream is used to read from file\n    ifstream fp_in{"data.txt"};\n    // ifstream fp_in{"data.txt", ios::in};\n    if (!fp_in)\n    {\n        cerr << "File could not be opened for reading!\\n";\n        return 1;\n    }\n\n    while (fp_in)\n    {\n        string input_string;\n        getline(fp_in, input_string);\n        cout << input_string << endl;\n    }\n\n    fp_in.close();\n    return 0;\n}\n'})})]}),"\n",(0,i.jsx)(n.h2,{id:"append",children:"Append"}),"\n","\n",(0,i.jsx)(s.A,{language:"cpp",title:"src/cpp/file-io/03-append-file.cpp",showLineNumbers:!0,children:'#include <iostream>\n#include <fstream>\nusing namespace std;\n\nint main()\n{\n    // ofstream is used to write to file\n    ofstream fp_out{"data.txt"};\n\n    if (!fp_out)\n    {\n        cerr << "File could not be created!\\n";\n        return 1;\n    }\n\n    for (int i = 1; i <= 10; i++)\n    {\n        fp_out << i << " " << i * i << endl;\n    }\n    \n    fp_out.close();\n\n    // now we will open the file again to append more content\n    ofstream fp_app{"data.txt", ios::app};\n    // it is also possible to open the same fp_out\n    // fp_out.open("data.txt", ios::app};\n\n    if (!fp_app)\n    {\n        cerr << "File could not be created!\\n";\n        return 1;\n    }\n\n    for (int i = 11; i <= 15; i++)\n    {\n        fp_app << i << " " << i * i << endl;\n    }\n\n    fp_app.close();\n    return 0;\n}\n'}),"\n",(0,i.jsx)(n.h2,{id:"save-buffer",children:"Save buffer"}),"\n",(0,i.jsx)(n.p,{children:"Saving and reading buffer as binary is faster than IO using formatted data."}),"\n","\n",(0,i.jsx)(s.A,{language:"cpp",title:"src/c/file-io/04-save-buffer.c",showLineNumbers:!0,children:'#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    int *base, x;\n    FILE *fp;\n\n    // allocate memory\n    base = (int *)malloc(sizeof(int) * 10);\n    if (base == NULL)\n    {\n        fprintf(stderr, "Failed to allocate memory.\\n");\n        exit(1);\n    }\n\n    // fill with values\n    for (x = 0; x < 10; x++)\n    {\n        *(base + x) = x * 10;\n    }\n\n    // open file\n    fp = fopen("numbers.bin", "w");\n    if (fp == NULL)\n    {\n        printf("File could not be created.\\n");\n        exit(1);\n    }\n\n    printf("%d\\n", *(base + 1));\n    // save buffer to file\n    int size;\n    size = fwrite(base, sizeof(int), 10, fp); \n    // this returns number of items\n    // the data is written in the binary format as it exit in the buffer\n    printf("%d\\n", size);\n    fclose(fp);\n    return 0;\n}\n'}),"\n",(0,i.jsx)(n.h2,{id:"read-buffer",children:"Read buffer"}),"\n","\n",(0,i.jsx)(s.A,{language:"cpp",title:"src/c/file-io/05-read-buffer.c",showLineNumbers:!0,children:'#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    int *base, x, r;\n    FILE *fp;\n\n    // allocate buffer\n    base = (int *)malloc(sizeof(int) * 10);\n    if (base == NULL)\n    {\n        fprintf(stderr, "Error while allocating memory.\\n");\n        exit(1);\n    }\n\n    // open file\n    fp = fopen("numbers.bin", "r");\n    if (fp == NULL)\n    {\n        fprintf(stderr, "Error reading file.\\n");\n        exit(1);\n    }\n\n    // fill the buffer\n    r = fread(base, sizeof(int), 10, fp);\n    if (r != 10)\n    {\n        fprintf(stderr, "Could not read 10 numbers.\\n");\n        exit(1);\n    }\n\n    // print values from buffer\n    for (int i = 0; i < 10; i++)\n    {\n        printf("%d\\n", *(base + i));\n    }\n\n    return 0;\n}\n'})]})}function b(e={}){let{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},3703:function(e,n,t){t.d(n,{A:()=>a});var r=t(4848);t(6540);var i=t(9836);function a(e){let{children:n,hidden:t,className:a}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,i.A)("tabItem_Ymn6",a),hidden:t,children:n})}},4109:function(e,n,t){t.d(n,{A:()=>j});var r=t(4848),i=t(6540),a=t(9836),l=t(8251),o=t(6347),s=t(8004),u=t(5580),c=t(2213),f=t(5734);function p(e){var n,t;return null!=(t=null==(n=i.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){let{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw Error("Docusaurus error: Bad <Tabs> child <".concat("string"==typeof e.type?e.type:e.type.name,'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.'))}))?void 0:n.filter(Boolean))?t:[]}function d(e){let{value:n,tabValues:t}=e;return t.some(e=>e.value===n)}var b=t(8864);function h(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.forEach(function(n){var r;r=t[n],n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r})}return e}function m(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):(function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t.push.apply(t,r)}return t})(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}),e}function v(e){let{className:n,block:t,selectedValue:i,selectValue:o,tabValues:s}=e,u=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.a_)(),f=e=>{let n=e.currentTarget,t=s[u.indexOf(n)].value;t!==i&&(c(n),o(t))},p=e=>{var n,t;let r=null;switch(e.key){case"Enter":f(e);break;case"ArrowRight":{let t=u.indexOf(e.currentTarget)+1;r=null!=(n=u[t])?n:u[0];break}case"ArrowLeft":{let n=u.indexOf(e.currentTarget)-1;r=null!=(t=u[n])?t:u[u.length-1]}}null==r||r.focus()};return(0,r.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},n),children:s.map(e=>{let{value:n,label:t,attributes:l}=e;return(0,r.jsx)("li",m(h({role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>{u.push(e)},onKeyDown:p,onClick:f},l),{className:(0,a.A)("tabs__item","tabItem_LNqP",null==l?void 0:l.className,{"tabs__item--active":i===n}),children:null!=t?t:n}),n)})})}function g(e){let{lazy:n,children:t,selectedValue:l}=e,o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){let e=o.find(e=>e.props.value===l);return e?(0,i.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,r.jsx)("div",{className:"margin-top--md",children:o.map((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==l}))})}function y(e){let n=function(e){let{defaultValue:n,queryString:t=!1,groupId:r}=e,a=function(e){let{values:n,children:t}=e;return(0,i.useMemo)(()=>{let e=null!=n?n:p(t).map(e=>{let{props:{value:n,label:t,attributes:r,default:i}}=e;return{value:n,label:t,attributes:r,default:i}}),r=(0,c.XI)(e,(e,n)=>e.value===n.value);if(r.length>0)throw Error('Docusaurus error: Duplicate values "'.concat(r.map(e=>e.value).join(", "),'" found in <Tabs>. Every value needs to be unique.'));return e},[n,t])}(e),[l,b]=(0,i.useState)(()=>(function(e){var n;let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:r}))throw Error('Docusaurus error: The <Tabs> has a defaultValue "'.concat(t,'" but none of its children has the corresponding value. Available values are: ').concat(r.map(e=>e.value).join(", "),". If you intend to show no default tab, use defaultValue={null} instead."));return t}let i=null!=(n=r.find(e=>e.default))?n:r[0];if(!i)throw Error("Unexpected error: 0 tabValues");return i.value})({defaultValue:n,tabValues:a})),[h,m]=function(e){let{queryString:n=!1,groupId:t}=e,r=(0,o.W6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=t?t:null}({queryString:n,groupId:t});return[(0,u.aZ)(a),(0,i.useCallback)(e=>{var n,t;if(!a)return;let i=new URLSearchParams(r.location.search);i.set(a,e),r.replace((n=function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.forEach(function(n){var r;r=t[n],n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r})}return e}({},r.location),t=t={search:i.toString()},Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):(function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t.push.apply(t,r)}return t})(Object(t)).forEach(function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}),n))},[a,r])]}({queryString:t,groupId:r}),[v,g]=function(e){let{groupId:n}=e,t=n?"docusaurus.tab.".concat(n):null,[r,a]=(0,f.Dv)(t);return[r,(0,i.useCallback)(e=>{t&&a.set(e)},[t,a])]}({groupId:r}),y=(()=>{let e=null!=h?h:v;return d({value:e,tabValues:a})?e:null})();return(0,s.A)(()=>{y&&b(y)},[y]),{selectedValue:l,selectValue:(0,i.useCallback)(e=>{if(!d({value:e,tabValues:a}))throw Error("Can't select invalid tab value=".concat(e));b(e),m(e),g(e)},[m,g,a]),tabValues:a}}(e);return(0,r.jsxs)("div",{className:(0,a.A)("tabs-container","tabList__CuJ"),children:[(0,r.jsx)(v,h({},n,e)),(0,r.jsx)(g,h({},n,e))]})}function j(e){let n=(0,b.A)();return(0,r.jsx)(y,m(h({},e),{children:p(e.children)}),String(n))}}}]);