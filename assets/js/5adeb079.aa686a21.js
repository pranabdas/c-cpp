"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[734],{5162:(e,n,t)=>{t.d(n,{Z:()=>s});var a=t(7294),r=t(6010);const l="tabItem_Ymn6";function s(e){let{children:n,hidden:t,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,s),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>m});var a=t(7462),r=t(7294),l=t(6010),s=t(2389),i=t(7392),o=t(7094),c=t(2466);const u="tabList__CuJ",d="tabItem_LNqP";function p(e){var n;const{lazy:t,block:s,defaultValue:p,values:m,groupId:b,className:g}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=m??f.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),v=(0,i.l)(h,((e,n)=>e.value===n.value));if(v.length>0)throw new Error(`Docusaurus error: Duplicate values "${v.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===p?p:p??(null==(n=f.find((e=>e.props.default)))?void 0:n.props.value)??f[0].props.value;if(null!==y&&!h.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:w}=(0,o.U)(),[_,C]=(0,r.useState)(y),T=[],{blockElementScrollPositionUntilNextRender:N}=(0,c.o5)();if(null!=b){const e=k[b];null!=e&&e!==_&&h.some((n=>n.value===e))&&C(e)}const I=e=>{const n=e.currentTarget,t=T.indexOf(n),a=h[t].value;a!==_&&(N(n),C(a),null!=b&&w(b,String(a)))},x=e=>{var n;let t=null;switch(e.key){case"Enter":I(e);break;case"ArrowRight":{const n=T.indexOf(e.currentTarget)+1;t=T[n]??T[0];break}case"ArrowLeft":{const n=T.indexOf(e.currentTarget)-1;t=T[n]??T[T.length-1];break}}null==(n=t)||n.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":s},g)},h.map((e=>{let{value:n,label:t,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:_===n?0:-1,"aria-selected":_===n,key:n,ref:e=>T.push(e),onKeyDown:x,onClick:I},s,{className:(0,l.Z)("tabs__item",d,null==s?void 0:s.className,{"tabs__item--active":_===n})}),t??n)}))),t?(0,r.cloneElement)(f.filter((e=>e.props.value===_))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==_})))))}function m(e){const n=(0,s.Z)();return r.createElement(p,(0,a.Z)({key:String(n)},e))}},3055:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>b,frontMatter:()=>o,metadata:()=>u,toc:()=>p});var a=t(7462),r=(t(7294),t(3905)),l=t(5488),s=t(5162),i=t(814);const o={title:"Basic data types"},c=void 0,u={unversionedId:"basics/data-types",id:"basics/data-types",title:"Basic data types",description:"C/C++ statically typed languages. Before we can store certain values in the",source:"@site/docs/basics/data-types.mdx",sourceDirName:"basics",slug:"/basics/data-types",permalink:"/c-cpp/basics/data-types",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/basics/data-types.mdx",tags:[],version:"current",frontMatter:{title:"Basic data types"},sidebar:"docs",previous:{title:"Add two integers",permalink:"/c-cpp/basics/add-two-integers"},next:{title:"Control flow",permalink:"/c-cpp/basics/control-flow"}},d={},p=[],m={toc:p};function b(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"C/C++ statically typed languages. Before we can store certain values in the\ncomputer memory, we need to declare their data types."),(0,r.kt)(l.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"C",mdxType:"TabItem"},(0,r.kt)(i.Z,{language:"c",title:"src/c/basics/02-data-types.c",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <stdio.h>\n\nint main()\n{\n    unsigned int u_num = 8;\n    printf("Unsigned integer: %u\\n", u_num);\n\n    int num = -9;\n    printf("Integer: %d\\n", num);\n\n    long int large_num = 3988764563425;\n    printf("Large integer: %ld\\n", large_num);\n\n    float num_f = 3.14159;\n    printf("Float: %f\\n", num_f);\n\n    double num_d = 3.141592653589793;\n    printf("Double precision float: %16.15f\\n", num_d);\n\n    char c = \'a\'; // char data type must be wrapped in single quotes\n                  // double quote in c/c++ denotes string literal which is an\n                  // array of char with null terminator (\\0)\n    printf("Char: %c\\n", c);\n    printf("ASCII value of char: %d\\n", c);\n    printf("char corresponding to ascii value 98: %c\\n", 98);\n\n    char message[] = "Hello"; // string literal\n                              // same as {\'H\', \'e\', \'l\', \'l\', \'o\', \'\\0\'}\n    printf("String: %s\\n", message);\n\n    return 0;\n}\n')),(0,r.kt)(s.Z,{value:"C++",mdxType:"TabItem"},(0,r.kt)(i.Z,{language:"cpp",title:"src/cpp/basics/02-data-types.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <iostream>\n#include <iomanip> // setprecision\nusing namespace std;\n\nint main()\n{\n    unsigned int u_num = 8;\n    cout << "Unsigned integer: " << u_num << endl;\n\n    int num = -9;\n    cout << "Integer: " << num << endl;\n\n    long int large_num = 3988764563425;\n    cout << "Large integer: " << large_num << endl;\n\n    float num_f = 3.14159;\n    cout << "Float: " << num_f << endl;\n\n    double num_d = 3.141592653589793;\n    cout << "Double precision float: " << setprecision(16) << num_d << endl;\n\n    char c = \'a\';\n    cout << "Char: " << c << endl;\n    cout << "ASCII value of char: " << int(c) << endl;\n    cout << "char corresponding to ascii value 98: " << char(98) << endl;\n\n    char message[] = "Hello";\n    cout << "String: " << message << endl;\n\n    return 0;\n}\n'))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"A decimal integer cannot start with ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),", in that case it is considered octal\nbase. For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"076")," denotes ",(0,r.kt)("inlineCode",{parentName:"p"},"63")," in decimal notation.")))}b.isMDXComponent=!0}}]);