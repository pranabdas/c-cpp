"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[509],{9166:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>m,default:()=>x,frontMatter:()=>l,metadata:()=>p,toc:()=>i});var a=t(7462),r=(t(7294),t(3905)),o=t(5488),c=t(5162),u=t(814);const l={title:"Complex number"},m=void 0,p={unversionedId:"data-structure/complex-number",id:"data-structure/complex-number",title:"Complex number",description:"",source:"@site/docs/data-structure/complex-number.mdx",sourceDirName:"data-structure",slug:"/data-structure/complex-number",permalink:"/c-cpp/data-structure/complex-number",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/data-structure/complex-number.mdx",tags:[],version:"current",frontMatter:{title:"Complex number"},sidebar:"docs",previous:{title:"enum",permalink:"/c-cpp/data-structure/enum"},next:{title:"File IO",permalink:"/c-cpp/category/file-io"}},s={},i=[],d={toc:i};function x(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(c.Z,{value:"C",mdxType:"TabItem"},(0,r.kt)(u.Z,{language:"c",title:"src/c/data-structure/03-complex-number.c",showLineNumbers:!0,mdxType:"CodeBlock"},'// also see complex.h\n#include <stdio.h>\n\nint main()\n{\n    _Complex float z = 4.0 + 3.0i;\n\n    printf("Real part = %f\\n", __real__(z));\n    printf("Imaginary part = %f\\n", __imag__(z));\n    \n    // complex conjugate\n    _Complex float conj_z = ~z;\n    printf("Conjugate = (%f, %f)\\n", __real__(conj_z), __imag__(conj_z));\n\n    return 0;\n}')),(0,r.kt)(c.Z,{value:"C++",mdxType:"TabItem"},(0,r.kt)(u.Z,{language:"cpp",title:"src/cpp/data-structure/03-complex-number.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <iostream>\n#include <complex>\nusing namespace std;\n\nint main()\n{\n    complex<double> z(2.0, 3.0); // declare complex number: 2 + 3i\n\n    // real and imaginary parts\n    cout << "Real part: " << real(z) << endl;\n    cout << "Imaginary part: " << imag(z) << endl;\n\n    // absolute value\n    cout << "Absolute value of " << z << " is " << abs(z) << endl;\n\n    // norm\n    cout << "Norm of " << z << " is " << norm(z) << endl;\n\n    // complex conjugate\n    cout << "Complex conjugate of " << z << " is " << conj(z) << endl;\n\n    complex<double> z2(3.0, 4.0);\n    cout << z << " + " << z2 << " = " << z + z2 << endl;\n    cout << z << " * " << z2 << " = " << z * z2 << endl;\n\n    return 0;\n}\n'))))}x.isMDXComponent=!0}}]);