"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[3064],{4211:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>s,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var o=t(7462),r=(t(7294),t(3905)),a=t(6823);const i={title:"Monte Carlo Method"},c=void 0,l={unversionedId:"coding-practice/monte-carlo",id:"coding-practice/monte-carlo",title:"Monte Carlo Method",description:"Integration",source:"@site/docs/coding-practice/monte-carlo.mdx",sourceDirName:"coding-practice",slug:"/coding-practice/monte-carlo",permalink:"/c-cpp/coding-practice/monte-carlo",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/coding-practice/monte-carlo.mdx",tags:[],version:"current",frontMatter:{title:"Monte Carlo Method"},sidebar:"docs",previous:{title:"Coding practice",permalink:"/c-cpp/category/coding-practice"},next:{title:"Resources",permalink:"/c-cpp/resources"}},p={},u=[{value:"Integration",id:"integration",level:2},{value:"Value of pi",id:"value-of-pi",level:2}],d={toc:u};function s(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"integration"},"Integration"),(0,r.kt)("p",null,"Integration using Monte Carlo method:"),(0,r.kt)(a.Z,{language:"cpp",title:"src/cpp/coding-practice/01-monte-carlo-integration.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'// Monte carlo method of integration\n// calculate area under the curve y = x^2 within x limits [1, 3]\n#include <iostream>\n#include <cmath>   // pow\n#include <cstdlib> // rand\nusing namespace std;\n\nint main()\n{\n    double x_lower = 1;\n    double x_upper = 3;\n    int iterations = 1\'000\'000;\n\n    double y_lower = 0;\n    double y_upper = pow(x_upper, 2);\n    double area_rect = y_upper * (x_upper - x_lower);\n\n    int total_area = 0;\n    int monte_area = 0;\n    double result = 0;\n\n    for (int i = 0; i < iterations; i++)\n    {\n        double x, y;\n        x = rand() % 1000; // generate random integer upto 1000\n        y = rand() % 1000;\n\n        x = x / 1000; // scale the numbers to [0, 1]\n        y = y / 1000;\n\n        x = x_lower + x * (x_upper - x_lower);\n        y = y_lower + y * (y_upper - y_lower);\n\n        // this check is unnecessary since all points are bound be in this range\n        if (x >= x_lower && x <= x_upper)\n        {\n            total_area += 1;\n\n            if (y <= pow(x, 2))\n            {\n                monte_area += 1;\n            }\n        }\n    }\n\n    if (total_area != 0)\n    {\n        result = area_rect * monte_area / total_area;\n    }\n\n    cout << "Area = " << result << endl;\n    cout << "Analytical result = " << (27.0 - 1) / 3 << endl;\n\n    return 0;\n}\n'),(0,r.kt)("h2",{id:"value-of-pi"},"Value of pi"),(0,r.kt)("p",null,"Approximate value of pi using Monte Carlo method:"),(0,r.kt)(a.Z,{language:"cpp",title:"src/cpp/coding-practice/02-monte-carlo-pi.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'// find out value of pi by calculating area of circle by monte carlo method\n// area of circle = pi * r^2\n// area of enclosing rectangle = (2 * r)^2\n#include <iostream>\n#include <cstdlib>\n#include <cmath>\nusing namespace std;\n\nint main()\n{\n    int iterations = 1\'000\'000;\n    double x_lower = -1.0;\n    double y_lower = -1.0;\n    double x_upper = 1.0;\n    double y_upper = 1.0;\n    double monte_area = 0;\n\n    for (int i = 0; i < iterations; i++)\n    {\n        double x, y;\n        x = rand() % 1000; // generate random integer upto 1000\n        y = rand() % 1000;\n\n        x = x / 1000; // scale the numbers to [0, 1]\n        y = y / 1000;\n\n        x = x_lower + x * (x_upper - x_lower);\n        y = y_lower + y * (y_upper - y_lower);\n\n        if (x * x + y * y < 1)\n        {\n            monte_area += 1;\n        }\n    }\n\n    // pi = 4 * area_circ / area_rect = 4 * monte_area / iterations\n    cout << "pi = " << 4 * monte_area / iterations << endl;\n    cout << "actual value = " << 4 * atan(1) << endl;\n\n    return 0;\n}\n'))}s.isMDXComponent=!0}}]);