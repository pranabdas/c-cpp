"use strict";(self.webpackChunkc_cpp=self.webpackChunkc_cpp||[]).push([[732],{2952:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>u,metadata:()=>d,toc:()=>p});var i=e(7462),a=(e(7294),e(3905)),o=e(5488),s=e(5162),c=e(814);const u={title:"Function"},r=void 0,d={unversionedId:"basics/function",id:"basics/function",title:"Function",description:"Function prototype",source:"@site/docs/basics/function.mdx",sourceDirName:"basics",slug:"/basics/function",permalink:"/c-cpp/basics/function",draft:!1,editUrl:"https://github.com/pranabdas/c-cpp/blob/main/docs/basics/function.mdx",tags:[],version:"current",frontMatter:{title:"Function"},sidebar:"docs",previous:{title:"Loop",permalink:"/c-cpp/basics/loop"},next:{title:"Recursion",permalink:"/c-cpp/basics/recursion"}},l={},p=[{value:"Function prototype",id:"function-prototype",level:2},{value:"Call by reference",id:"call-by-reference",level:2}],f={toc:p};function m(n){let{components:t,...e}=n;return(0,a.kt)("wrapper",(0,i.Z)({},f,e,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"C",mdxType:"TabItem"},(0,a.kt)(c.Z,{language:"c",title:"src/c/basics/05-circle-area.c",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <stdio.h>\n\n#define PI 3.14159\n// preprocessor statement: it tells the compiler to replace instances of PI with\n// its defined value\n\nint main()\n{\n    double area = 0.0;\n    double radius = 0.0;\n    printf("Enter radius: ");\n    scanf("%lf", &radius);\n\n    area = PI * radius * radius;\n    printf("Area of circle = %lf\\n", area);\n}\n\n/*=============================================================================\nTest 1:\nradius = 1\narea = 3.14159\n=============================================================================*/\n')),(0,a.kt)(s.Z,{value:"C++",mdxType:"TabItem"},(0,a.kt)(c.Z,{language:"cpp",title:"src/cpp/basics/05-deg-c-f.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <iostream>\nusing namespace std;\n\nint main()\n{\n    float degC;\n    cout << "Enter value in deg C: ";\n    cin >> degC;\n\n    float degF;\n    degF = (9.0 / 5) * degC + 32;\n    // notice 9/5 would result in integer division give 1\n    // degF = (static_cast<float>(9) / 5) * degC + 32;\n    // degF = (float) 9 / 5 * degC + 32;\n\n    cout << degC << " deg C = " << degF << " deg F" << endl;\n    return 0;\n}\n'))),(0,a.kt)("h2",{id:"function-prototype"},"Function prototype"),(0,a.kt)("p",null,"Prototype declaration can help with code organization. We can declare function\nprototype in the top of the file followed by main function, and finally place\nthe body of prototyped functions in the bottom."),(0,a.kt)(c.Z,{language:"c",title:"src/c/basics/05-function-proto.c",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <stdio.h>\n\n// prototype declaration\nfloat add(float, float);  \n// float add(float input1, float input2);\n\nint main()\n{\n    float input1, input2, sum;\n    printf("Enter input 1: ");\n    scanf("%f", &input1);\n    printf("Enter input 2: ");\n    scanf("%f", &input2);\n\n    sum = add(input1, input2);\n\n    printf("Total = %f\\n", sum);\n\n    return 0;\n}\n\n// function definition can be placed after main()\nfloat add(float input1, float input2)\n{\n    return (input1 + input2);\n}\n'),(0,a.kt)("h2",{id:"call-by-reference"},"Call by reference"),(0,a.kt)("p",null,"We can call by reference in order to update the values in the calling\nenvironment instead of returning function values. Here is an example in C++:"),(0,a.kt)(c.Z,{language:"c",title:"src/cpp/basics/05-func-call-by-ref.cpp",showLineNumbers:!0,mdxType:"CodeBlock"},'// this program takes an integer input and prints number of digits in the given\n// input and sum of the digits. For example, an input of 1235 would print 4 and\n// 11. If we have to implement a function, we need to return two results. One of\n// the ways we can achieve this by implementing a function with call by\n// reference\n#include <iostream>\nusing namespace std;\n\nvoid analyze_digits(int, int &, int &);\n\nint main()\n{\n    int num, num_digits, sum_digits;\n    cout << "Enter integer input: ";\n    cin >> num;\n\n    analyze_digits(num, num_digits, sum_digits);\n\n    cout << "Number of digits: " << num_digits << endl;\n    cout << "Sum of digits: " << sum_digits << endl;\n\n    return 0;\n}\n\nvoid analyze_digits(int num, int &num_digits, int &sum_digits)\n{\n    int digits = 0;\n    int sum = 0;\n\n    while (num > 0)\n    {\n        digits += 1;\n        sum += num % 10;\n        num = num / 10;\n    }\n\n    num_digits = digits;\n    sum_digits = sum;\n}\n'),(0,a.kt)("p",null,"We can achieve the same using pointer as well, however syntax could be little\ndifficult (I think):"),(0,a.kt)(c.Z,{language:"c",title:"src/c/basics/05-using-swap-pointer.c",showLineNumbers:!0,mdxType:"CodeBlock"},'#include <stdio.h>\n\nvoid swap(int *i, int *j)\n{\n    int temp = *i;\n    *i = *j;\n    *j = temp;\n}\n\nint main()\n{\n    int a = 3, b = 5;\n\n    printf("Before swap: a = %d, b = %d\\n", a, b);\n    swap(&a, &b);\n    printf("After swap: a = %d, b = %d\\n", a, b);\n    return 0;\n}\n'))}m.isMDXComponent=!0}}]);